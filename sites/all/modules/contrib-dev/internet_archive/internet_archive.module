<?php
/**
 * @file
 * Provides integration between Drupal files and Archive.org.
 *
 */

/**
 * File status in regards to Archive.org
 */
define('ARCHIVE_QUEUED', 'queued');
define('ARCHIVE_TRANSFERRING', 'transferring');
define('ARCHIVE_TRANSFERRED', 'transferred');
define('ARCHIVE_VALIDATED', 'validated');
define('ARCHIVE_DERIVED', 'derived');
define('ARCHIVE_DELETED', 'deleted');
define('ARCHIVE_FAILED', 'failed');

define('ARCHIVE_FILE_LOCATION_REMOTE','remote');
define('ARCHIVE_FILE_LOCATION_LOCAL','local');

/**
 * Log table status levels
 */
define('ARCHIVE_LOG_ERROR', 1);
define('ARCHIVE_LOG_WARNING', 2);
define('ARCHIVE_LOG_NOTICE', 3);

/** 
 * Implements hook_init()
 */
function internet_archive_init() {

  //first load the class file for the S3 class that talks with archive.org
  $status =
    module_load_include('php', 'internet_archive', 'includes/archive_s3');

  //load all the module include files, most of code is in here
  $includes = array(
		    'archive_util',
		    'cron',
		    'misc',
		    'node',
		    'queue',
		    'reports',
		    'settings_form',
		    'views_helper',
		    );

  foreach($includes as $inc) {
    $status =
      module_load_include('inc', 'internet_archive', 'includes/'.$inc);
  }
}
/**
 * Implements hook_views_api().
 * @return Array with Views API version.
 */
function internet_archive_views_api() {
  return array(
	       'api' => 3,
	       'path' => 
	       drupal_get_path('module', 
			       'internet_archive').'/includes'
	       );
}

/**
 * Implements hook_menu().
 */
function internet_archive_menu() {
  // Main settings pages
  $items['admin/config/internet_archive'] =
    array(
	  'title' => 'Internet Archive',
	  'description' =>
	  t('Configure how files are transferred to Archive.org'),
	  'page callback' => 'internet_archive_settings_home',
	  'access arguments' => array('administer internet_archive'),
	  'type' => MENU_NORMAL_ITEM,
	  );
  $items['admin/config/internet_archive/default'] =
    array(
	  'title' => 'Default Settings',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('internet_archive_admin_form'),
	  'access arguments' => array('administer internet_archive'),
	  'weight' => -3,
	  );

    $items['admin/config/internet_archive/queue'] =
      array(
	    'title' => 'Queue Settings',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('internet_archive_queue_settings_form'),
	    'access arguments' => array('administer internet_archive'),
	    'weight' => 0,
	    );
    
    // report and log views
    $items['admin/reports/internet_archive'] =
      array(
	    'title' => 'Internet Archive Log',
	    'description' => t('View the file transfer log and statistics'),
	    'page callback' => 'internet_archive_reports_home',
	    'access arguments' => array('administer internet_archive'),
	    'type' => MENU_NORMAL_ITEM,
	    );
    $items['admin/reports/internet_archive/default'] =
      array(
	    'title' => 'Uploads',
	    'page callback' => 'internet_archive_reports_log',
	    'access arguments' => array('administer internet_archive'),
	    'type' => MENU_DEFAULT_LOCAL_TASK,
	    'weight' => -3,
	    );
  $items['admin/reports/internet_archive/log'] =
    array(
	  'title' => 'System Messages',
	  'page callback' => 'internet_archive_reports_system_messages',
	  'access arguments' => array('administer internet_archive'),
	  'type' => MENU_LOCAL_TASK,
	  'weight' => 55,
	  );
  $items['admin/reports/internet_archive/stats'] =
    array(
	  'title' => 'Statistics',
	  'page callback' => 'internet_archive_reports_statistics',
	  'access arguments' => array('administer internet_archive'),
	  'type' => MENU_LOCAL_TASK,
	  'weight' => 50,
	  );

  $items['admin/structure/internet_archive'] =
    array(
	  'title' => 'Internet Archive Queues',
	  'description' => t('View file transfer queues'),
	  'page callback' => 'internet_archive_queues_home',
	  'access arguments' => array('administer internet_archive'),
	  'type' => MENU_NORMAL_ITEM,
	  );
  $items['admin/structure/internet_archive/default'] =
    array(
	  'title' => 'Upload Queue',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('internet_archive_queue_admin_form'),
	  'access arguments' => array('administer internet_archive'),
	  'file' => 'includes/internet_archive_queue.inc',
	  'type' => MENU_DEFAULT_LOCAL_TASK,
	  'weight' => -1,
	  );
  //manual file and node based commands
  $items['internet_archive/%/transfer'] =
    array(
	  'title' => 'Confirm File Transfer to Archive.org',
	  'page callback' => 'drupal_get_form',
	  'access arguments' => array('administer internet_archive'),
	  'page arguments' => array('internet_archive_transfer_confirm', 1),
	  );
  $items['node/%node/ia'] =
    array(
	  'title' => 'Internet Archive',
	  'page callback' => internet_archive_node_status,
	  'page arguments' => array(1),
	  //'access arguments' => array('administer internet_archive'),
	  'access callback' => internet_archive_tab_permission,
	  'access arguments' => array(1),
	  'type' => MENU_LOCAL_TASK,
	  'weight' => 10,
	  );
  $items['node/%node/ia/update-metadata'] =
    array(
	  'title' => 'Internet Archive Metadata Update',
	  'page callback' => internet_archive_update_node_metadata,
	  'page arguments' => array(1),
	  'access callback' =>internet_archive_update_node_metadata_permission,
	  'access arguments' => array(1),
	  'type' => MENU_CALLBACK,
	  'weight' => 10,
  );
  $items['node/%node/ia/delete-files'] =
    array(
	  'title' => 'Internet Archive Metadata Delete',
	  'page callback' => internet_archive_delete_node_files,
	  'page arguments' => array(1, 4),
	  'access callback' => internet_archive_delete_node_files_permission,
	  'access arguments' => array(1),
	  'type' => MENU_CALLBACK,
	  'weight' => 10,
	  );
  $items['ia/log'] =
    array(
	  'title' => 'Internet Archive File Log',
	  'page callback' => internet_archive_log_view,
	  'page arguments' => array('tid', 2),
	  'access arguments' => array('access internet_archive logs'),
	  'type' => MENU_CALLBACK,
	  'weight' => 11,
	  );
  $items['ia/transfer'] =
    array(
	  'title' => 'Transfer Item Out of Queue',
	  'page callback' => 'internet_archive_transfer_item_out_of_queue',
	  'page arguments' => array(2),
	  'access arguments' => array('administer internet_archive'),
	  'type' => MENU_LOCAL_TASK,
	  'weight' => 11,
	  );
  $items['ia/validate'] =
    array(
	  'title' => 'Validate and Transfer Archive Item',
	  'page callback' => 'internet_archive_validate_and_derive',
	  'page arguments' => array(2),
	  'access arguments' => array('administer internet_archive'),
	  'type' => MENU_LOCAL_TASK,
	  'weight' => 11,
	  );

  return $items;
}
/**
 * Implements hook_permission().
 */
function internet_archive_permission() {
  return array(
    'administer internet_archive' => array(
      'title' => t('administer internet_archive'),
      'description' =>
      t('TODO Add a description for \'administer internet_archive\''),
    ),
    'access all internet_archive node tabs' => array(
      'title' => t('access all internet_archive node tabs'),
      'description' =>
      t("TODO Add a description for 'access all internet_archive node tabs'"),
    ),
    'access own internet_archive node tabs' => array(
      'title' => t('access own internet_archive node tabs'),
      'description' =>
      t("TODO Add a description for 'access own internet_archive node tabs'"),
    ),
    'update all internet_archive metadata' => array(
      'title' => t('update all internet_archive metadata'),
      'description' =>
      t('TODO Add a description for \'update all internet_archive metadata\''),
    ),
    'update own internet_archive metadata' => array(
      'title' => t('update own internet_archive metadata'),
      'description' =>
      t('TODO Add a description for \'update own internet_archive metadata\''),
    ),
    'access internet_archive logs' => array(
      'title' => t('access internet_archive logs'),
      'description' =>
      t('TODO Add a description for \'access internet_archive logs\''),
    ),
    'delete all internet_archive files' => array(
      'title' => t('delete all internet_archive files'),
      'description' =>
      t('TODO Add a description for \'delete all internet_archive files\''),
    ),
    'delete own internet_archive files' => array(
      'title' => t('delete own internet_archive files'),
      'description' =>
      t('TODO Add a description for \'delete own internet_archive files\''),
    ),
  );
}

/**
 * Implements hook_views_data().
 * @return Array with Views table information.
 */
function internet_archive_views_data() {
  $data['internet_archive']['table']['group'] = t('Internet Archive');

  $data['internet_archive']['table']['base'] = array(
    'field' => 'tid',
    'title' => t('Internet Archive'),
    'help' => t("Information regarding files transferred to Archive.org"),
    'weight' => -10,
  );

  $data['internet_archive']['table']['join'] = array(
    'node' => array(
      'left_field' => 'nid',
      'field' => 'nid',
    ),
  );

  $data['internet_archive']['tid'] = array(
    'title' => t('Transfer ID'),
    // The help that appears on the UI,
    'help' => t('Numeric ID unique to each archive.org transfer'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
  );
  $data['internet_archive']['nid'] = array(
    'title' => t('Node ID'),
    'help' => t('Origin node of the file'), 
    // Information for displaying the nid
    'relationship' => array(
      'label' => t('Node'),
      'base' => 'node',
      'base field' => 'nid',
    ),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
  );
  $data['internet_archive']['in_path'] = array(
    'title' => t('Source Path'),
    'help' => t('Path to file transferred to archive.org'), 
    'relationship' => array(
      'label' => t('Files'),
      'base' => 'files',
      'base field' => 'file_name',
    ),
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['archive_url'] = array(
    'title' => t('Archive.org URL'),
    'help' => t('URL to file on Archive.org'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field_url',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['file_name'] = array(
    'title' => t('File Name'),
    'help' => t('Source file_name'), // The help that appears on the UI,
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['field_name'] = array(
    'title' => t('Field Name'),
    'help' => t('Name of the Drupal Field'),
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['file_location'] = array(
    'title' => t('File Location'),
    'help' => t('Location of file, local or remote'), 
    // Information for displaying the nid
    'field' => array(
		     'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );

  $data['internet_archive']['md5'] = array(
    'title' => t('MD5 Hash'),
    'help' => t('MD5 Hash of the file sent to Archive.org'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['item'] = array(
    'title' => t('Item Identifier'),
    'help' => t('Item/Bucket name of the resource on archive.org'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['status'] = array(
    'title' => t('Transfer Status'),
    'help' => t('Status of the transfer to archive.org'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['date'] = array(
    'title' => t('Date Archived'),
    'help' => t('Date the transfer was initiated to archive.org'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );
  return $data;
}

/**
 * This function determines who and when the Internet Archive tab appears
 */
function internet_archive_tab_permission($node) {
  internet_archive_init();
  global $user;
  if (user_access('access all internet_archive node tabs') ||
      (user_access('access own internet_archive node tabs') &&
       $user->uid == $node->uid)) {
    if ($node_fields = internet_archive_node_fields($node)) {
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_update_node_metadata_permission($node) {
  internet_archive_init();
  global $user;
  if (user_access('update all internet_archive metadata') ||
      (user_access('update own internet_archive metadata') &&
       $user->uid == $node->uid)) {
    if ($files = internet_archive_node_files($node->nid)) {
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_delete_node_files_permission($node) {
  internet_archive_init();
  global $user;
  if (user_access('delete all internet_archive files') ||
      (user_access('delete own internet_archive files') &&
       $user->uid == $node->uid)) {
    if ($files = internet_archive_node_files($node->nid)) {
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}
/**
 * Implements hook_field_formatter_info().
 */
function internet_archive_field_formatter_info() {
  return array(
    'internet_archive_video_embed' => array(
      'label' => t('Internet Archive Video Embed'),
      'field types' => array('file',  'text'),
      'description' => t('Displays video embed code from archive.org.'),
      'settings' => array('archive_links', 'show',
			  'archive_embed_width', 470,
			  'archive_embed_height', 371,
			  ),
    ),
    'internet_archive_thumbnail' => array(
      'label' => t('Internet Archive Thumbnail'),
      'field types' => array('file',  'text'),
      'description' => t('Displays thumbnail from archive.org.'),
      'settings' => array('archive_links', 'show'),
    ),
  );
}

/**
 *  Implements  hook_field_formatter_settings_form().
 */
function internet_archive_field_formatter_settings_form($field, $instance,
							$view_mode, $form,
							&$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();
  //Add your select box
  $element['archive_links'] =
    array(
	  '#type' => 'select', // Use a select box widget
	  '#title' => t('Links?'), // Widget label
	  '#description' => t('Show Archive.org Links?'), // Helper text
	  '#default_value' => $settings['archive_links'], 
	  '#options' => array(
			      'show' => 'Show',
			      'hide' => 'Hide',
			      ),
	  );
  $element['archive_embed_width'] =
    array(
	  '#type' => 'textfield',
	  '#title' => t('Embed Width'),
	  '#size' => 4,
	  '#maxlength' => 4,
	  '#default_value' => isset($settings['archive_embed_width']) ?
	  $settings['archive_embed_width'] : 470,
	  );

  $element['archive_embed_height'] =
    array(
	  '#type' => 'textfield',
	  '#title' => t('Embed Height'),
	  '#size' => 4,
	  '#maxlength' => 4,
	  '#default_value' => isset($settings['archive_embed_height']) ?
	  $settings['archive_embed_height'] : 371,
	  );

  return $element;
}
/**
 * Implements hook_field_formatter_view
 */
function internet_archive_field_formatter_view($entity_type, $entity, $field,
					       $instance, $langcode, $items,
					       $display) {
  
  $element = array();
  $html = '';
  
  $settings = $display['settings'];

  $show_links = FALSE;
  global $internet_archive_show_links;
  if (isset($settings['archive_links']) &&
      $settings['archive_links'] == 'show') {
    $internet_archive_show_links = TRUE;
  }
  else {
    $internet_archive_show_links = FALSE;
  }

  $width = isset($settings['archive_embed_width']) ?
    $settings['archive_embed_width'] : 470;

  $height = isset($settings['archive_embed_height']) ?
    $settings['archive_embed_height'] : 371;

  $fields = internet_archive_fields();
  foreach ($fields as $field_name => $field_info) {
    if ($field_name == $field['field_name'] && $items) {
      $archive_data = internet_archive_load_data_nid($entity->nid,$field_name);
      switch ($display['type']) {
      case 'internet_archive_video_embed':
	$html = internet_archive_embed_from_archive_data($archive_data,
							 $width, $height);
	break;
      case 'internet_archive_thumbnail':
	$thumb = internet_archive_thumb_from_archive_data($archive_data);
	$html = '<img src="' . $thumb . '" />';
	break;
      default:
	break;
      }

      $element[0]['#markup'] = $html;
    }
  }
  


  return $element;
}

