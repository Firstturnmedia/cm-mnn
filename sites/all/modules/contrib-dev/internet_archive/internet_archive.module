<?php
/**
 * @file
 * Provides integration between Drupal files and Archive.org.
 *
 */

/**
 * File status in regards to Archive.org
 */
define('ARCHIVE_QUEUED', 'queued');
define('ARCHIVE_TRANSFERRING', 'transferring');
define('ARCHIVE_TRANSFERRED', 'transferred');
define('ARCHIVE_VALIDATED', 'validated');
define('ARCHIVE_DERIVED', 'derived');
define('ARCHIVE_DELETED', 'deleted');
define('ARCHIVE_FAILED', 'failed');


/**
 * Log table status levels
 */
define('ARCHIVE_LOG_ERROR', 1);
define('ARCHIVE_LOG_WARNING', 2);
define('ARCHIVE_LOG_NOTICE', 3);

/**
 * Implements hook_permission().
 */
function internet_archive_permission() {
  return array(
    'administer internet_archive' => array(
      'title' => t('administer internet_archive'),
      'description' =>
      t('TODO Add a description for \'administer internet_archive\''),
    ),
    'access all internet_archive node tabs' => array(
      'title' => t('access all internet_archive node tabs'),
      'description' =>
      t("TODO Add a description for 'access all internet_archive node tabs'"),
    ),
    'access own internet_archive node tabs' => array(
      'title' => t('access own internet_archive node tabs'),
      'description' =>
      t("TODO Add a description for 'access own internet_archive node tabs'"),
    ),
    'update all internet_archive metadata' => array(
      'title' => t('update all internet_archive metadata'),
      'description' =>
      t('TODO Add a description for \'update all internet_archive metadata\''),
    ),
    'update own internet_archive metadata' => array(
      'title' => t('update own internet_archive metadata'),
      'description' =>
      t('TODO Add a description for \'update own internet_archive metadata\''),
    ),
    'access internet_archive logs' => array(
      'title' => t('access internet_archive logs'),
      'description' =>
      t('TODO Add a description for \'access internet_archive logs\''),
    ),
    'delete all internet_archive files' => array(
      'title' => t('delete all internet_archive files'),
      'description' =>
      t('TODO Add a description for \'delete all internet_archive files\''),
    ),
    'delete own internet_archive files' => array(
      'title' => t('delete own internet_archive files'),
      'description' =>
      t('TODO Add a description for \'delete own internet_archive files\''),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function internet_archive_menu() {
  // Main settings pages
  $items['admin/config/internet_archive'] =
    array(
	  'title' => 'Internet Archive',
	  'description' =>
	  t('Configure how files are transferred to Archive.org'),
	  'page callback' => 'internet_archive_settings_home',
	  'access arguments' => array('administer internet_archive'),
	  'type' => MENU_NORMAL_ITEM,
	  );
  $items['admin/config/internet_archive/default'] =
    array(
	  'title' => 'Default Settings',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('internet_archive_admin_form'),
	  'access arguments' => array('administer internet_archive'),
	  'weight' => -3,
	  );

    $items['admin/config/internet_archive/queue'] =
      array(
	    'title' => 'Queue Settings',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('internet_archive_queue_settings_form'),
	    'access arguments' => array('administer internet_archive'),
	    'file' => 'includes/internet_archive_queue.inc',
	    'weight' => 0,
	    );
    
    // report and log views
    $items['admin/reports/internet_archive'] =
      array(
	    'title' => 'Internet Archive Log',
	    'description' => t('View the file transfer log and statistics'),
	    'page callback' => 'internet_archive_reports_home',
	    'access arguments' => array('administer internet_archive'),
	    'type' => MENU_NORMAL_ITEM,
	    );
    $items['admin/reports/internet_archive/default'] =
      array(
	    'title' => 'Uploads',
	    'page callback' => 'internet_archive_reports_log',
	    'access arguments' => array('administer internet_archive'),
	    'type' => MENU_DEFAULT_LOCAL_TASK,
	    'weight' => -3,
	    );
  $items['admin/reports/internet_archive/log'] =
    array(
	  'title' => 'System Messages',
	  'page callback' => 'internet_archive_reports_system_messages',
	  'access arguments' => array('administer internet_archive'),
	  'type' => MENU_LOCAL_TASK,
	  'weight' => 55,
	  );
  $items['admin/reports/internet_archive/stats'] =
    array(
	  'title' => 'Statistics',
	  'page callback' => 'internet_archive_reports_statistics',
	  'access arguments' => array('administer internet_archive'),
	  'type' => MENU_LOCAL_TASK,
	  'weight' => 50,
	  );

  $items['admin/structure/internet_archive'] =
    array(
	  'title' => 'Internet Archive Queues',
	  'description' => t('View file transfer queues'),
	  'page callback' => 'internet_archive_queues_home',
	  'access arguments' => array('administer internet_archive'),
	  'type' => MENU_NORMAL_ITEM,
	  );
  $items['admin/structure/internet_archive/default'] =
    array(
	  'title' => 'Upload Queue',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('internet_archive_queue_add_remove_form'),
	  'access arguments' => array('administer internet_archive'),
	  'file' => 'includes/internet_archive_queue.inc',
	  'type' => MENU_DEFAULT_LOCAL_TASK,
	  'weight' => -1,
	  );
  //manual file and node based commands
  $items['internet_archive/%/transfer'] =
    array(
	  'title' => 'Confirm File Transfer to Archive.org',
	  'page callback' => 'drupal_get_form',
	  'access arguments' => array('administer internet_archive'),
	  'page arguments' => array('internet_archive_transfer_confirm', 1),
	  );
  $items['node/%node/ia'] =
    array(
	  'title' => 'Internet Archive',
	  'page callback' => internet_archive_node_status,
	  'page arguments' => array(1),
	  'access callback' => internet_archive_tab_permission,
	  'access arguments' => array(1),
	  'type' => MENU_LOCAL_TASK,
	  'weight' => 10,
	  );
  $items['node/%node/ia/update-metadata'] =
    array(
	  'title' => 'Internet Archive Metadata Update',
	  'page callback' => internet_archive_update_node_metadata,
	  'page arguments' => array(1),
	  'access callback' =>internet_archive_update_node_metadata_permission,
	  'access arguments' => array(1),
	  'type' => MENU_CALLBACK,
	  'weight' => 10,
  );
  $items['node/%node/ia/delete-files'] =
    array(
	  'title' => 'Internet Archive Metadata Delete',
	  'page callback' => internet_archive_delete_node_files,
	  'page arguments' => array(1, 4),
	  'access callback' => internet_archive_delete_node_files_permission,
	  'access arguments' => array(1),
	  'type' => MENU_CALLBACK,
	  'weight' => 10,
	  );
  $items['ia/log'] =
    array(
	  'title' => 'Internet Archive File Log',
	  'page callback' => internet_archive_log_view,
	  'page arguments' => array('tid', 2),
	  'access arguments' => array('access internet_archive logs'),
	  'type' => MENU_CALLBACK,
	  'weight' => 11,
	  );

  return $items;
}

/**
 * Loads the general settings form.
 *
 * @see internet_archive_admin_form()
 */
function internet_archive_settings_home() {
  return drupal_get_form('internet_archive_admin_form');
}

/**
 * Loads the general report page.
 *
 */
function internet_archive_reports_home() {
  return internet_archive_reports_log();
}

/**
 * Loads the queue page.
 *
 */
function internet_archive_queues_home() {
  module_load_include('inc', 'internet_archive', 'includes/internet_archive_queue');
  return drupal_get_form('internet_archive_queue_add_remove_form');
}

/**
 * Implements hook_node_update().
 */
function internet_archive_node_update($node) {
  if (variable_get('internet_archive_update', FALSE)) {
    if ($files = internet_archive_node_files($node->nid)) {
      foreach ($files as $key => $archive_data) {
        internet_archive_update_item($node, $archive_data);
      }
    }
  }
}

/**
 * Implements hook_field_display_alter().
 * Adds archive.org file status and manual transfer links
 * beneath relevant field displays
 */
function internet_archive_field_attach_view_alter(&$output, $context) {
  //grab all applicable fields
  $fields = internet_archive_fields();

  foreach ($fields as $field_name => $field_info) {
    //get the value key to reference
    switch ($field_info['type']) {
    case 'file':
      $value_key = 'uri';
      break;
    case 'text':
      $value_key = 'value';
      break;
    default: 
      $value_key = NULL;
      drupal_set_message('Only the file field type is defined at this time',
			 'warning');
      break;
      
    }

    //IF OUR Archive.org FIELD HAS A VAULE, ADD A SUFFIX
    if (isset($output[$field_name]) && $output[$field_name]) {
      if ($output[$field_name]['#items'][0][$value_key]) {
        $suffix =
	  internet_archive_theme_field_display($field_name,
					       $output[$field_name]['#items'],
					       $value_key);
	$output[$field_name][0]['#suffix'] = $suffix;
      }
    }
  }
}

/**
 * Loads all fields chosen on the general settings page
 *
 * @return $fields
 *   An array of field objects.
 */
function internet_archive_fields() {
  global $internet_archive_fields_info;

  $internet_archive_fields_info = array();
  $internet_archive_fields_info['local'] = array();
  $internet_archive_fields_info['remote'] = array();
  
  $fields = array();
  $field_info = field_info_field_map();
  if (($field_types = variable_get('internet_archive_fields', FALSE)) &&
      variable_get('internet_archive_fields_list_display', FALSE)) {
    foreach ($field_types as $field_name => $description) {
      $fields[$field_name] = $field_info[$field_name];
      $internet_archive_fields_info['local'][$field_name] =
	$field_info[$field_name];
    }
  }
  if (($field_types = variable_get('internet_archive_fields_remote', FALSE)) &&
      variable_get('internet_archive_fields_list_display', FALSE)) {
    foreach ($field_types as $field_name => $description) {
      $fields[$field_name] = $field_info[$field_name];
      $internet_archive_fields_info['remote'][$field_name] =
	$field_info[$field_name];
    }
  }

  return $fields;
}

/**
 * Themes the additional archive.org field data provided on node view.
 * TODO: make into a real theme function
 *
 * @param $filefield
 *   A field array.
 * @param $value_key
 *   The name of the array value containing the file_name.
 *
 * @return $filefield_output
 *   A string containing formatted archive.org utility links
 */
function internet_archive_theme_field_display($field_name, $field, $value_key){
  $html = '';
  //loop through all of the data pairs on the field looking for the file
  foreach ($field as $file_info) {
    //did we find the file name we wanted?
    if ($file_info[$value_key]) {
      //grab the data from the internet archive using the file_name 
      $archive_data = internet_archive_load_data($file_info[$value_key],
						 $field_name);
      
      $path = 'https://www.archive.org/details/' .$archive_data['item'];
      
      //if our file has already been transferred and is in a positive state
      //we will give links to view the item on archive.org or download it
      if ($archive_data && ($archive_data['status'] == ARCHIVE_VALIDATED ||
			    $archive_data['status'] == ARCHIVE_DERIVED)) {
	$html .= "<li>";
        $html .=l(t("View Item on Archive.org"), $path);
	$html .= "</li><li>";
	$html .=l(t("Download from Archive.org"),$archive_data['archive_url']);
	$html .= "</li>";
      }
      //if we have data from teh internet archive table and we are queued
      //offer a link to see it in the internet_archive_send_file queue 
      else if ($archive_data && ($archive_data['status'] == ARCHIVE_QUEUED)) {
	$html .= "<li>";
	$html .= l(t("View item in the queue"),
		   "/admin/structure/internet_archive");
	$html .= "</li>";
      }
      //if we have data from teh internet archive table but we aren't yet
      //in a completed state, give a link to the item on archive.org
      //if it exists there it means we haven't run cron or use the transfer VBO
      elseif ($archive_data && ($archive_data['status'] != ARCHIVE_VALIDATED ||
				$archive_data['status'] != ARCHIVE_DERIVED)) {
	$html .= "<li>";
	$html .= l(t("View Partially Transferred Item on Archive.org"), $path);
	$html .= "</li>";
      }
      //we haven't started the transfer yet, so offer a link to do so
      else {
	global $internet_archive_fields_info;
	$file_location = $internet_archive_fields_info['remote'][$field_name] ?
	  'remote' : 'local';

	$uri = $file_info[$value_key];
	$uri = urlencode(str_replace('/', '!-!', $uri)); 
	$transfer_path = 'internet_archive/' . $uri . '/transfer';
	$args = array('query' => drupal_get_destination());
	$args['query']['field_name'] = $field_name;
	$args['query']['file_location'] = $file_location;
	$html .= "<li>";
        $html .= l(t("Transfer File to Archive.org"), $transfer_path, $args);
	$html .= "</li>";
      }
    }
  }

  $html = '<span class="internet-archive-files"><ul>'.$html.'</ul></span>';

  return $html;
}

/**
 * Instantiates a new S3 class.
 *
 * @param $key
 *   A string containing an archive.org user account access key.
 * @param $skey
 *   A string containing an archive.org user account private key.
 *
 * @return $s3
 *   An s3 class provided by includes/archive.php.
 */
function internet_archive_new_s3($key = FALSE, $skey = FALSE) {
  // If the flash video module is installed, do not require this
  require_once DRUPAL_ROOT . '/' .
    drupal_get_path('module', 'internet_archive') . '/includes/archive.php';

  // if keys are being passed in, override defaults
  // AWS access info
  if (!defined('archiveAccessKey')) {
    define('archiveAccessKey', $key ? $key :
	   variable_get('internet_archive_key', NULL));
  }
  if (!defined('archiveSecretKey')) {
    define('archiveSecretKey', $skey ? $skey :
	   variable_get('internet_archive_skey', NULL));
  }
  $s3 = new S3(archiveAccessKey, archiveSecretKey);

  return $s3;
}

/**
 * Form builder for the internet archive site settings form.
 *
 * @ingroup forms
 */
function internet_archive_admin_form($form) {
  $form['internet_archive_help'] =
    array(
	  '#value' => '<p><strong>' .
	  internet_archive_help_links('using-internet-archive', 'link') .
	  '</strong></p>',
  );

  $form['internet_archive_account'] =
    array(
	  '#type' => 'fieldset',
	  '#element_validate' => array('internet_archive_admin_validate'),
	  '#title' => 'Archive.org Account Configuration',
	  '#description' =>
	  t('Global settings for Archive.org S3 configurations.'),
  );
  
  $default_value =
    variable_get('internet_archive_default_server_url',
		 "http://s3.us.archive.org/");
    
  $form['internet_archive_account']['internet_archive_default_server_url'] =
    array(
	  '#type' => 'textfield',
	  '#title' => t('Archive.org S3 URL'),
	  '#default_value' => $default_value,
	  '#description' =>
	  t("URL to send to archive. You probably don't need to change this."),
	  '#required' => TRUE,
	  );
  
  $form['internet_archive_account']['internet_archive_key'] =
    array(
	  '#type' => 'textfield',
	  '#title' => t('Archive.org S3 Access Key'),
	  '#default_value' => variable_get('internet_archive_key', ""),
	  '#description' => t("You can obtain one at: ") .
	  l('http://www.archive.org/account/s3.php',
	    'http://www.archive.org/account/s3.php'),
	  '#required' => TRUE,
	  );
  
  $form['internet_archive_account']['internet_archive_skey'] =
    array(
	  '#type' => 'textfield',
	  '#title' => t('Archive.org S3 Secret Key'),
	  '#default_value' => variable_get('internet_archive_skey', ""),
	  '#description' => t("You can obtain one at: ") .
	  l('http://www.archive.org/account/s3.php',
	    'http://www.archive.org/account/s3.php'),
	  '#required' => TRUE,
	  );

  $form['internet_archive_data'] =
    array(
	  '#type' => 'fieldset',
	  '#title' => 'Basic item and metadata options',
	  '#description' =>
	  t('Basic item and metadata options. More advanced configurations '.
	    'can override these settings in a custom module via '.
	    'hook_internet_archive_metadata.'),
	  );

  $form['internet_archive_data']['internet_archive_update'] = array(
    '#type' => 'checkbox',
    '#title' =>
    t('Update metadata on archive.org for already transferred files when '.
      'nodes are updated?'),
    '#default_value' => variable_get('internet_archive_update', FALSE),
    '#description' =>
    t("If this option is checked, all item metadata will be resent to ".
      "archive.org when their associated nodes are updated."),
  );
  $default_value =str_replace(' ','_', variable_get('site_name',t('My Site')));
  $default_value = variable_get('internet_archive_bucket', $default_value);

  $form['internet_archive_data']['internet_archive_bucket'] =
    array(
	  '#type' => 'textfield',
	  '#title' => t('Default Archive.org Item to store files in'),
	  '#default_value' => $default_value,
	  '#description' =>
	  t("Name of the Archive.org item that files will be placed into, ".
	    "note this has to be unique. This can be overridden by a , ".
	    "configuration but this is the default value and used to test ".
	    "your connection."),
	  '#required' => TRUE,
	  );
  $form['internet_archive_data']['internet_archive_bucket_title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use node title for item name when available?'),
    '#default_value' => variable_get('internet_archive_bucket_title', FALSE),
    '#description' =>
    t("This provides a simple alternative to storing files in the default ".
      "item above. Checking this box will result in all transferred files ".
      "being stored in a item/bucket based on their source node title."),
  );
  $form['internet_archive_data']['internet_archive_bucket_body'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use node body for item description when available?'),
    '#default_value' => variable_get('internet_archive_bucket_body', FALSE),
    '#description' =>
    t("If this box is checked, when a node body is available it will be sent ".
      "along as the description for the item on archive.org"),
  );

  $default_value =
    variable_get('internet_archive_collection', "test_collection");
  $description =
    t("Archive.org is broken into many collections. For initial testing ".
      "this defaults to the test collection where files are automatically ".
      "deleted after 30 days. Once you are done testing, you should change ".
      "this to an appropriate permanent collection. You can specify ".
      "multiple collections separated by commas but make sure to put them ".
      "in order of most specific to most general. Note that if you are ".
      "using the om_metadata submodule you do not need to add additional ".
      "collections like openmediaproject or community_media here as the ".
      "submodule handles that automatically") . '<br /><strong>' .
    t("Example: denveropenmedia") . '</strong>';

  $form['internet_archive_data']['internet_archive_collection'] = array(
    '#type' => 'textfield',
    '#title' => t('Default collection to store files to'),
    '#default_value' => $default_value,
    '#description' => $description,
  );
  $form['internet_archive_data']['internet_archive_derivatives'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of expected derivatives'),
    '#default_value' => variable_get('internet_archive_derivatives', 3),
    '#description' =>
    t("For a video file, archive.org typically creates 3 derivatives in ".
      "addition to the original file (GIF, OGG, MP4). For audio, there is ".
      "typically 1 derivation (OGG). The module uses this value in order to ".
      "discern when your transfer has finished the derivation process, once ".
      "the number of derivatives reported is equal to or greater than the ".
      "value entered here, the module will update the file status to ".
      "derived and it will start displaying in embeds."),
  );

  $form['internet_archive_data']['internet_archive_mediatype'] = array(
    '#type' => 'select',
    '#title' => t('Default filetype to store files as'),
    '#default_value' => variable_get('internet_archive_mediatype', 'movies'),
    '#options' => array(
      'audio' => 'Audio',
      'education' => 'Education',
      'image' => 'Images',
      'software' => 'Software',
      'movies' => 'Video',
    ),
    '#multiple' => FALSE,
    '#description' =>
    t("This type applies in situations where the system is not provided ".
      "with a media type from hook_internet_archive_metadata, and is not ".
      "able to defer the type from the file itself."),
  );
  
  $description = '<div>' .
    t('Select any fields below that you would like to use to transfer '.
      'files to Archive.org. File, text and embedded media fields are '.
      'supported.') . '<strong>' .
    t(' All fields selected must contain accessible path information as '.
      'their value. Currently this only works with "file" and "text" fields.'.
      'If you are storing path data for files on a remote server, DO NOT '.
      'select the field here. Please enable and configure the Internet '.
      'Archive Remote submodule.') .
    '</strong>';
    
  $form['internet_archive']['internet_archive_field_support'] =
    array(
	  '#type' => 'fieldset',
	  '#title' => 'Field Integration',
	  '#description' => $description,
	  );

  $form['internet_archive']['internet_archive_field_support']
    ['internet_archive_fields'] =
    array(
	  '#type' => 'select',
	  '#title' => t('Include the following fields as file sources'),
	  '#default_value' => variable_get('internet_archive_fields', FALSE),
	  '#options' => internet_archive_field_select_options(),
	  '#multiple' => TRUE,
	  );

  $default_value =
    variable_get('internet_archive_fields_list_display', TRUE);
  
  $form['internet_archive']['internet_archive_field_support']
    ['internet_archive_fields_list_display'] =
    array(
	  '#type' => 'checkbox',
	  '#title' =>
	  t('Display archive.org file information when displaying '.
	    'selected fields on nodes?'),
	  '#default_value' => $default_value,
	  );

  $default_value = variable_get('internet_archive_fields_add_inline', TRUE);
  $form['internet_archive']['internet_archive_field_support']
    ['internet_archive_fields_add_inline'] =
    array(
	  '#type' => 'checkbox',
	  '#title' =>
	  t('Offer "add to Archive.org" link when displaying selected '.
	    'fields on nodes?'),
	  '#default_value' => $default_value,
	  );
  

  $form['internet_archive']['internet_archive_report_settings'] =
    array(
	  '#type' => 'fieldset',
	  '#title' => 'Report Settings',
	  '#description' => '',
	  );

  $form['internet_archive']['internet_archive_report_settings']
    ['internet_archive_results_per_page'] =
    array(
	  '#type' => 'textfield',
	  '#title' => t('Number of results per report page'),
	  '#default_value' =>
	  variable_get('internet_archive_results_per_page', 100),
	  '#description' =>
	  t('The number of results that appear on the '.
	    'Internet Archive Log report'),
	  );

  $default_value =
    variable_get('internet_archive_show_only_errors_and_warnings', FALSE);
  
  $form['internet_archive']['internet_archive_report_settings']
    ['internet_archive_show_only_errors_and_warnings'] =
    array(
	  '#type' => 'checkbox',
	  '#title' =>
	  t('Should the "System Messages" tab on the Internet Archive Log '.
	    'show only Errors and Warnings?'),
	  '#default_value' => $default_value,
	  );
  
  $form['internet_archive']['internet_archive_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Debug Mode'),
    '#default_value' => variable_get('internet_archive_debug', FALSE),
    '#description' =>
    t("Enables verbose watchdog messages for debug purposes."),
  );

  return system_settings_form($form);
}

/**
 * Loads all views indicated as file views on the general settings page.
 *
 * @return $views
 *   An array of view names.
 */
function internet_archive_file_views() {
  $all_views = views_get_all_views();

  $views = array();
  foreach ($all_views as $key => $view) {
    if ($view->base_table == 'files' || $view->base_table == 'node') {
      $views[$view->name] = $view->name;
    }
  }
  asort($views);
  return $views;
}

/**
 * Builds an array of file_names from views chosen on the general settings page.
 *
 * @return $unarchived_files
 *   An associated array of field info and their value file_names.
 */
function internet_archive_harvest_file_names_from_views() {
  dsm('internet_archive_harvest_file_names_from_views');
  $views = variable_get('internet_archive_file_views', NULL);

  if (!$views) {
    return FALSE;
  }

  //GET ALL THE FIELDS THAT THAT WILL PUSH DATA TO INTERNET ARCHIVE
  $archive_fields = internet_archive_fields();

  //GLOBAL SET IN internet_archive_fields()
  global $internet_archive_fields_info;
  
  //right now only text and file fields are supported
  $field_keys_by_type = array(
			   'text' => array(),
			   'file'=>array()
			   );

  //LOOP OVER EACH VIEW THAT CAN HARVEST ENTITY FIELDS THAT ARE CONFIGURED TO
  //PUSH DATA TO Archive.org
  foreach ($views as $view_name => $info) {
    $harvest_results = views_get_view_result($view_name);

    if (count($harvest_results) > 0) {
      //FIND THE FIELDS THAT HAVE OUR FILE INFO
      foreach ($archive_fields as $field_name => $field_info) {
	
	foreach ($harvest_results[0] as $key => $info) {
	  if ("field_" . $field_name == $key) {
	    $field_keys_by_type[$field_info['type']][$field_name] = $key;
	    break;
	  }
	}
      }    

      //IF WE DONT FIND A FIELD KEY TO GRAB FILE INFO THEN THIS VIEW IS
      //NOT CONFIGURED CORRECTLY
      if (!$field_keys_by_type) {
	drupal_set_message("Error Code #33453 No field found for $view_name",
			   'error');
        continue;
      }

      //LOOP OVER ALL THE RESULTS WE GOT FROM VIEWS
      foreach ($harvest_results as $key => $fileinfo) {
	//LOOP OVER ALL THE RELEVANT FIELD KEYS FOR WITHIN A VIEW RESULT
	foreach($field_keys_by_type as $field_type => $field_keys) {
	  //LOOP THROUGH ALL THE FIELD KEYS & GRAB THE VALUES FROM VIEW RESULT
	  foreach($field_keys as $field_name => $field_key) {
	    $field_value = $fileinfo->{$field_key};

	    //WE HAVE A VALUE FOR OUR FIELD
	    if ($field_value) {
	      $file_location =
		$internet_archive_fields_info['remote'][$field_name] ?
		'remote' : 'local';
	      
	      //IF WE HAVE A 'file' FIELD
	      if ($field_type == 'file') {
		$uri = $field_value[0]['raw']['uri'];
		if (file_exists($uri) || ($file_location == 'remote')) {
		  $file_names[$uri] = array('field_name' => $field_name,
					   'file_location' => $file_location);
		}
	      }
	      //IF WE HAVE A VALUE FOR A 'text' FIELD
	      else if($field_type == 'text') {
		$uri = $field_value[0]['raw']['value'];
		$file_names[$uri] = array('field_name' =>$field_name,
					 'file_location' => $file_location);
	      }
	      //WE HAVE A VALUE BUT NO LOGIC SET UP FOR THE $field_type
	      else {
		drupal_set_message("Error Code #8268: Can't find file_name " .
				   "for field of type $field_type", 'error');
	      }
	    }
	  }
	}
      }
    }
  }

  $unarchived_files = array();

  //IF WE FOUND VALUES FOR Archive.org FIELDS, CHECK TO SEE IF THEY THEY
  //ALREADY EXIST IN THE internet_archive CUSTOM TABLE
  if ($file_names) {
    foreach ($file_names as $file_name => $file_info) {
      $archive_data = internet_archive_load_data($file_name,
						 $file_info['field_name']);
      if ((!$archive_data)) {
        $unarchived_files[$file_name] = $file_info;
      }
    }
  }

  return $unarchived_files;
}

/**
 * Implements hook_cron().
 */
function internet_archive_cron() {
  //validate previous transfers
  internet_archive_validate_transfers();

  if (variable_get('internet_archive_queue_harvest_cron', FALSE)) {
    //Add new files to queue if available
    internet_archive_harvest_files();
  }
  
  //Check for new derivations to update.
  internet_archive_store_derivatives();
}

/**
 * Primary file harvest function, grabs candidates from views based on administrative
 * settings and adds them to a drupal queue for later transfer.
 */
function internet_archive_harvest_files() {
  //Check to see if we should authenticate
  if ($cron_user = variable_get('internet_archive_cron_user', FALSE)) {
    global $user;
    $original_user = $user;
    drupal_save_session(FALSE);
    $tmp = array();
    $users = array('name' => $cron_user);
    $array = user_load_multiple($tmp, $users);
    $user = array_shift($array);
  }

  //administrative setting for requeing stale/expired queue items
  if (variable_get('internet_archive_expired_queue', FALSE)) {
    internet_archive_harvest_expired_queued();
  }
  
  $file_names = internet_archive_harvest_file_names_from_views();

  if (variable_get('internet_archive_queue_attempts', 0) > 0) {
    $reprocess_file_names = internet_archive_harvest_failed();
    if ($reprocess_file_names) {
      $file_names = array_merge($reprocess_file_names, $file_names);
    }
  }
  dsm($file_names, 'harvested the following file_names');
  
  $transfer_queue = DrupalQueue::get('internet_archive_send_file');

  if ($file_names) {
    foreach ($file_names as $file_name => $file_info) {
      $archive_data = array();
      $field_name = $file_info['field_name'];
      $file_location = $file_info['file_location'];
            
      $status = isset($archive_data['status']) ?
	$archive_data['status'] : NULL;

      if ($status != ARCHIVE_QUEUED && $status != ARCHIVE_TRANSFERRING
	  && $status != ARCHIVE_TRANSFERRED &&
	  $status != ARCHIVE_VALIDATED && $status != ARCHIVE_DERIVED) {

	$node = internet_archive_get_node_from_file_name($file_name,
							 $field_name);
	
	if ($file_info['file_location'] == 'local' &&
	    is_readable($file_name)) {
	  $file_size = internet_archive_file_size($file_name);
	}
	else {
	  $file_size = 0;
	}

	$archive_data = array(
			      'nid' => $node->nid,
			      'in_path' => $file_name,
			      'file_name' => basename($file_name),
			      'file_size' => $file_size,
			      'status' => ARCHIVE_QUEUED,
			      'field_name' => $file_info['field_name'],
			      'file_location' => $file_info['file_location'],
			      'transfer_initiated' => 0,
			      'attempts' => 0,
			      'date' => REQUEST_TIME,
			      'item' => '',
			      );
	internet_archive_invoke_internet_archive($archive_data, 'harvested');

	//PREPARE QUEUE ITEM
	$queue_item = array();
	$queue_item = array('file_name' => $file_name,
			    'field_name' => $archive_data['field_name'],
			    'file_location' => $archive_data['file_location']);

	//NEED TO MAKE SURE ITEM IS NOT ALREADY IN THE QUEUE
	$sql = "SELECT item_id FROM {queue} WHERE data = :data";
	$params = array(':data' => serialize($queue_item));
	$queue_id = db_query($sql, $params)->fetchField();
	
	if ($queue_id) {
	  dsm("found me in the queue");
	  continue;
	}
	//add the file to queue
	$transfer_queue->createItem($queue_item);
	//update the file status to queued if this is the first attempt
	if ($status != ARCHIVE_FAILED) {
	  internet_archive_insert_archive_data($archive_data);	  
	}
	internet_archive_invoke_internet_archive($archive_data, 'queued');
      }
    }
  }

  //All done, reset our user session if necessary
  if ($cron_user) {
    $user = $original_user;
  }
}

/**
 * Compares current hour to the hour range set on the internet archive
 * queue settings page.
 *
 * @return
 *   TRUE if the current hour is within range, FALSE if not
 */
function internet_archive_hour_check() {
  $start_hour = variable_get('internet_archive_queue_start_time', 'none');
  if ($start_hour == 'none') {
    return TRUE;
  }

  $end_hour = variable_get('internet_archive_queue_end_time', 'none');
  $current_hour = date('G');
  $available_hours = array();

  //quick loop to find valid hours
  $set_hour = $start_hour;
  while ($set_hour != $end_hour) {
    $available_hours[] = $set_hour;
    switch ($set_hour) {
      case 23:
        $set_hour = 0;
        break;
      default:
        $set_hour++;
        break;
    }
  }

  if (in_array($current_hour, $available_hours)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Compares current day to the day/s set on the internet archive
 * queue settings page.
 *
 * @return
 *   TRUE if the current day matches one chosen, FALSE if not
 */
function internet_archive_day_check() {
  $allowed_days = variable_get('internet_archive_queue_days', 'none');
  $current_day = strtolower(date('l'));

  if (empty($allowed_days) || in_array($current_day, $allowed_days)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Queue worker function to send files
 *
 * @param $queue_item array of file_name, field_name, and file_location
 * @return $status
 *   True or False
 */
function internet_archive_transfer_file_worker($queue_item) {
  dsm('internet_archive_transfer_file_worker');
  dsm($queue_item, 'my queue item i just claimed');
  $status = internet_archive_default_send($queue_item);
  return $status;
}


/**
 * Tests the basic archive.org S3 settings from the general settings page by
 * attempting to create the default bucket at archive.org.
 *
 * @param $element
 * @param &$form_state
 *
 */
function internet_archive_admin_validate($element, &$form_state) {
  // only validate if we have both values
  if ($form_state['values']['internet_archive_key'] && $form_state['values']['internet_archive_skey']) {

    $s3 = internet_archive_new_s3($form_state['values']['internet_archive_key'], $form_state['values']['internet_archive_skey']);

    // To test the configuration credentials, we attempt to create the default bucket.
    if (! $s3->putBucket($form_state['values']['internet_archive_bucket'], NULL, $form_state['values']['internet_archive_default_perm'])) {
      form_error($element, t('Could not create your default item on the Archive servers. This most likely means that either:') . '<br />' . t('1) your default item name conflicts with one that already exists, or') . '<br />' . t('2) the access or secret key provided is incorrect.'));
    }
    else {
      drupal_set_message('Connection to Archive.org tested successfully with the credentials provided below.');
    }
  }
}




/**
 * Validatation for the internet_archive_config() form.
 * TODO: rewrite this function, leftover from mm_s3
 *
 * @param $element
 * @param &$form_state
 *
 * @ingroup forms
 */
function internet_archive_validate_action_settings($element, &$form_state) {
  // @TODO these validation steps need to be checked
  return;
  // Media Mover API will extract the corect data for this since all
  // the form elements are prefixed by media mover when the are displayed
  if ($values = internet_archive_validate_form_data_extract($element)) {
    // buckets must be lower case
    if ($values['internet_archive_bucket'] != drupal_strtolower($values['internet_archive_bucket'])) {
      form_error($element, t('Your bucket name must be lower case.'));
    }
    // alert on delete
    if ($values['internet_archive_delete_source']) {
      drupal_set_message(t('You have choosen to delete your source material.
        Please be aware that this will remove files from your server\'s file system')
      );
    }
  }
}


/**
 * Sends a file to archive.org
 * TODO: improve documentation below
 * TODO: remove the extraneous debug watchdogs
 * TODO: find a better solution to the sleep hack
 *
 * @param $config
 *   An array containing s3 parameters
 *
 * @param $file_info
 *   An array of file_name, field_name, and file_location
 *
 * @return $path
 *   A string containing the itemname/file_name
 */
function internet_archive_send($config, $file_info) {
  dsm('internet_archive_send');
  $file_name = $file_info['file_name'];
  $field_name = $file_info['field_name'];
  $file_location = $file_info['file_location'];
 
  //grab any existing information available for this file_name
  $archive_data = internet_archive_load_data($file_name, $field_name);
  if ($archive_data && isset($archive_data['nid'])) {
    $node = node_load($archive_data['nid']);
  }
  if (!isset($node)) {
    $node = internet_archive_get_node_from_file_name($file_name, $field_name);
  }
  
  //DEBUG LOG
  if (variable_get('internet_archive_debug', FALSE)) {
    watchdog('internet_archive', 'Sending file: ' . $file_name, NULL,
	     WATCHDOG_NOTICE);
  }

  // load the S3 class
  if (! $s3 = internet_archive_new_s3()) {
    return FALSE;
  }

  if ($archive_data) {
    dsm($archive_data, 'found archive data');
    $s3->setTransferId($archive_data['tid']);
    //BUMP UP OUR NUMBER OF ATTEMPTS
    $archive_data['attempts'] ++;
  }
  else {
    $archive_data = array(
      'item' => $config['internet_archive_bucket'],
      'in_path' => $file_name,
      'file_name' => basename($file_name),
      'attempts' => 1,
      'field_name' => $field_name,
      'file_location' => $file_location,
      'date' => REQUEST_TIME,
      'archive_url' => 'http://www.archive.org/download/' .
      $config['internet_archive_bucket'] . '/' . basename($file_name),
      'nid' => $node ? $node->nid : NULL,
    );
    dsm($archive_data, 'initialized archive data');
  }

  // IF THE FILE IS LOCAL AND WE CANT READ IT RETURN FALSE
  if ($file_location == 'local' && !is_readable($file_name)) {
    watchdog('internet_archive', 'File is not readable: ' . $file_name .
	     ', please check that this file exists and the web user has ' .
	     'read permissions to it.', NULL, WATCHDOG_ERROR);
    return FALSE;
  }
  // IF WE ARE LOCAL GET FILE SIZE
  else if ($file_location == 'local') {
    $file_size = internet_archive_file_size($file_name); 
  }
  else {
    // TODO, FIND WAY TO READ REMOTE FILE
  }

  //SET FILE INFO IF WE GOT IT
  $archive_data['file_size'] = isset($file_size) ? $file_size : 0;
  $mimetype = file_get_mimetype($file_name);
    
  //HACK for DOM, need to find a more general solution
  $pathinfo = pathinfo($file_name);
  if ($pathinfo['extension'] == 'mp2') {
    $mimetype = 'video/mpeg';
  }

  //grab metadata if it is available
  $metadata = array();
  $metadata = internet_archive_get_metadata($node, $file_name);
  dsm($metadata, "back from internet_archive_get_metadata");
  //TODO: add some sort of backup in case there is no title/pattern...

  //CHECK TO SEE THE METADATA HOOK HAS SET A BUCKET NAME, THIS TAKES
  //PRECEDENT OVER THE OTHER METHODS
  if (isset($metadata['bucket-name']) && $metadata['bucket-name']) {
    $name = $metadata['bucket-name'];
    unset($metadata['bucket-name']);
  }
  else if ($itempattern = variable_get('internet_archive_itemname', NULL)) {
    //FIXME, TOKENS ARE NOT WORKING RIGHT NOW
    $name = token_replace($itempattern, $type = 'node', $object = $node,
			  $leading = '[', $trailing = ']', $options = array());

    $name = internet_archive_create_item_name($name);
  }
  elseif (variable_get('internet_archive_bucket_title', FALSE)) {
    $name = internet_archive_create_item_name($metadata['title']);
  }
  else {
    $default_item =variable_get('internet_archive_bucket',
				variable_get('site_name', t('My Site')));
    
    $name = internet_archive_create_item_name($default_item);
  }

  if (variable_get('internet_archive_queue_attempts', 0) > 0) {
    if ($archive_data['status'] == ARCHIVE_FAILED) {
      $name = $archive_data['item'];
    }
  }

  $headers = internet_archive_process_metadata($metadata);

  $config['internet_archive_bucket'] = $name;
  $s3->bucket = $config['internet_archive_bucket'];
  $archive_data['item'] = $config['internet_archive_bucket'];
  $archive_data['archive_url'] = 'http://www.archive.org/download/' .
    $config['internet_archive_bucket'] . '/' . basename($file_name);
  
  dsm($headers, "Putting up Bucket: $name");
    
  $status =
    $s3->putBucket($config['internet_archive_bucket'], $headers, $perms);

  //Log start of transfer time if we already have row in internet_archive
  $archive_data['transfer_initiated'] = REQUEST_TIME;
  if (isset($archive_data['tid'])) {    
    internet_archive_update_archive_data($archive_data);
  }

  //SET VARIABLES FOR THE WAIT LOOP ON BUCKET CREATTION
  //find a pause time for each loop, ideally so we get 3 nicely timed loops
  $pause = 5;
  $max = 100;
  $index = 0;
  $bucket_exists = FALSE;
  $start = strtotime('now');
  $max_run_time = 35;
    
  // There is a delay on archive.org regarding bucket creation.. so we check
  // every x seconds
  $pause = 5;
  while (!$bucket_exists && ($max_run_time + $start) > strtotime('now')){
    sleep($pause);
    if ($index > $max) {
      break;
    }
    $index++;
    if (internet_archive_bucket_exists($config['internet_archive_bucket'])) {
      $bucket_exists = TRUE;
    }
  }

  if (!$bucket_exists) {
    $archive_data['status'] = ARCHIVE_FAILED;
    if ($archive_data['tid']) {
      internet_archive_update_archive_data($archive_data);
    }
    else {
      internet_archive_insert_archive_data($archive_data);
    }

    $msg = t("Error Code #23244 Bucket could not be found for !file_name, ".
	     "maybe bump up execution time from !max.",
	     array('!file_name' => $file_name,
		   '!max' => $max_run_time));
    
    watchdog('internet_archive', $msg, NULL, WATCHDOG_ERROR);
    drupal_set_message($msg, 'error');
    return FALSE;
  }

  dsm('found bucket!!!!!!!');
  
  //WE FOUND OUR BUCKET SO NOW ITS TIME TO UPLOAD FILE, EITHER FROM A LOCAL
  //SOURCE OR A REMOTE ONE.
  if (module_exists('internet_archive_remote') &&
      $file_location == 'remote') {
    dsm("pushing remote file");
    $status =
      internet_archive_remote_put_object($file_name,
					 $config['internet_archive_bucket'],
					 basename($file_name), $headers,
					 $mimetype);
    //TODO MAKE internet_archive_remote_put_object RETURN A STATUS AND IF
    //FAILED RETURN FALSE
    //return FALSE;
  }
  //PUTTING UP A LOCAL FILE
  else {
    dsm('pushing local file');
    $status = $s3->putObjectFile($file_name,$config['internet_archive_bucket'],
				 basename($file_name), $headers, $mimetype);
    //IF WE HAD A HARD FAIL ON PUTTING UP THE FILE
    if (!$status) {
      $archive_data['status'] = ARCHIVE_FAILED;
      
      //UPDATE internet_archive TABLE WITH FAILURE INFO
      if ($archive['tid']) {
	internet_archive_update_archive_data($archive_data);
      }
      else {
	internet_archive_insert_archive_data($archive_data);
      }
      
      $error =
	t('File transfer to Archive.org failed, transfer marked as failed.');

      watchdog('internet_archive', $error, NULL, WATCHDOG_ERROR);

      return FALSE;
    }
  }

  // SUCCESS! NOW MARK THE $archive_data AS TRANSFERRED AND ADD OR UPDATE
  // THE ROW IN THE internet_archive TABLE 
  $archive_data['status'] = ARCHIVE_TRANSFERRED;
  
  if ($archive_data['tid']) {
    internet_archive_update_archive_data($archive_data);
  }
  else {
    internet_archive_insert_archive_data($archive_data);
  }
  
  internet_archive_invoke_internet_archive($archive_data, 'transferred');

  return TRUE;
}

  
/**
 * @param $archive_data filled with all necessary info for an insert
 */
function internet_archive_update_archive_data($archive_data) {
  dsm($archive_data, 'updating archive data');
  //  dsm(debug_backtrace(), 'Load Archive Data Backtrace');
  
  db_update('internet_archive')
    ->fields(array(
		   'item' => $archive_data['item'],
		   'in_path' => $archive_data['in_path'],
		   'file_name' => $archive_data['file_name'],
		   'file_size' => $archive_data['file_size'],
		   'status' => $archive_data['status'],
		   'attempts' => $archive_data['attempts'],
		   'transfer_initiated' =>
		   $archive_data['transfer_initiated'],
		   'md5' => $archive_data['md5'],
		   'date' => $archive_data['date'],
		   'archive_url' => $archive_data['archive_url'],
		   'nid' => $archive_data['nid'],
		   ))
    ->condition('tid', $archive_data['tid'])
    ->execute();
}

/**
 * @param $archive_data filled with all necessary info for an insert
 */
function internet_archive_insert_archive_data($archive_data) {
  dsm($archive_data, 'inserting archive data');
  $sql =
    "INSERT into {internet_archive} ".
    "(item, in_path, file_name, file_size, field_name, file_location, " .
    "status, attempts, transfer_initiated, md5, date, archive_url, nid) " .
    "VALUES (:item, :in_path, :file_name, :file_size, :field_name, " .
    "        :file_location, :status, :attempts, :transfer_initiated, " .
    "        :md5, :date, :archive_url, :nid)";
  
  $args = array(':item' => $archive_data['item'],
		':in_path' => $archive_data['in_path'],
		':file_name' => basename($archive_data['file_name']),
		':file_size' => $archive_data['file_size'],
		':field_name' => $archive_data['field_name'],
		':file_location' => $archive_data['file_location'],
		':status' => $archive_data['status'],
		':attempts' => $archive_data['attempts'],
		':transfer_initiated' => $archive_data['transfer_initiated'],
		':md5' => $archive_data['md5'],
		':date' => $archive_data['date'],
		':archive_url' => $archive_data['archive_url'],
		':nid' => $archive_data['nid']);
  db_query($sql, $args);
}
/**
 * Grabs all internet archive transfer information based on node id.
 *
 * @param $nid
 *   Node id
 *
 * @return
 *   An array of internet archive files associated with the node.
 */
function internet_archive_node_files($nid) {
  $result = db_query("SELECT * FROM {internet_archive} WHERE nid = :nid",
		     array(':nid' => $nid));
  $files = array();
  while ($archive_data = $result->fetchAssoc()) {
    $files[] = $archive_data;
  }

  return $files;
}

/**
 * Updates an item's metadata at archive.org based on the source file_name.
 *
 * @param $file_name
 *   A source file_name of a file transferred to archive.org
 */
function internet_archive_update_item($node, $archive_data) {
  dsm('internet_archive_update_item');

  //grab all the necessary information
  $config = internet_archive_default_config();

  if (variable_get('internet_archive_debug', FALSE)) {
    watchdog('internet_archive', 'Updating item: ' .
	     $archive_data['item'], NULL, WATCHDOG_NOTICE);
  }

  // load the S3 class
  if (! $s3 = internet_archive_new_s3()) {
    return FALSE;
  }
  $s3->setTransferId($archive_data['tid']);

  dsm($archive_data, 'archive data for node');
  //grab metadata if it is available
  $metadata = array();
  $metadata = internet_archive_get_metadata($node, $archive_data['file_name']);

  $headers = internet_archive_process_metadata($metadata);

  //this tells archive.org to destroy original metadata
  $headers['x-amz-ignore-preexisting-bucket'] = 1;

  $config['internet_archive_bucket'] = $archive_data['item'];
  $s3->bucket = $config['internet_archive_bucket'];

  dsm('about to putBucket with updated metadata');
  // Send new metadata
  $s3->putBucket($config['internet_archive_bucket'], $headers, $perms);

  $log_entry = array(
    'tid' => $archive_data['tid'],
    'message' => t('Updated metadata at archive.org'),
    'message_data' => $archive_data,
    's3_data' => $headers,
    'type' => ARCHIVE_LOG_NOTICE,
  );

  internet_archive_log($log_entry);
}

/**
 * Deletes all files in an item at archive.org
 *
 * @param $archive_data
 * An array of archive.org information from one of the 
 * internet_archive_load_data functions.
 */
function internet_archive_delete_item($archive_data) {

  //grab all the necessary information
  $config = internet_archive_default_config();

  // load the S3 class
  if (! $s3 = internet_archive_new_s3()) {
    return FALSE;
  }
  $s3->setTransferId($archive_data['tid']);

  $config['internet_archive_bucket'] = $archive_data['item'];
  $s3->bucket = $config['internet_archive_bucket'];

  $s3->deleteObject($config['internet_archive_bucket'],
		    $archive_data['file_name']);
}


/**
 * Deletes all files in an item at archive.org
 *
 * @param $archive_data
 * An array of archive.org information from one of the 
 * internet_archive_load_data functions.
 */
function internet_archive_delete_files($archive_data) {

  //grab all the necessary information
  $config = internet_archive_default_config();

  // load the S3 class
  if (! $s3 = internet_archive_new_s3()) {
    return FALSE;
  }
  $s3->setTransferId($archive_data['tid']);

  $config['internet_archive_bucket'] = $archive_data['item'];
  $s3->bucket = $config['internet_archive_bucket'];

  $s3->deleteFiles($config['internet_archive_bucket'],
		   $archive_data['file_name']);
}

/**
 * Harvests failed files and adds them back to the transfer queue
 * based on number of allowed attemps in administrative settings
 */
function internet_archive_harvest_failed() {
  dsm('internet_archive_harvest_failed');
  $attempts = variable_get('internet_archive_queue_attempts', 0) + 1;
  $result =
    db_query("SELECT in_path FROM {internet_archive} " .
	     "WHERE status = :status AND attempts < :attempts",
	     array(':status' => ARCHIVE_FAILED, ':attempts' => $attempts));

  $file_names = array();
  while ($file_name = $result->fetchField()) {
    $file_names[] = $file_name;
  }

  return $file_names;
}

/**
 * Optional administrative setting looks for items in the
 * internet_archive table that are set as queued, never started transferring
 * and no longer exist in the current drupal queue. For sites with very large
 * files this may be necessary in cases that the drupal queue expires before
 * the items are sent.
 *
 * @return $candidates
 *   An array of file_names to be queued
 */
function internet_archive_harvest_expired_queued() {
  dsm('internet_archive_harvest_expired_queued');
  //grab all the queued non-transferred items from internet_archive table
  $ia_result =
    db_query("SELECT * FROM {internet_archive} " .
	     "WHERE status = :status " .
	     "AND transfer_initiated = :transfer_initiated",
	     array(':status' => 'queued', ':transfer_initiated' => 0));
  while ($ia_data = $ia_result->fetchAssoc()) {
    $ia_queued[] = $ia_data['in_path'];
  }

  if (isset($ia_queued) && $ia_queued) {
    //grab all the currently queued transfer items from drupal queue
    $queue_result = db_query("SELECT * FROM {queue} WHERE name = :name",
			     array(':name' => 'internet_archive_send_file'));
    while ($queue_data = $queue_result->fetchAssoc()) {
      $queue_queued[] = unserialize($queue_data['data']);
    }
    if ($queue_queued) {
      $candidates = array_diff($ia_queued, $queue_queued);
    }
    else {
      $candidates = $ia_queued;
    }
  }

  //take candidates and re-add them to the queue if there is room
  if (isset($candidates) && $candidates) {
    $transfer_queue = DrupalQueue::get('internet_archive_send_file');

    $file_names = $candidates;
    foreach ($file_names as $file_name => $file_info) {
      $field_name = $file_info['field_name'];
      if (file_exists($file_name)) {
	$node = internet_archive_get_node_from_file_name($file_name,$field_name);
	$archive_data = internet_archive_load_data($file_name, $field_name);
	$message =t('Added transfer back to queue due to stale queue status.');
	
	$log_data = array(
			  'tid' => $archive_data['tid'],
			  'message' => $message,
			  'message_data' => $archive_data,
			  'type' => ARCHIVE_LOG_NOTICE,
			  );
	
	//add the file to queue
	$transfer_queue->createItem($file_name);
	internet_archive_log($log_data);
      }
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Validates transfers to archive.org by checking the contents of the item
 * via S3
 */
function internet_archive_validate_transfers($nid = null) {
  dsm('internet_archive_validate_transfers');
  //how many times should we attempt to transfer failed files
  $attempts = variable_get('internet_archive_queue_attempts', 0) + 1;
  dsm($attempts, 'attempts');

  if ($nid) {
    //only grab 10 at a time to avoid pounding archive.org
    $result = db_query("SELECT * FROM {internet_archive} ".  
		       "WHERE nid = :nid ".
		       "AND (status = :transferred OR ".
		       "(status = :failed AND attempts <= :attempts)) ".
		       "LIMIT 10",
		       array(':nid' => $nid,
			     ':transferred' => ARCHIVE_TRANSFERRED,
			     ':failed' => ARCHIVE_FAILED,
			     ':attempts' => $attempts));
  }
  else {
    //only grab 10 at a time to avoid pounding archive.org
    $result = db_query("SELECT * FROM {internet_archive} ".  
		       "WHERE (status = :transferred OR ".
		       "(status = :failed AND attempts <= :attempts)) ".
		       "LIMIT 10",
		       array(':transferred' => ARCHIVE_TRANSFERRED,
			     ':failed' => ARCHIVE_FAILED,
			     ':attempts' => $attempts));
  }
  while ($archive_data = $result->fetchAssoc()) {
    dsm($archive_data, 'ai');
    $valid = internet_archive_validate_transfer($archive_data['tid']);
    dsm($valid, 'valid');
    if (!$valid && (REQUEST_TIME - $archive_data['date']) > (8*60*60)) {
      db_update('internet_archive')
	->fields(array(
		       'status' => ARCHIVE_FAILED,
		       ))
	->condition('tid', $archive_data['tid'])
	->execute();
      $archive_data['status'] = ARCHIVE_FAILED;
      $archive_data['error'] = 
	t('Validation failed, source file does not exist at Archive.org ' .
	 'after 8 hours. Marked as failed.');

      internet_archive_invoke_internet_archive($archive_data, 'failed');
    }
    elseif ($valid) {
      db_update('internet_archive')
	->fields(array(
		       'status' => ARCHIVE_VALIDATED,
		       ))
	->condition('tid', $archive_data['tid'])
	->execute();
      $archive_data['status'] = ARCHIVE_VALIDATED;
      internet_archive_invoke_internet_archive($archive_data, 'validated');
    }
  }
}

/**
 * Validates a single transfer by checking if the item contents are empty
 * at archive.org via S3
 *
 * @param $tid
 * An internet_archive transfer ID
 *
 * @return
 * TRUE or FALSE
 */
function internet_archive_validate_transfer($tid) {
  dsm('internet_archive_validate_transfer');
  $archive_data = internet_archive_load_data_tid($tid);

  if (!$archive_data) {
    return FALSE;
  }

  $derivatives = internet_archive_get_derivatives($archive_data);
  dsm($derivatives, 'derivs');
  if (!$derivatives) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Creates a URL to a derivative file WITHOUT checking to
 * see if the file actually exists on archive.org
 *
 * Use internet_archive_derivative if you need a more accurate, but
 * much slower solution.
 *
 * @param $nid
 *   A node ID containing archive.org enabled field data
 * @param @ext
 *   The extension of the derivative you want ex. ogv
 *
 * @return full, assumed url to the derivative or FALSE if no transferred
 * files are found on the node
 */
function internet_archive_simple_derivative($nid, $ext) {
  $archive = db_query("SELECT * FROM {internet_archive} WHERE nid = :nid",
		      array(':nid' => $nid))->fetchAssoc();
  if ($archive['status'] == ARCHIVE_TRANSFERRED) {
    $pathinfo = pathinfo($archive['file_name']);
    return 'http://www.archive.org/download/' . $archive['item'] . '/' .
      $pathinfo['file_name'] . '.' . $ext;
  }
  else {
    return FALSE;
  }
}

/**
 * Attempts to check whether or not an item/bucket has been
 * created at archive.org. Basically calls up the page and does a
 * header check.
 *
 * @param $item_name
 *   A string identifier for the item at archive.org
 *
 * @return
 *   TRUE or FALSE
 */
function internet_archive_bucket_exists($item_name) {
  $bucket_url = 'https://www.archive.org/details/' . $item_name;
  dsm($bucket_url, 'looking for bucket with url');
  if (internet_archive_validate_url($bucket_url)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Gets a list of all items/buckets created via S3
 *
 * @return
 *   An object containing all the bucket/item information
 */
function internet_archive_buckets() {
  $s3 = internet_archive_new_s3();
  $s3->setTransferId(0);

  $buckets = $s3->listBuckets(TRUE);

  return $buckets;
}

/**
 * Gets derivatives for a specific item at archive.org
 *
 * @param $item_name
 *   A string containing the item identifier at archive.org
 * @param $extension
 *   Optional file extension like .mpeg to limit derivative results
 *
 * @return
 *   An object containing all of the derivatives for an item.
 */
function internet_archive_get_derivatives($archive_data, $extension = NULL) {
  dsm('internet_archive_get_derivatives');
  $s3 = internet_archive_new_s3();

  $s3->setTransferId($archive_data['tid']);

  //NEED TO ADD HERE..
  $bucket_info = $s3->getBucket($archive_data['item']);
  dsm($bucket_info, 'bucket info');
  if ($bucket_info) {
    if ($extension) {
      dsm($extension, 'extension');
      foreach ($bucket_info as $file_name => $fileinfo) {
        $pathinfo = pathinfo($file_name);
        if ($pathinfo['extension'] == $extension) {
          return $fileinfo;
        }
      }
      return FALSE;
    }
    else {
      return $bucket_info;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_is_archive_format($file_name) {
  //formats derived by archive.org
  //TODO: add more formats for audio, etc.
  $archive_formats = array('mpeg', 'ogv', 'mp4');
  $pathinfo = pathinfo($file_name);
  if (in_array($pathinfo['extension'], $archive_formats)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Checks for new derivative information from uploaded files and stores that 
 * information as serialized data in the internet_archive table. Stops 
 * checking for metadata when a file has completed deriving.
 *
 * @param $limit
 *   An integer which limits how many files to check in a single run at 
 *   archive.org
 */
function internet_archive_store_derivatives($nid, $limit = 25) {
  dsm('internet_archive_store_derivatives');

  if ($nid) {
    // only grab items that have already been successfully uploaded
    $sql =
      "SELECT * FROM {internet_archive} " .
      "WHERE status = :status " .
      "AND nid = :nid ".
      "AND (derivatives IS NULL OR derivatives <> :derivatives) " .
      "ORDER BY date ASC ";
      $args = array(
		    ':nid' => $nid,
		    ':status' => ARCHIVE_VALIDATED,
		    ':derivatives' => 'failed',
		    );
  }
  else {
    // only grab items that have already been successfully uploaded
    $sql =
      "SELECT * FROM {internet_archive} " .
      "WHERE status = :status " .
      "AND (derivatives IS NULL OR derivatives <> :derivatives) " .
      "ORDER BY date ASC ";
    $args = array(':status' => ARCHIVE_VALIDATED,
		  ':derivatives' => 'failed',
		  );
  }

  $results = db_query_range($sql, 0, $limit, $args);
  
  while ($archive_data = $results->fetchAssoc()) {
    //+1 to account for the original file
    $expected_derivatives =
      variable_get('internet_archive_derivatives', 3) + 1;

    //if we are uploading a file in a format archive.org derives it will not
    //re-derive it therefore we need to decrement the expected derivatives by 1
    if (internet_archive_is_archive_format($archive_data['file_name'])) {
      $expected_derivatives = $expected_derivatives - 1;
    }

    unset($derivatives);
    $derivatives = internet_archive_get_derivatives($archive_data);
    dsm($derivatives, 'found derivatives');
    if ($derivatives && (count($derivatives) >= $expected_derivatives)) {
      db_update('internet_archive')
	->fields(array(
		       'status' => ARCHIVE_DERIVED,
		       ))
	->condition('item', $archive_data['item'])
	->execute();
      
      $archive_data['derivatives'] = serialize($derivatives);
      internet_archive_invoke_internet_archive($archive_data, 'derived');
    }
    elseif ((REQUEST_TIME - $archive_data['date']) > 172800) {
      // if derivatives are not completed after 2 days, check to see if
      //transfer validates
      $valid = internet_archive_validate_transfer($archive_data['tid']);
      if (!$valid) {
        // if it doesn't validate, mark as failed for reprocessing
        db_update('internet_archive')
	  ->fields(array(
			 'status' => ARCHIVE_FAILED,
			 ))
	  ->condition('tid', $archive_data['tid'])
	  ->execute();
        internet_archive_invoke_internet_archive($archive_data, 'failed');
      }
      else {
        // if it does validate, mark derivatives as failed
        db_update('internet_archive')
	  ->fields(array(
			 'derivatives' => 'failed',
			 ))
	  ->condition('item', $archive_data['item'])
	  ->execute();
        internet_archive_invoke_internet_archive($archive_data, 'derivativefailed');
      }
    }

    if ($derivatives && (count($derivatives) > 0)) {
      db_update('internet_archive')
	->fields(array(
		       'derivatives' => serialize($derivatives),
		       ))
	->condition('item', $archive_data['item'])
	->execute();
    }
  }
  return;
}


/**
 * Arthur Foelsche, from the module: http://www.drupal.org/project/media_mover
 *
 * This function takes apart the form keys that are used to
 * keep module data seperate and hand back an array of parsed
 * values back to a requestor
 *
 * @param $element
 * @return array
 */
function internet_archive_validate_form_data_extract($element) {
  // extract each value from the form element to
  // be passed back in an array
  foreach (element_children($element) as $key) {
    // Build the pattern to replace with
    $pattern = "/^step(.*)--/";
    $value_name = preg_replace($pattern, '', $key);
    $values[$value_name] = $element[$key]['#post'][$key];
  }
  return $values;
}

/**
 * Confirmation for manual internet archive transfer
 *
 * @see internet_archive_transfer_confirm_submit()
 *
 * @ingroup forms
 */
function internet_archive_transfer_confirm($form, $drupal_form, $file_name) {
  $file_name = str_replace('!-!', '/', urldecode($file_name));
  watchdog('internet_archive',
	   'Executing internet_archive_transfer_confirm() with file_name: ' .
	   $file_name);

  $output .= '<br />' .
    t('You are about to transfer: %file_name to Archive.org',
      array('%file_name' => $file_name));
  
  $output .= '<br /><strong>' .
    t('Depending on the size of the file, this could take awhile.') .
    '</strong><br /><br />';

  $form['markup'] = array(
    '#type' => 'markup',
    '#value' => $output,
  );
  $form['file_name'] = array(
    '#type' => 'value',
    '#value' => $file_name,
  );
  
  $form['field_name'] = array(
    '#type' => 'value',
    '#value' => filter_input(INPUT_GET, 'field_name'),
  );
  $form['file_location'] = array(
    '#type' => 'value',
    '#value' => filter_input(INPUT_GET, 'file_location'),
  );
  $form['original_referrer'] = array(
    '#type' => 'value',
    '#value' => $_SERVER['HTTP_REFERER'],
  );

  return confirm_form($form, t('Are you sure you want to transfer this file?'),
		      NULL, $description = '', t('Transfer'), t('Cancel'));
}

/**
 * Takes file data from internet archive utility link and starts
 * a manual file transfer to archive.org
 * TODO: find a better solution for clearing the file cache.
 *
 * @ingroup forms
 */
function internet_archive_transfer_confirm_submit($form_id, &$form_state) {
  dsm('internet_archive_transfer_confirm_submit');

  $data = array(
		'file_name' => $form_state['values']['file_name'],
		'field_name' => $form_state['values']['field_name'],
		'file_location' => $form_state['values']['file_location'],
		);
  $status = internet_archive_default_send($data);

  
  if ($status) {
    drupal_set_message('File transferred successfully, please note there ' .
		       'may be a short delay before the file is available ' .
		       'on Archive.org');
  }
  else {
    drupal_set_message('Error Code #5857 The file: ' .
		       $form_state['values']['file_name'] . ' was not sent.',
		       'error');
  }

  //clear the page cache so updated file information appears on node
  //TODO: there has to be a less drastic way to accomplish the goal
  dsm('did not flush cache');
  //drupal_flush_all_caches();
}

/**
 * Sends a file to archive.org using mostly default settings
 * TODO: remove extra watchdog debug
 *
 * @see internet_archive_default_config()
 *
 * @param $file_name
 *   A string containing a file path.
 *
 * @return
 */
function internet_archive_default_send($file_info) {
  //grab all the necessary information
  $config = internet_archive_default_config();
  //send the file
  $status = internet_archive_send($config, $file_info);

  return $status;
}

/**
 * Builds a default archive.org transfer configuration using information
 * provided on the general settings page.
 *
 * @return $config
 *   An array containing basic s3 configuration info.
 */
function internet_archive_default_config() {
  $config = array();
  $config['internet_archive_bucket'] =
    variable_get('internet_archive_bucket',
		 str_replace(' ', '_', variable_get('site_name',
						    t('My Site'))));
  $config['internet_archive_drupal_file_path'] = 0;
  $config['advanced'] = array(
    'internet_archive_server_url' =>
    variable_get('internet_archive_default_server_url',
		 "https://s3.us.archive.org/"),
  );

  return $config;
}

/**
 * Invoke a hook_internet_archive() operation in all modules.
 *
 * @param &$node
 *   An internet_archive data object.
 * @param $op
 *   A string containing the name of the internet_archive operation.
 * @return
 *   The returned value of the invoked hooks.
 */
function internet_archive_invoke_internet_archive(&$archive_data, $op) {
  dsm('internet_archive_invoke_internet_archive');
  $return = array();
  foreach (module_implements('internet_archive') as $name) {
    $function = $name . '_internet_archive';
    $result = $function($archive_data, $op);
    if (isset($result) && is_array($result)) {
      $return = array_merge($return, $result);
    }
    elseif (isset($result)) {
      $return[] = $result;
    }
  }
  return $return;
}

/**
 * Implements hook_internet_archive().
 */
function internet_archive_internet_archive(&$archive_data, $op) {
  dsm('internet_archive_internet_archive');
  switch ($op) {
    case 'harvested':
      break;

    case 'queued':
      if ($archive_data['status'] != ARCHIVE_FAILED) {
        $message = t('Queued for transfer');
      }
      else {
        $message = t('Requeued for transfer due to previous failure, attempt '.
		     '%attempt of %retries',
		     array('%attempt' => $archive_data['attempts'] + 1,
			   '%retries' =>
			   variable_get('internet_archive_queue_attempts', 0)
			   + 1));
      }
      $log_data = array(
        'tid' => $archive_data['tid'],
        'message' => $message,
        'message_data' => $archive_data,
        'type' => ARCHIVE_LOG_NOTICE,
      );
      internet_archive_log($log_data);
      break;

    case 'transferring':
      $log_data = array(
        'tid' => $archive_data['tid'],
        'message' => t('Transfer started to Archive.org'),
        'message_data' => $archive_data,
        'type' => ARCHIVE_LOG_NOTICE,
      );
      internet_archive_log($log_data);
      break;

    case 'transferred':
      $log_data = array(
        'tid' => $archive_data['tid'],
        'message' => t('Transfer completed to Archive.org'),
        'message_data' => $archive_data,
        'type' => ARCHIVE_LOG_NOTICE,
      );
      internet_archive_log($log_data);
      break;

    case 'validated':
      $log_data = array(
        'tid' => $archive_data['tid'],
        'message' => t('Validated, source file exists at Archive.org'),
        'message_data' => $archive_data,
        'type' => ARCHIVE_LOG_NOTICE,
      );
      internet_archive_log($log_data);
      break;

    case 'derived':
      $log_data = array(
        'tid' => $archive_data['tid'],
        'message' => t('Derivative processing at Archive.org completed'),
        'message_data' => $archive_data,
        'type' => ARCHIVE_LOG_NOTICE,
      );
      internet_archive_log($log_data);
      break;

    case 'failed':
      $log_data = array(
        'tid' => $archive_data['tid'],
        'message' => $archive_data['error'],
        'message_data' => $archive_data,
        'type' => ARCHIVE_LOG_ERROR,
      );
      internet_archive_log($log_data);
      break;
  }
}

/**
 * Produces the statistical report at admin/reports/internet_archive/stats with
 * some aggregate upload and download information
 */
function internet_archive_reports_statistics() {
  $header = array('Stat', 'Value');
  $count = db_query("SELECT COUNT(*) FROM {internet_archive}")->fetchField();

  if (module_exists('internet_archive_download')) {
    $file_rows[] =
      array('Downloaded',
	    db_query("SELECT COUNT(*) FROM {internet_archive_download} " .
		     "WHERE status = :status",
		     array(':status' => 'downloaded'))->fetchField());
  }
  $file_rows[] =
    array('Derived',
	  db_query("SELECT COUNT(*) FROM {internet_archive} " .
		   "WHERE status = :status",
		   array(':status' => 'derived'))->fetchField());

  $file_rows[] =
    array('Validated',
	  db_query("SELECT COUNT(*) FROM {internet_archive} " .
		   "WHERE status = :status",
		   array(':status' => 'validated'))->fetchField());
  
  $file_rows[] =
    array('Transferred',
	  db_query("SELECT COUNT(*) FROM {internet_archive} " .
		   "WHERE status = :status",
		   array(':status' => 'transferred'))->fetchField());
  
  $file_rows[] =
    array('Transferring',
	  db_query("SELECT COUNT(*) FROM {internet_archive} ".
		   "WHERE status = :status",
		   array(':status' => 'transferring'))->fetchField());

  $file_rows[] =
    array('Queued',
	  db_query("SELECT COUNT(*) FROM {internet_archive} ".
		   "WHERE status = :status",
		   array(':status' => 'queued'))->fetchField());
  
  $file_rows[] =
    array('Failed',
	  db_query("SELECT COUNT(*) FROM {internet_archive} " .
		   "WHERE status = :status",
		   array(':status' => 'failed'))->fetchField());
  
  $file_table = theme('table',array('header'=> $header, 'rows' => $file_rows));

  $total = db_query("SELECT sum(file_size) FROM {internet_archive} ".
		    "WHERE status = :status OR status = :status",
		    array(':status' => 'validated',
			  ':status' => 'derived'))->fetchField();
  $transfer_rows[] = array('Total Data Uploaded',
			   round($total / 1024 / 1024) . ' MB');
  
  $transfer_rows[] = array('Upload Rate Average (overall)',
			   internet_archive_transfer_rate($limit = 0) .
			   ' Mb/sec | ' .
			   internet_archive_transfer_rate($limit = 0, 'time').
			   ' min/file');
  if ($count > 20) {
    $transfer_rows[] = array('Upload Rate Average (last 15 transfers)',
			     internet_archive_transfer_rate(15) .
			     ' Mb/sec | ' .
			     internet_archive_transfer_rate($limit = 15,
							    'time') .
			     ' min/file');
  }
  if ($count > 55) {
    $transfer_rows[] = array('Upload Rate Average (last 50 transfers)',
			     internet_archive_transfer_rate(50) . ' Mb/sec | '.
			     internet_archive_transfer_rate($limit = 50,
							    'time') .
			     ' min/file');
  }

  $val_plus_derived = db_query("SELECT avg(file_size) " .
			       "FROM {internet_archive} " .
			       "WHERE status = :status OR status = :status",
			       array(':status' => 'validated',
				     ':status' => 'derived'))->fetchField();
  
  $transfer_rows[] = array('Average File Size',
			   round($val_plus_derived / 1024 / 1024, 4) . ' MB');

  $transfer_table = theme('table', array('header' => $header,
					 'rows' => $transfer_rows));

  if (module_exists('internet_archive_download')) {
    $download_stats = internet_archive_download_statistics();
    $download_table = internet_archive_download_table($download_stats);
  }

  $output = '<h3>Internet Archive Statistics</h3><br />';
  $output .= '<div class="admin-panel">';
  $output .= '<h4 style="border-bottom:1px solid black">File Status</h4>';
  $output .= $file_table;
  $output .= '</div>';
  $output .= '<div class="admin-panel">';
  $output .= '<h4 style="border-bottom:1px solid black">Upload Stats</h4>';
  $output .= $transfer_table;
  $output .= '</div>';
  if ($download_table) {
    $output .= '<div class="admin-panel">';
    $output .= '<h4 style="border-bottom:1px solid black">Download Stats</h4>';
    $output .= $download_table;
    $output .= '</div>';
  }

  return $output;
}

/**
 * Produces the upload report at admin/reports/internet_archive showing a 
 * summary of recent file uploads
 */
function internet_archive_reports_log() {
  $output .= 'Typical file status process is: Queued -> Transferring -> '.
    'Transferred -> Validated- > Derived';
  
  $output .= '<br />For information on Archive.org status, please ' .
    '<a href="http://blog.archive.org/">checkout their blog</a> and/or ' .
    'subscribe to <a href="http://twitter.com/internetarchive">their '.
    'twitter feed</a>.<br /><br />';
  $output .= internet_archive_uploads();
  return $output;
}

/**
 * Produces the system messages report at admin/reports/internet_archive/log 
 * showing a listing of all system log messages sorted by date.
 */
function internet_archive_reports_system_messages() {
  if (arg(4) == 'all') {
    $output .=
      t('All status messages recorded by the system are shown below.') .
      l(' Click here to view only warnings and errors.',
	'admin/reports/internet_archive/log');
  }
  else {
    $output .=
      t('All warning and error level status messages recorded by the system '.
	'are shown below.') .
      l(' Click here to view all messages, including notices.',
	'admin/reports/internet_archive/log/all');
  }
  $output .= internet_archive_log_view('global');
  return $output;
}

/**
 * Builds the table view of recent uploads for the upload report.
 *
 * @param $limit
 *   Number of upload entries to show on a single page.
 */
function internet_archive_uploads() {
  $page_number = arg(3);
  $results_per_page = variable_get('internet_archive_results_per_page', 100);

  if ($page_number && $page_number > 1) {
    $min = (($results_per_page) * $page_number) - $results_per_page;
  }
  else {
    $page_number = 1;
    $min = 0;
  }
  
  $result =db_query_range("SELECT * FROM {internet_archive} ".
			  "ORDER BY transfer_initiated DESC",
			  $min, $results_per_page);
  
  $header = array('ID', 'Node', 'File Name', 'File Size (MB)', 'Start',
		  'Finish', 'Time(min)<br />Rate(Mb/sec)', 'Status', 'Log');
  
  $rows = array();

  $has_results = FALSE;
  $count = 0;
  while ($archive_data = $result->fetchAssoc()) {
    $count ++;
    $has_results = TRUE;
    unset($transfer_time);
    unset($file_size);
    unset($transfer_rate);
    unset($file_name);

    if ($archive_data['date'] > 0 && $archive_data['transfer_initiated'] > 0) {
      $transfer_time =
	($archive_data['date'] - $archive_data['transfer_initiated']) / 60;
      $transfer_time =round($transfer_time, 2);
    }
    else {
      $transfer_time = 'N/A';
    }

    if ($archive_data['file_size'] > 0) {
      $file_size = round(($archive_data['file_size'] / 1024 / 1024), 2);
    }
    else {
      $file_size = 'N/A';
    }

    if ($archive_data['file_size'] > 0 && $archive_data['date'] > 0 &&
	$archive_data['transfer_initiated'] > 0) {

      $transfer_rate = $archive_data['file_size'] * 8 / 1000 / 1000;

      $transfer_rate = $transfer_rate /
	($archive_data['date'] - $archive_data['transfer_initiated']);
      
      $transfer_rate = round($transfer_rate, 4);
    }
    else {
      $transfer_rate = 'N/A';
    }

    if (strlen($archive_data['file_name']) > 40) {
      $file_name = substr($archive_data['file_name'], 0, 40) . '...';
    }
    else {
      $file_name = $archive_data['file_name'];
    }

    $rows[] =
      array(l($archive_data['tid'], 'http://www.archive.org/details/' .
	      $archive_data['item']),
	    l($archive_data['nid'], 'node/' . $archive_data['nid']),
	    $file_name, $file_size, $archive_data['transfer_initiated'],
	    $archive_data['date'],
	    $transfer_time . '<br />' . $transfer_rate,
	    $archive_data['status'],
	    l('View', 'ia/log/' . $archive_data['tid']));
  }

  if ($has_results) {
    $rows = internet_archive_format_dates($rows, $limit);
    $table = theme('table', array('header' => $header, 'rows' => $rows));
  }
  else {
    $table = "<h3>" . t("There are no more results to show.") . "</h3>";
  }

  if ($page_number > 1) {
    $prev_page = $page_number - 1;
    $table .= "<br/>" .
      l("<<<<< Previous ", "admin/reports/internet_archive/" . $prev_page);
    $table .= "&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp";
  }

  if ($has_results && $count == $results_per_page) {
    $next_page = $page_number + 1;
    $table .= l(" Next >>>>>>", "admin/reports/internet_archive/".$next_page);
  }
  return $table;
}

/**
 * Formats dates for display on the report pages.
 *
 * @param $rows
 *   An array of report rows with data data
 * @param $limit
 *   The number of rows that will be displayed on a single page
 *
 * @return
 *   An array of report rows with adjusted friendly date data
 */
function internet_archive_format_dates($rows) {
  $counter = 0;
  $formatted_rows = array();

  foreach ($rows as $key => $row) {
    $formatted_rows[$key] = $row;
    if (!$formatted_rows[$key][4]) {
      $formatted_rows[$key][4] = 'N/A';
    }
    else {
      $formatted_rows[$key][4] = date("m/d/y g:ia", $row[4]);
    }
    if (!$formatted_rows[$key][5]) {
      $formatted_rows[$key][5] = 'N/A';
    }
    else {
      $formatted_rows[$key][5] = date("m/d/y g:ia", $row[5]);
    }
    $counter++;
  }

  return $formatted_rows;
}

/**
 * Calculates the overall transfer rate for recent transfers
 *
 * @param $limit
 *   The number of transfers to use in the calculation, starts at most recent
 *   and goes backwards
 * @param $format
 *   The method of calculation, either rate or time.
 *
 * @return
 *   A rounded decimal containing either the rate in mbits/sec or total time 
 *   in minutes.
 */
function internet_archive_transfer_rate($limit = 0, $format = 'rate') {
  $total_seconds = 0;
  $total_bytes = 0;
  $counter = 0;

  $result =
    db_query("SELECT * FROM {internet_archive} ".
	     "WHERE status = :status OR status = :status ".
	     "ORDER BY tid DESC",
	     array(':status' => 'validated', ':status' => 'derived'));
  
  while ($archive_data = $result->fetchAssoc() ) {
    if ($archive_data['transfer_initiated'] != 0 &&
	$archive_data['date'] != 0 && $archive_data['file_size'] != 0) {

      $total_bytes = $total_bytes + $archive_data['file_size'];
      $total_seconds = $total_seconds + ($archive_data['date'] -
					 $archive_data['transfer_initiated']);
      $counter++;
    }

    if ($limit != 0 && $counter >= $limit) {
      break;
    }
  }

  switch ($format) {
    case 'rate':
      if ($total_bytes && $total_seconds > 0) {
        $bits = $total_bytes * 8;
        $mbits = $bits / 1000 / 1000;
        $mbits_sec = $mbits / $total_seconds;
        return round($mbits_sec, 4);
      }
      else {
        return 'N/A';
      }
      break;

    case 'time':
      if ($total_seconds > 0) {
        $minutes = $total_seconds / $counter / 60;
        return round($minutes, 2);
      }
      else {
        return 'N/A';
      }
      break;
  }
}

/**
 * This is a drush function
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_transfer_queue() {
  require_once DRUPAL_ROOT . '/' .
    drupal_get_path('module', 'internet_archive') .
    '/includes/internet_archive_queue.inc';

  //validate previous transfers
  internet_archive_validate_transfers();

  //Add new files to queue if available
  internet_archive_harvest_files();

  //transfer files available in the queue
  internet_archive_queue_drupal_queue_cron_run();

  //Check for new derivations to update.
  internet_archive_store_derivatives();
}

/**
 * Implements hook_theme().
 */
function internet_archive_theme() {
  return array(
    'queue_items' => array(
      'variables' => array('items' => NULL),
    ),
    'internet_archive_formatter_video_embed' => array(
      'variables' => array('file' => NULL),
    ),
    'internet_archive_formatter_thumbnail' => array(
      'variables' => array('file' => NULL),
    ),
    'internet_archive_formatter_animated_thumbnail' => array(
      'variables' => array('file' => NULL),
    ),
  );
}

/**
 * Theme function for the 'internet_archive_video_embed' formatter.
 */
function theme_internet_archive_formatter_video_embed($variables) {
  $element = $variables['file'];
  // Inside a View this function may be called with null data. In that case,
  // just return.
  if (empty($element['#item'])) {
    return '';
  }

  $field = content_fields($element['#field_name']);
  $item = $element['#item'];

  //TODO: may need to do some sanitization here..
  if ($item['value']) {
    $file_name = $item['value'];
  }
  else {
    // If there is no image on the database, use default.
    if (empty($item['fid']) && $field['use_default_file']) {
      $item = $field['default_file'];
    }
    if (empty($item['file_name']) && !empty($item['fid'])) {
      $item = array_merge($item, field_file_load($item['fid']));
    }

    $file_name = $item['file_name'];
  }

  return empty($file_name) ? '' :
    internet_archive_embed(file_create_path($file_name));
}

/**
 * Theme function for the 'internet_archive_video_thumbnail' formatter.
 */
function theme_internet_archive_formatter_thumbnail($variables) {
  $element = $variables['file'];
  // Inside a View this function may be called with null data. In that case,
  // just return.
  if (empty($element['#item'])) {
    return '';
  }

  $field = content_fields($element['#field_name']);
  $item = $element['#item'];

  //TODO: may need to do some sanitization here..
  if ($item['value']) {
    $file_name = $item['value'];
  }
  else {
    // If there is no image on the database, use default.
    if (empty($item['fid']) && $field['use_default_file']) {
      $item = $field['default_file'];
    }
    if (empty($item['file_name']) && !empty($item['fid'])) {
      $item = array_merge($item, field_file_load($item['fid']));
    }

    $file_name = $item['file_name'];
  }

  return empty($file_name) ? '' : '<img src="' .
    internet_archive_thumb_from_file_name(file_create_path($file_name)) . '" />';
}

/**
 * Theme function for the 'internet_archive_video_thumbnail' formatter.
 */
function theme_internet_archive_formatter_animated_thumbnail($variables) {
  $element = $variables['file'];
  // Inside a View this function may be called with null data. In that case,
  // just return.
  if (empty($element['#item'])) {
    return '';
  }

  $field = content_fields($element['#field_name']);
  $item = $element['#item'];

  //TODO: may need to do some sanitization here..
  if ($item['value']) {
    $file_name = $item['value'];
  }
  else {
    // If there is no image on the database, use default.
    if (empty($item['fid']) && $field['use_default_file']) {
      $item = $field['default_file'];
    }
    if (empty($item['file_name']) && !empty($item['fid'])) {
      $item = array_merge($item, field_file_load($item['fid']));
    }

    $file_name = $item['file_name'];
  }

  return empty($file_name) ? '' : '<img src="' .
    internet_archive_animated_thumb_from_file_name(file_create_path($file_name))
    . '" />';
}

/********************************************************
 * Metadata Integration
 ********************************************************
 */

/**
 * Builds an array of metadata by calling hook_internet_archive_metadata
 * TODO: Convert this to hook_internet_archive
 * @param $file_name
 *   A string containing a file path.
 *
 * @return $metadata
 *   An array of metadata keyed by header name
 */
function internet_archive_get_metadata(&$node, $file_name) {
  dsm('internet_archive_get_metadata');
  $metadata = array();

  $results = module_invoke_all('internet_archive_metadata', $node, $file_name);
  foreach ($results as $result) {
    $metadata = array_merge($result, $metadata);
  }

  //if mediatype is not set, try to figure it out manually
  //TODO: add a whole bunch more mimetype mappings to this list.
  if (!$metadata['mediatype']) {
    $pathinfo = pathinfo($file_name);
    $filemime = file_get_mimetype($file_name);
    dsm($filemime, 'filemime');
    switch ($filemime) {
      case 'image/jpeg':
        $metadata['mediatype'] = 'Image';
        break;
      case 'audio/mpeg':
        $metadata['mediatype'] = 'audio';
        break;
      case 'video/mp2p':
    case 'video/mp4':
      case 'video/quicktime':
      case 'video/x-flv':
        $metadata['mediatype'] = 'movies';
        break;
      default:
        if (variable_get('internet_archive_debug', FALSE)) {
          watchdog('internet_archive',
		   'Warning, no media type found. Defaulting to: ' .
		   variable_get('internet_archive_mediatype', 'movies'),
		   NULL, WATCHDOG_WARNING);
        }

        $metadata['mediatype'] = variable_get('internet_archive_mediatype',
					      'movies');
        break;
    }
  }

  //if no collection was specified in hook_internet_archive_metadata, check
  //for default in settings
  if (!$metadata['collection'] &&
      ($default_collection =
       variable_get('internet_archive_collection', "test_collection"))) {
    $metadata['collection'] = explode(',', $default_collection);
  }

  //if no title has been provided, and administrative setting is set item to
  //node title, set it now
  if (variable_get('internet_archive_bucket_title', FALSE) &&
      !$metadata['title'] && $node->title) {
    $metadata['title'] = $node->title;
  }
  elseif (!$metadata['title']) {
    //finally if no title has been provided, use the file_name.
    $metadata['title'] = basename($file_name);
  }

  //if no description has been provided, and administrative setting is set
  ///description to body, set it now
  if (variable_get('internet_archive_bucket_body', FALSE) &&
      !$metadata['description'] && $node->body) {
    $metadata['description'] = $node->body;
  }

  //if no creative commons license has been provided, but it is available
  //in node, set it now
  if (!$metadata['licenseurl'] && $node->cc->uri) {
    $metadata['licenseurl'] = $node->cc->uri;
  }

  return $metadata;
}

/**
 * Builds archive.org compatible S3 header data.
 *
 * @param $metadata
 *   An array of metadata entries.
 *
 * @return $headers
 *   An array of headers.
 */
function internet_archive_process_metadata($metadata) {

  $headers = array();
  foreach ($metadata as $m_key => $info) {
    if (is_array($info)) {
      $counter = 1;
      foreach ($info as $i_key => $value) {
        $headers['x-amz-meta0' . $counter . '-' . $m_key] =
	  internet_archive_clean_text($value);
        $counter++;
      }
    }
    else {
      $headers['x-amz-meta-' . $m_key] = internet_archive_clean_text($info);
    }
  }

  return $headers;
}

/**
 * Cleans characters that break S3 from the header values.
 *
 * @param $string
 *   A string.
 *
 * @return $string
 *   A string without most html tags, whitespace, line breaks, tabs.
 */
function internet_archive_clean_text($string) {
  $string = strip_tags($string, '<a><br>');
  $string = trim($string);
  $string = str_replace(array("\r\n", "\r", "\n", "\t"), ' ', $string);

  return $string;
}

/**
 * Finds a node connected to a file_name based on the fields chosen
 * in the general settings.
 *
 * @param $file_name
 *   A string containing a file path.
 *
 * @return $node
 *   Drupal node object, or FALSE if nothing is found.
 */
function internet_archive_get_node_from_file_name($file_name,
						 $field_name) {
  //dsm('internet_archive_get_node_from_file_name');

  //FETCH AN ASSOCIATIVE ARRAY OF Archive.org FIELD DB TABLE INFO
  $tables = internet_archive_get_field_tables($field_name);

  //BUILD AN INDEX TO LOOK FOR OUR FIELD IN $table_info
  $index = 'field_data_' . $field_name;
  $table_info = isset($tables[$index]) ? $tables[$index] : NULL;

  if ($table_info) {
    switch ($table_info['type']) {
    case 'file':
      $query =
	"SELECT entity_id FROM {" . $table_info['name'] . "} ft ".
	"INNER JOIN {file_managed} fm " .
	"ON ft." .$table_info['value_column'] .	" = fm.fid ".
	"WHERE fm.uri=:uri";
      
      $nid = db_query($query, array(':uri' => $file_name))->fetchField();
      
      if ($nid) {
	$node = node_load($nid);
	//dsm("found node from file_name: $file_name");
	return $node;
      }
      break;
    case 'text':
      $query =
	"SELECT entity_id FROM {" . $table_info['name'] . "} ".
	"WHERE " . $table_info['value_column'] . "=:file_name";
      
      $nid = db_query($query, array(':file_name' => $file_name))->fetchField();
      
      if ($nid) {
	$node = node_load($nid);
	//dsm("found node from text field file_name: $file_name");
	return $node;
      }
      break;
    default:
      drupal_set_message('Only the file field type is defined at this time.',
			 'warning');
      return NULL;
      break;
    }
  }

  return FALSE;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_thumb_from_file_name($field_name, $field_name) {
  $data = internet_archive_load_data($field_name,
				     $field_name);

  if ((!$item = $data['item']) || $data['status'] != 'derived') {
    return FALSE;
  }

  $pathinfo = pathinfo($data['archive_url']);
  $file_name = $pathinfo['file_name'] . '_000001.jpg';

  $link = 'http://www.archive.org/download/';
  $link .= $item . '/' . $item . '.thumbs/';
  $link .= $file_name;
  return $link;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_animated_thumb_from_file_name($field_name,
						       $field_name) {

  $data = internet_archive_load_data($field_name, $field_name);

  if ((!$item = $data['item']) || $data['status'] != 'derived') {
    return FALSE;
  }

  $pathinfo = pathinfo($data['archive_url']);
  $file_name = $pathinfo['file_name'] . '.gif';

  $link = 'http://www.archive.org/download/';
  $link .= $item . '/';
  $link .= $file_name;
  return $link;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_embed($tid ,$field_name,
				$width = 470, $height = 371) {
  
  $archive_data = internet_archive_load_data_tid($tid);
  $url = internet_archive_derivative_url($archive_data, 'mp4');

  if ($url) {
    $embed = internet_archive_create_embed($url, $width, $height);
  }
  else {
    return FALSE;
  }

  return $embed;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_derivative_url($item, $extension) {
  $derivatives = unserialize($item['derivatives']);
  if ($derivatives) {
    foreach ($derivatives as $key => $info) {
      $pathinfo = pathinfo($key);
      if ($pathinfo['extension'] == $extension) {
        $file_name = $key;
      }
    }
  }

  if ($file_name) {
    $url = 'http://www.archive.org/download/' . $item['item'] . '/' .
      $file_name;
    return $url;
  }
  else {
    return FALSE;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_create_embed($url, $width = 470, $height = 371) {
  $embed = '';
  $pathinfo = pathinfo($url);
  $base_url = $pathinfo['dirname'] . '/';
  $file_name = $pathinfo['basename'];

  //$embed = '<object width="'.$width.'" height="'.$height.'"
  //classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000">';
  $embed .= '<param value="true" name="allowfullscreen"/>';
  $embed .= '<param value="always" name="allowscriptaccess"/>';
  $embed .= '<param value="high" name="quality"/>';
  $embed .= '<param value="true" name="cachebusting"/>';
  $embed .= '<param value="#000000" name="bgcolor"/>';
  $embed .= '<param name="movie" ' .
    'value="http://www.archive.org/flow/flowplayer.commercial-3.2.1.swf" />';

  $embed .= "<param value=\"config={'key':'#\$aa4baff94a9bdcafce8','playlist':['format=Thumbnail?.jpg',{'autoPlay':false,'url':'" . $file_name . "'}],'clip':{'autoPlay':true,'baseUrl':'" . $base_url . "','scaling':'fit','provider':'h264streaming'},'canvas':{'backgroundColor':'#000000','backgroundGradient':'none'},'plugins':{'controls':{'playlist':false,'fullscreen':true,'height':26,'backgroundColor':'#000000','autoHide':{'fullscreenOnly':true}},'h264streaming':{'url':'http://www.archive.org/flow/flowplayer.pseudostreaming-3.2.1.swf'}, 'sharing':{'url':'http://www.denveropenmedia.org/sites/all/plugins/flowplayer/flowplayer.sharing-3.2.1.swf'}},'contextMenu':[{},'-','Flowplayer v3.2.1']}\" name=\"flashvars\"/>";

  $embed .= '<embed src="http://www.archive.org/flow/flowplayer.commercial-3.2.1.swf" type="application/x-shockwave-flash" width="' . $width . '" height="' . $height . '" allowfullscreen="true" allowscriptaccess="always" cachebusting="true" bgcolor="#000000" quality="high" flashvars="config={\'key\':\'#$aa4baff94a9bdcafce8\',\'playlist\':[\'format=Thumbnail?.jpg\',{\'autoPlay\':false,\'url\':\'' . $file_name . '\'}],\'clip\':{\'autoPlay\':true,\'baseUrl\':\'' . $base_url . '\',\'scaling\':\'fit\',\'provider\':\'h264streaming\'},\'canvas\':{\'backgroundColor\':\'#000000\',\'backgroundGradient\':\'none\'},\'plugins\':{\'controls\':{\'playlist\':false,\'fullscreen\':true,\'height\':26,\'backgroundColor\':\'#000000\',\'autoHide\':{\'fullscreenOnly\':true}},\'h264streaming\':{\'url\':\'http://www.archive.org/flow/flowplayer.pseudostreaming-3.2.1.swf\'}},\'contextMenu\':[{},\'-\',\'Flowplayer v3.2.1\']}"></embed>';
  //$embed .= '</object>';

  return $embed;
}

/**
 * Fetches all the cck tables associated with the fields defined in the
 * general settings area.
 *
 * @return $tables
 *   An array of table names
 */
function internet_archive_get_field_tables() {
  $fields = internet_archive_fields();

  foreach ($fields as $field_name => $field_info) {
    $extra = field_info_field($field_name);
    list($table, $table_info) =
      each($extra['storage']['details']['sql'][FIELD_LOAD_CURRENT]);

    switch ($field_info['type']) {
    case 'text':
      $value_key = $table_info['value'];
      break;

    case 'file':
      $value_key = $table_info['fid'];
      
      break;
    case 'filefield':
    case 'emvideo':
      $value_key = NULL;
      drupal_set_message('Only the file and text field types are defined ' .
			 'at this time2', 'warning');
      break;
    
    }
    
    $tables[$table] = array(
			    'name' => $table,
			    'value_column' => $value_key,
			    'type' => $field_info['type'],
			    );
  }
  return $tables;
}

/**
 * Creates a safe bucket/item name from plain text.
 * @param $text
 *   A string containing text to make into an item name.
 *
 * @return
 *   Same text stripped of all non-alphanumeric characters
 */
function internet_archive_create_item_name($text) {
  $clean = preg_replace("/[^a-z0-9_-]+/i", "_", $text);
  $clean = substr($clean, 0, 60);
  return strtolower($clean);
}

/**
 * Function takes in a file name and field name and then queries for a row
 * in the internet_archive table
 *
 * @param $file_name - the file name
 * @param $field_name - the field name the file is stored in 
 */
function internet_archive_load_data($file_name,
				    $field_name = '') {
  
  $sql =
    "SELECT * FROM {internet_archive} ".
    "WHERE (item = :file_name  OR in_path = :file_name)";
  $args = array(':file_name' => $file_name);

  if ($field_name) {
    $sql .= "AND field_name = :field_name ";
    $args[':field_name'] = $field_name;
  }

  dsm("Archive Data File Name: $file_name");
  dsm("Archive Data Field Name: $field_name");

  $archive_data = db_query($sql, $args)->fetchAssoc();

  if ($archive_data) {
    dsm('found archive data');
    //dsm($archive_data, 'Archive Data from DB');
  }
  else {
    dsm('didnt find archive data');
  }

  //dsm(debug_backtrace(), 'Load Archive Data Backtrace');
  
  return $archive_data;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_load_data_tid($tid) {
  if (is_numeric($tid)) {
    $archive_data = db_query("SELECT * from {internet_archive} ".
		     "WHERE tid = :tid", array(':tid' => $tid))->fetchAssoc();
    return $archive_data;
  }

  return FALSE;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_validate_url($url) {
  $headers = get_headers($url, 1);
  if ($headers[0] != 'HTTP/1.1 200 OK' && $headers[1] != 'HTTP/1.1 200 OK') {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/********************************************************
 * Textfield / Emfield Integration
 ********************************************************
 */

/**
 * Grabs a list of fields for use in a select list.
 *
 * @param $field_types
 *   An array of field types to select from.
 *
 * @return $possible_fields
 *   All fields that fit the specified field types.
 */
function internet_archive_field_select_options($field_types =
					       array('filefield',
						     'text',
						     'emvideo',
						     'file',
						     'media')) {
  $fields = field_info_fields();
 
  $possible_fields = array();
  foreach ($fields as $field_name => $field) {
    if (in_array($field['type'], $field_types)) {
      $possible_fields[$field_name] = $field_name;
    }
  }
  asort($possible_fields);
  return $possible_fields;
}



/********************************************************
 * General Field Integration
 ********************************************************
 */
/**
 * Implements hook_field_formatter_info().
 */
function internet_archive_field_formatter_info() {
  return array(
    'video_embed' => array(
      'label' => t('Internet Archive Video Embed'),
      'field types' => array('file', 'filefield', 'text', 'emvideo'),
      'description' => t('Displays video embed code from archive.org.'),
    ),
    'thumbnail' => array(
      'label' => t('Internet Archive Thumbnail'),
      'field types' => array('file', 'filefield', 'text', 'emvideo'),
      'description' => t('Displays thumbnail from archive.org.'),
    ),
    'animated_thumbnail' => array(
      'label' => t('Internet Archive Animated Thumbnail'),
      'field types' => array('file', 'filefield', 'text', 'emvideo'),
      'description' => t('Displays animated thumbnail from archive.org.'),
    ),
  );
}

/********************************************************
 * Views Integration
 ********************************************************
 */

/**
 * Implements hook_views_api().
 * @return Array with Views API version.
 */
function internet_archive_views_api() {
  return array(
	       'api' => 3,
	       'path' => 
	       drupal_get_path('module', 
			       'internet_archive').'/includes'
	       );
}

/**
 * Implements hook_views_data().
 * @return Array with Views table information.
 */
function internet_archive_views_data() {
  $data['internet_archive']['table']['group'] = t('Internet Archive');

  $data['internet_archive']['table']['base'] = array(
    'field' => 'tid',
    'title' => t('Internet Archive'),
    'help' => t("Information regarding files transferred to Archive.org"),
    'weight' => -10,
  );

  $data['internet_archive']['table']['join'] = array(
    'node' => array(
      'left_field' => 'nid',
      'field' => 'nid',
    ),
  );

  $data['internet_archive']['tid'] = array(
    'title' => t('Transfer ID'),
    // The help that appears on the UI,
    'help' => t('Numeric ID unique to each archive.org transfer'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
  );
  $data['internet_archive']['nid'] = array(
    'title' => t('Node ID'),
    'help' => t('Origin node of the file'), 
    // Information for displaying the nid
    'relationship' => array(
      'label' => t('Node'),
      'base' => 'node',
      'base field' => 'nid',
    ),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
  );
  $data['internet_archive']['in_path'] = array(
    'title' => t('Source Path'),
    'help' => t('Path to file transferred to archive.org'), 
    'relationship' => array(
      'label' => t('Files'),
      'base' => 'files',
      'base field' => 'file_name',
    ),
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['archive_url'] = array(
    'title' => t('Archive.org URL'),
    'help' => t('URL to file on Archive.org'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field_url',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['file_name'] = array(
    'title' => t('File Name'),
    'help' => t('Source file_name'), // The help that appears on the UI,
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['md5'] = array(
    'title' => t('MD5 Hash'),
    'help' => t('MD5 Hash of the file sent to Archive.org'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['item'] = array(
    'title' => t('Item Identifier'),
    'help' => t('Item/Bucket name of the resource on archive.org'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['status'] = array(
    'title' => t('Transfer Status'),
    'help' => t('Status of the transfer to archive.org'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
  );
  $data['internet_archive']['date'] = array(
    'title' => t('Date Archived'),
    'help' => t('Date the transfer was initiated to archive.org'), 
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );
  return $data;
}

/** 
 * utility function, checks validated files to see if they have any 
 * derivatives, if not sets to failed 
**/
function internet_archive_repair_validated() {
  $result = db_query("SELECT * FROM {internet_archive} ".
		     "WHERE status = :status",
		     array(':status' => ARCHIVE_VALIDATED));
  $total = 0;
  $failed_count = 0;
  while ($archive_data = $result->fetchAssoc()) {
    $derivatives = internet_archive_get_derivatives($archive_data);
    if (!$derivatives) {
      db_update('internet_archive')
	->fields(array(
		       'status' => ARCHIVE_FAILED,
		       'derivatives' => null,
		       ))
	->condition('tid', $archive_data['tid'])
	->execute();
      $failed_count++;
    }
    $total++;
  }

  drupal_set_message($failed_count . ' / ' . $total . ' have been marked ' .
		     'as failed, with no derivatives available');
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_derivative_extensions() {
  $result =
    db_query("SELECT * FROM {internet_archive} ORDER BY tid DESC LIMIT 50");

  $extensions = array();
  while ($archive_data = $result->fetchAssoc()) {
    $derivatives = unserialize($archive_data['derivatives']);
    foreach ($derivatives as $key => $info) {
      $pathinfo = pathinfo($key);
      if (!$extensions[$pathinfo['extension']]) {
        $extensions[$pathinfo['extension']] = $info['name'];
      }
    }
  }

  return $extensions;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_tab_permission($node) {
  global $user;
  if (user_access('access all internet_archive node tabs') ||
      (user_access('access own internet_archive node tabs') &&
       $user->uid == $node->uid)) {
    if ($node_fields = internet_archive_node_fields($node)) {
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_node_status($node) {
  global $user;
  $files = internet_archive_node_files($node->nid);

  if (count($files) >= 1) {
    if (user_access('update all internet_archive metadata') ||
	(user_access('update own internet_archive metadata') &&
	 $user->uid == $node->uid) ||
	user_access('administer internet_archive')) {

      $operations .=
	l('Click here to update Metadata stored at Archive.org for ' .
	  'this node', 'node/' . $node->nid . '/ia/update-metadata');
    }
    if ($operations) {
      $output .= '<div class="admin-panel">';
      $output .= '<br />';
      $output .= '<h3>Available Operations:</h3>';
      $output .= $operations;
      $output .= '<br /><br />';
      $output .= '</div>';
    }
  }

  if (count($files) >= 1) {
    $output .= '<div class="admin-panel">';
    $output .= '<h3>Files currently at Archive.org:</h3>';
    $output .= internet_archive_node_files_table($node);
    $output .= '</div>';

    if (user_access('access internet_archive logs')) {
      $output .= '<div class="admin-panel">';
      $output .= internet_archive_log_view('nid', $node->nid);
      $output .= '</div>';
    }
  }

  if (!$output) {
    $output .=
      'There is currently no data stored at archive.org for this node.';
  }

  return $output;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_node_files_table($node) {
  global $user;
  $files = internet_archive_node_files($node->nid);

  if (count($files >= 1)) {
    $header = array(t('File Name'), t('Archive Page'), t('Status'));
    if (user_access('delete all internet_archive files') ||
	(user_access('delete own internet_archive files') &&
	 $user->uid == $node->uid)) {
      $header[] = t('Delete files at Archive.org');
    }
    if (user_access('access internet_archive logs')) {
      $header[] = t('View log');
    }
    if (module_exists('internet_archive_download') &&
	user_access('administer internet_archive')) {
      $header[] = t('Re-Queue Download');
    }

    foreach ($files as $key => $archive_data) {
      unset($row);
      if (strlen($archive_data['file_name']) > 20) {
        $file_name = substr($archive_data['file_name'], 0, 20) . '...';
      }
      else {
        $file_name = $archive_data['file_name'];
      }
      $row = array(
        $file_name,
        l('Visit', 'http://www.archive.org/details/' . $archive_data['item']),
        $archive_data['status'],
      );
      if (user_access('delete all internet_archive files') ||
	  (user_access('delete own internet_archive files') &&
	   $user->uid == $node->uid)) {
        $row[] = l('Delete', 'node/' . $node->nid . '/ia/delete-files/' .
		   $archive_data['tid']);
      }
      if (user_access('access internet_archive logs')) {
        $row[] = l('Log', 'ia/log/' . $archive_data['tid']);
      }
      if (module_exists('internet_archive_download') &&
	  user_access('administer internet_archive')) {
        if ($archive_data['status'] == 'derived') {
          $row[] = l('Queue', 'ia/queue-download/' . $archive_data['tid']);
        }
      }

      $rows[] = $row;
    }

    return theme('table', array('header' => $header, 'rows' => $rows));
  }
  else {
    return t('No files from this node have been transferred to Archive.org');
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_node_fields($node) {
  $fields = internet_archive_fields();
  $node_fields = array();
  if ($fields) {
    foreach ($fields as $field_name => $info) {
      if ($node->{$field_name}) {
        $node_fields[] = $field_name;
      }
    }
  }

  if (count($node_fields >= 1)) {
    return $node_fields;
  }
  else {
    return FALSE;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_node_field_files($node) {
  //grab all applicable fields
  $fields = internet_archive_fields();

  $field_files = array();

  foreach ($fields as $field_name => $field_info) {
    //get the value key to reference
    switch ($field_info['type']) {
    case 'filefield':
      $value_key = 'file_name';
      break;
    case 'text':
    case 'emvideo':
      $value_key = 'value';
      break;
    case 'file':
      $value_key = 'uri';
      break;
    }

    if ($node->$field_name) {
      if ($node->{$field_name}[0][$value_key]) {
        $field_files[] = array(
          'field_name' => $field_name,
          'value' => $node->{$field_name}[0][$value_key],
        );
      }
    }
  }

  if (count($field_files >= 1)) {
    return $field_files;
  }
  else {
    return FALSE;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_update_node_metadata_permission($node) {
  global $user;
  if (user_access('update all internet_archive metadata') ||
      (user_access('update own internet_archive metadata') &&
       $user->uid == $node->uid)) {
    if ($files = internet_archive_node_files($node->nid)) {
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_update_node_metadata($node) {
  if ($files = internet_archive_node_files($node->nid)) {
    foreach ($files as $key => $archive_data) {
      internet_archive_update_item($node, $archive_data);
    }
    drupal_set_message('Metadata at Archive.org updated. <strong>Note '.
		       'that it may take some time for this update to be '.
		       'visible at Archive.org!</strong>');
    drupal_goto('node/' . $node->nid . '/ia');
  }
  else {
    drupal_set_message('No item found for this node at Archive.org!');
    drupal_goto('node/' . $node->nid . '/ia');
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_delete_node_files_permission($node) {
  global $user;
  if (user_access('delete all internet_archive files') ||
      (user_access('delete own internet_archive files') &&
       $user->uid == $node->uid)) {
    if ($files = internet_archive_node_files($node->nid)) {
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_delete_node_files($node, $tid) {
  if ($archive_data = internet_archive_load_data_tid($tid)) {
    internet_archive_delete_files($archive_data);

    db_delete('internet_archive')
      ->condition('tid', $tid)
      ->execute();
    $msg = t('Selected files at Archive.org deleted. <strong>Note that it '.
	     'may take some time for this update to be visible at '.
	     'Archive.org!</strong>');
	     
    drupal_set_message($msg);
    $log_entry = array(
      'tid' => $tid,
      'message' => t('File and derivatives deleted at Archive.org'),
      'message_data' => $archive_data,
      'type' => ARCHIVE_LOG_WARNING,
    );
    internet_archive_log($log_entry);
    drupal_goto('node/' . $node->nid . '/ia');
  }
  else {
    drupal_set_message('No files found for this source at Archive.org!');
    $log_entry = array(
      'tid' => $tid,
      'message' => t('No entries found for this file at Archive.org'),
      'message_data' => $archive_data,
      'type' => ARCHIVE_LOG_ERROR,
    );
    internet_archive_log($log_entry);
    drupal_goto('node/' . $node->nid . '/ia');
  }
}

/**
 * Log function used to record all updates associated with file transfers
 */
function internet_archive_log($data) {
  dsm($data, "Log entry!!!!!!!!!!!!!!!!!!!!!!!!!");
  if ($data['tid'] && $data['message'] && $data['type']) {
    $id = db_insert('internet_archive_log')
      ->fields(array(
		     'tid' => $data['tid'],
		     'message' => $data['message'],
		     'message_data' => serialize($data['message_data']),
		     'type' => $data['type'],
		     'date' => REQUEST_TIME,
		     ))
      ->execute();
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_log_table($type = 'tid', $identifier = NULL,
				    $show_only_errors_and_warnings = FALSE) {
  dsm('internet_archive_log_table');
  $args = array();
  switch ($type) {
    case 'tid':
      $where = ' WHERE log.tid=:tid';
      $args[':tid'] = $identifier;
      break;
    case 'nid':
      $where = ' WHERE archive.nid=:nid';
      $args[':nid'] = $identifier;
      break;
    case 'global':
      if ($show_only_errors_and_warnings) {
        $where = " WHERE log.type='" . ARCHIVE_LOG_WARNING .
	  "' OR log.type='" . ARCHIVE_LOG_ERROR . "'";
      }
      break;
  }

  $query =
    "SELECT log.lid, log.tid, log.message, log.message_data, log.type,".
    "log.date ".
    "FROM {internet_archive_log} AS log ".
    "INNER JOIN {internet_archive} AS archive ON archive.tid=log.tid" .
    $where . " ORDER BY log.date DESC";

  $page_number = arg(4);
  $results_per_page = variable_get('internet_archive_results_per_page', 100);

  if ($page_number && $page_number > 1) {
    $min = (($results_per_page) * $page_number) - $results_per_page;
  }
  else {
    $page_number = 1;
    $min = 0;
  }
  
  $result = db_query_range($query, $min, $results_per_page, $args);

  while ($log_entry = $result->fetchAssoc()) {
    switch ($log_entry['type']) {
      case 1:
        $friendly_type = 'error';
        break;
      case 2:
        $friendly_type = 'warning';
        break;
      case 3:
        $friendly_type = 'notice';
        break;
    }

    $message = $log_entry['message'];
    $message .= "&nbsp;on <em>" . date("F j, Y, g:i a", $log_entry['date']) .
      "</em>";

    if (function_exists('krumo') && php_sapi_name() != 'cli') {
      $message .= '<br />';
      $message .= krumo_ob(unserialize($log_entry['message_data']));
    }

    $rows[] = array('data' => array(array('data'=>$message,
					  'class'=>array('')),
				    array('data'=>$friendly_type,
					  'class'=>array('ia-type')),
				    ),
		    'class' => array('ia-' . $friendly_type),
		    );
    
  }

  if (count($rows) > 0) {
    $header = array('Message', 'Type');

    $table = theme('table', array('header' => $header, 'rows' => $rows));

    if (!function_exists('krumo') || php_sapi_name() == 'cli') {
      $table .=
	t('For more detailed debugging, please install the devel module and '.
	  'return to this page.');
    }

    if ($page_number > 1) {
      $prev_page = $page_number - 1;
      $table .= "<br/>" .l("<<<<< Previous ",
			   "admin/reports/internet_archive/log/" . $prev_page);
      
      $table .= "&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp";
    }
    
    if (count($rows) == $results_per_page) {
      $next_page = $page_number + 1;
      $table .= l(" Next >>>>>>", "admin/reports/internet_archive/log/".
		  $next_page);
    }
    
    return $table;
  }
  else {
    $prev_page = $page_number - 1;
    $link .= "<br/>" .l("<<<<< Previous ",
			"admin/reports/internet_archive/log/" . $prev_page);

    return t('No log information is currently available for this file.').$link;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_log_view($type = 'tid', $identifier = NULL) {
  dsm('internet_archive_log_view');

  if (user_access('access internet_archive logs')) {
    drupal_add_css(drupal_get_path('module', 'internet_archive') .
		   '/css/log.css');
    if ($type == 'tid') {
      $item = internet_archive_load_data_tid($identifier);
      $node = node_load($item['nid']);
      $output = '<br /><h3>Log for <i>' . $node->title . '</i> source file: ' .
	$item['in_path'] . '</h3>';

      $output .=
	l('Visit the node associated with this transfer',
	  'node/' . $item['nid'] . '/ia');
      
      $output .= ' | ' . l('View the main log page',
			   'admin/reports/internet_archive/log');
    }
    elseif ($type == 'nid') {
      $node = node_load($identifier);
      $output =
	'<h3>Combined log for all transfers associated with the '.
	'<i>' . $node->title . '</i> node</h3>';
    }
    elseif ($type == 'global') {
      $output = '<h3>Global message log</h3>';
    }

    $show_notice_config =
      variable_get('internet_archive_show_only_errors_and_warnings', FALSE);

    if (arg(3) == 'log' && $show_notice_config) {
      $show_only_errors_and_warnings = TRUE;
    }
    else {
      $show_only_errors_and_warnings = FALSE;
    }
    
    $output .= internet_archive_log_table($type, $identifier,
					  $show_only_errors_and_warnings);
    
    return $output;
  }
  else {
    drupal_access_denied();
  }

}

/**
 * Workaround for PHPs lame 2GB/4GB file_size issues
 * Created with help from Ray Tiley, http://groups.drupal.org/user/81206
 */
function internet_archive_file_size($file) {
  $size = filesize($file);

  //Try to accomodate 32bit environments that allow shell command execution
  //and have ls
  //Theoretically PHP will always return a negative or 0 value if it cannot
  //handle the large file_size 
  if ($size < 0 || $size == 0) {
    $cmd = "ls -l " . escapeshellarg($file) . " | awk '{print $5}'";
    $ls_size = $cmd;
    if (is_numeric(trim($ls_size))) {
      $size = $ls_size;
    }
  }

  return $size;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_seconds_hhmmss($seconds) {
  $days = floor($seconds / 86400);
  $days_mod = $seconds % 86400;
  $hours = floor($days_mod / 3600);
  $hours_mod = $days_mod % 3600;
  $minutes = floor($hours_mod / 60);
  $minutes_mod = $hours_mod % 60;
  $seconds = floor($minutes_mod);

  if ($hours < 10) {
    $hours = '0' . $hours;
  }
  if ($minutes < 10) {
    $minutes = '0' . $minutes;
  }
  if ($seconds < 10) {
    $seconds = '0' . $seconds;
  }

  $formatted = $hours . ':' . $minutes . ':' . $seconds;
  return $formatted;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function internet_archive_help_links($name, $type = 'icon') {
  switch ($type) {
    case 'icon':
      // TODO Please change this theme call to use an associative array
      //for the $variables parameter.
      $output = theme('advanced_help_topic', 'internet_archive', $name);
      break;
    case 'link':
      // TODO Please change this theme call to use an associative array for
      //the $variables parameter.
      $link = theme('advanced_help_topic', 'internet_archive', $name, 'title');
      if (!$link) {
        $link = t('Please install the ') .
	  l('advanced help module', 'http://drupal.org/project/advanced_help')
	  . t(' for better documentation on using this module.');
      }
      else {
        $link = t('Help on the: !link.', array('!link' => $link));
      }
      $output = $link;
      break;
    case 'text':
      $output = t('Click the ? icon above for more help on this page.');
      break;
    case 'full':
      // TODO Please change this theme call to use an associative array for
      //the $variables parameter.
      $output = theme('advanced_help_topic', 'internet_archive', $name);
      $output .= '&nbsp;' .
	t('Click the help icon to view more details on this page.');
      break;
  }

  return $output;
}

/** * Implementation of hook_cron_queue_info() */
function internet_archive_cron_queue_info() {
  dsm("hi dad");
  // This is the callback function for each queue item.
  $queues['internet_archive_send_file'] =
    array(
	  'worker callback' => 'internet_archive_send_file_run',
	  'time' => 180, 
	  );
  return $queues;
}

function internet_archive_send_file_run($item) {
  dsm('internet_archive_send_file_run');
  global $internet_archive_queue_count;

  $internet_archive_queue_count = $internet_archive_queue_count ?
    $internet_archive_queue_count : 0;

  $internet_archive_queue_count ++;

  dsm($internet_archive_queue_count, 'my count');

  $limit = variable_get('internet_archive_queue_limit', '1');

  if ($internet_archive_queue_count > $limit) {
    throw new Exception('Item will remain in the queue.');
  }

  //FETCH DAYS OF WEEK AND CHECK
  if (!internet_archive_day_check()) {
    throw new Exception('Item will remain in the queue.');
  }
  
  //FETCH HOUR OF DAY AND CHECK
  if (!internet_archive_hour_check()) {
    throw new Exception('Item will remain in the queue.');
  }

  dsm($item, 'item');
  
  //SENDING THE ITEM WITH FILE NAME, FIELD NAME, AND FILE LOCATION
  internet_archive_default_send($item);
  
}

/**
 * implements hook_action_info()
 */
function internet_archive_action_info() {
  $items = array();
    $items['internet_archive_delete_archive_item_action'] =
    array(
	  'type' => 'entity',
	  'label' =>
	  t('Internet Archive Transfers: Delete files, buckets, and items'),
	  'configurable' => FALSE,
	  'vbo_configurable' => FALSE,
	  'triggers' => array('any'),
	  'behavior' => array(),
	  );

  $items['internet_archive_complete_transfer_action'] =
    array(
	  'type' => 'entity',
	  'label' =>
	  t('Internet Archive Transfers: Validate and get Derivatives'),
	  'configurable' => FALSE,
	  'vbo_configurable' => FALSE,
	  'triggers' => array('any'),
	  'behavior' => array(),
	  );

  
  return $items;
}

/**
 * Custom VBO action callback function
 */
function internet_archive_complete_transfer_action(&$node, $context) {
  internet_archive_validate_transfers($node->nid);

  internet_archive_store_derivatives($node->nid);
}
/**
 * Custom VBO action callback function
 */
function internet_archive_delete_archive_item_action(&$node, $context){
  dsm($node, 'internet_archive_delete_archive_item_action');

  $sql = "SELECT * from {internet_archive} where nid = :nid";
  $results = db_query($sql, array(':nid' => $node->nid));

  while($result = $results->fetchAssoc()) {
    $archive_data = internet_archive_load_data_tid($result['tid']);
    dsm($archive_data, 'woohoo archive data');
    internet_archive_delete_files($archive_data);
    internet_archive_delete_item($archive_data);

    db_delete('internet_archive')
      ->condition('tid', $archive_data['tid'])
      ->execute();

    $msg = t('Selected files at Archive.org deleted. <strong>Note that it '.
	     'may take some time for this update to be visible at '.
	     'Archive.org!</strong>');
	     
    drupal_set_message($msg);
    $log_entry = array(
      'tid' => $tid,
      'message' => t('File and derivatives deleted at Archive.org'),
      'message_data' => $archive_data,
      'type' => ARCHIVE_LOG_WARNING,
    );
    internet_archive_log($log_entry);

  }
  
}
/**
 * implements hook_form_alter()
 */
function internet_archive_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-internet-archive-transfers-page') {
    $options = array(
		     '' => '<select>',
		     ARCHIVE_QUEUED => ARCHIVE_QUEUED,
		     ARCHIVE_TRANSFERRING => ARCHIVE_TRANSFERRING,
		     ARCHIVE_TRANSFERRED => ARCHIVE_TRANSFERRED,
		     ARCHIVE_VALIDATED => ARCHIVE_VALIDATED,
		     ARCHIVE_DERIVED => ARCHIVE_DERIVED,
		     ARCHIVE_DELETED => ARCHIVE_DELETED,
		     ARCHIVE_FAILED => ARCHIVE_FAILED,
		     );

    $form['status_1'] =
      array(
	    '#type' => 'select',
	    '#options' => $options,
	  );


  }
}