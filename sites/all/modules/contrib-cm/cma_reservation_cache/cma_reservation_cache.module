<?php

/**
 * @file
 * cma_reservation_cache 
 */

//CHART FILTERS
define('CMA_RESERVATION_CACHE_FIRST_DAY', 'first_day');
define('CMA_RESERVATION_CACHE_LAST_DAY', 'last_day');
define('CMA_RESERVATION_CACHE_DAY_BEGIN', 'day_begin');
define('CMA_RESERVATION_CACHE_DAY_END', 'day_end');
define('CMA_RESERVATION_CACHE_INVENTORY', 'inventory');
define('CMA_RESERVATION_CACHE_ITEM_CATEGORY', 'item_category');
define('CMA_RESERVATION_CACHE_ITEM_TYPE', 'item_type');
define('CMA_RESERVATION_CACHE_ITEM_NID', 'item_nid');
define('CMA_RESERVATION_CACHE_DOW', 'dow');
define('CMA_RESERVATION_CACHE_COL_SPAN', 'col_span');


/**
 * Implements hook_permission().
 */
function cma_reservation_cache_permission() {
}


/**
 * Implements hook_menu().
 */
function cma_reservation_cache_menu() {
  // Standard Administration settings.
    $items['admin/config/cma_reservation_cache'] =
    array(
	  'title' => 'CMA Reservation Cache',
	  'description' => 'Configure settings for CMA Reservation Cache.',
	  'page callback' => 'cma_reservation_cache_settings_home',
	  'access arguments' => array('administer reservations'),
	  'type' => MENU_NORMAL_ITEM,
	  );
  $items['admin/config/cma_reservation_cache/default'] =
    array(
	  'title' => 'Cache Settings',
	  'description' => 'Configure settings for CMA Reservation Cache.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('cma_reservation_cache_settings_form'),
	  'access arguments' => array('administer reservations'),
	  );
  $items['admin/config/cma_reservation_cache/default'] =
    array(
	  'title' => 'Default Settings',
	  'description' => 'Configure settings for CMA Reservation Cache.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('cma_reservation_cache_settings_form'),
	  'access arguments' => array('administer reservations'),
	  );    
  // report and log views
  $items['admin/reports/cma_reservation_cache'] =
    array(
	  'title' => 'Reservation Cache Report and Tools',
	  'description' => t('View Cache Report and reload caches.'),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('cma_reservation_cache_report'),
	  'access arguments' => array('administer reservations'),
	  'type' => MENU_NORMAL_ITEM,
	  );

    // report and log views
  $items['reservations/chart'] =
    array(
	  'title' => 'Reservation Chart',
	  'description'=>t('View chart of reservable items and reservations.'),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('cma_reservation_cache_chart'),
	  'access arguments' => array('access content'),
	  'type' => MENU_NORMAL_ITEM,
	  );

  return $items;
}

/**
 * Loads the general settings form.
 *
 * @see cma_reservation_cache_admin_form()
 */
function cma_reservation_cache_settings_home() {
  return drupal_get_form('cma_reservation_cache_settings_form');
}

/**
 * @param type $form
 * @return $form
 */
function cma_reservation_cache_settings_form($form) {
  $form = array();

  $form['project_fieldset'] =
    array(
	  '#type' => 'fieldset',
	  '#title' => t("Project Field Settings"),
	  );

  $fields_info = field_info_instances('node', 'reservations_reservation');
  $project_fields = array(0=>'<Select>');
  foreach ($fields_info as $field_name => $value) {
    $project_fields[$field_name] = $field_name;
  }
  asort($project_fields);

  $default_value = variable_get('cma_reservation_cache_project_field', '');
  $form['project_fieldset']['cma_reservation_cache_project_field']
    = array(
	    '#type' => 'select',
	    '#title' =>t('Which field on reservations is the project?'),
	    '#required' => FALSE,
	    '#options' => $project_fields,
	    '#default_value' => $default_value,
	    );


  //////////////////////////////////////////////////////////////////////////
  $rows = array();
  $row_elements = array();
  $data=array();


  //BUCKET CATEGORIES  
  $vid = variable_get('reservations_grouping_vid', 0);
  $terms = taxonomy_get_tree($vid);
  $bucket_categories = array();
  foreach ($terms as $term) {
    $bucket_categories[$term->tid] = $term->name; 
  }
  natcasesort($bucket_categories);

  $default_weight = -100;
  foreach ($bucket_categories as $k =>$v) {
    $default = variable_get($k.'_rank_weight',  $default_weight++);
    // Build the table rows.
    $rows[$k] =
      array(
	    'data' =>
	    array(
		  // Cell for the cross drag&drop element.
		  array('class' => array('item-cross')),
		  // Weight item for the tabledrag.
		  array('data' =>
			array(
			      '#type' => 'weight',
			      '#title' => t('Weight'),
			      '#title_display' => 'invisible',
			      '#default_value'=>$default, 
			      '#delta' => 500,
			      '#attributes' =>
			      array('class' => array('item-order-weight'),),
			      )),
		  //CONTENT TYPE NAME MARKUP
		  array('data' => array('#markup' => "$v",)),
		  
		  ),
	    'class' => array('draggable'),
	    );
    
    // Build rows of the form elements in the table.
    $row_elements[$k] =
      array(
	    $k.'_rank_weight' => &$rows[$k]['data'][1]['data'],
	    'content_type'.$k => &$rows[$k]['data'][2]['data'],
	    );
  }

  //sort rows on the weight value
  uasort($rows, function($a, $b) {
      return $a['data'][1]['data']['#default_value'] >=
	$b['data'][1]['data']['#default_value'];
    });

  $form['cma_reservation_chart'] =
    array(
	  '#type' => 'fieldset',
	  '#title' => t("Chart Settings"),
	  );

  $form['cma_reservation_chart']['sort'] =
    array(
	  '#type' => 'fieldset',
	  '#title' => t('Order of Categories on Chart'),
	  );

  // add this to parent form
  $form['cma_reservation_chart']['sort']['content_types'] =
    array(
	  '#theme' => 'table',
	  // The row form elements need to be processed and build,
	  // therefore pass them as element children.
	  'elements' => $row_elements,
	  '#header' =>
	  // We need two empty columns for the weigth field and th10e cross.
	  array(
		array('data' => t('Sort'), 'colspan' => 2),
		array('data' => t('Reservable Content Type Category')),
		),
	  '#rows' => $rows,
	  '#attributes' => array('id' => 'item-order'),
	  '#sufix'=>'</div>',
	  );
  drupal_add_tabledrag('item-order', 'order', 'sibling','item-order-weight');
  
  return system_settings_form($form);
}

/**
 * Form gives information on cache and tools to reload it
 * @param type $form
 * @return $form
 */
function cma_reservation_cache_report($form) {
  $form = array();

  //number of content types
  //number of bucket slots
  //number of resource items
  //earliest date
  //latest date
  $form['cache']['start_date'] =
    array(
	  '#title' => 'Start of Cache Refresh',
	  '#type' => 'date_popup',
	  '#date_format' => "Y-m-d",
	  '#date_label_position' => 'within',
	  '#size' => 15,
	  '#default_value' => date("Y-m-d"),
	  '#description' => '',
	  );
  $form['cache']['end_date'] =
    array(
	  '#title' => 'End of Cache Refresh',
	  '#type' => 'date_popup',
	  '#date_format' => "Y-m-d",
	  '#date_label_position' => 'within',
	  '#size' => 15,
	  '#default_value' => date("Y-m-d"),
	  '#description' => '',
	  );

  $form['submit'] =
    array('#type' => 'submit',
	  '#value' => t('Clear and Reload Cache'),
	  );
  return $form;
}

/**
 *
 */
function cma_reservation_cache_report_submit($form, $form_state) {
  //get start and end from the submitted form values
  $cache_start = $form_state['values']['start_date'] . " 00:00:00";
  $cache_end = $form_state['values']['end_date'] . " 23:59:59";
  $cache_start_object = new DateTime($cache_start);
  $cache_end_object = new DateTime($cache_end);

  $content_types = reservations_content_types();
  dsm($content_types, 'content types');

  $reservation_fields =
    field_info_instances('node', 'reservations_reservation');

  $increment = $reservation_fields['field_reservations_date']
    ['widget']['settings']['increment'];
  
  //FIND THE FIELDS FOR THE BUCKET AND RESOURCE CACHE TABLES
  $sql = "show columns from cma_reservation_bucket_cache";
  $results = db_query($sql);
  $bucket_cache_fields = array();
  while ($result = $results->fetchObject()) {
    $bucket_cache_fields[] = $result->Field;
  }
  dsm($bucket_cache_fields, 'bucket cache fields');

  $sql = "show columns from cma_reservation_resource_cache";
  $results = db_query($sql);
  $resource_cache_fields = array();
  while ($result = $results->fetchObject()) {
    $resource_cache_fields[] = $result->Field;
  }
  dsm($resource_cache_fields, 'resource cache fields');
  //////////////////////////////////////////////////////////////////////////
  //FILL THE $reservable_content_type_items ARRAY
  
  //GRAB ALL NODES WHOSE CONTENT TYPES ARE RESERVABLE AND IS AN ACTUAL ITEM
  //NOT A PLACEHOLDER FOR A RESERVATION
  $query =
    "SELECT n.nid, n.title, n.type, rin.reservations_default_availability 
     FROM {node} n
     INNER JOIN {reservations_reservation_item_node} rin ON n.vid = rin.vid
     WHERE rin.reservations_sub_type = :reservations_sub_type
     ORDER BY n.type ASC

";
  //   ORDER BY n.type ASC
  //  ";
  // FIXME, MAKE SURE ABOVE IS GONE AFTER TESTING
  // AND n.type='lowel_o110_p_'
  // AND n.type='firehouse_express_studios_fh_'
  // LIMIT 1
  
  $args = array(':reservations_sub_type' => RESERVATIONS_SUB_TYPE_ITEM);
  $results = db_query($query, $args);

  $reservable_content_type_items = array();
  dsm(date('H:i:s'), 'start of item discover loop');

  while ($result = $results->fetchObject()) {

    if (!$content_types[$result->type]) {
      continue;
    }
    $reservable_content_type_items[$result->nid] =
      array('nid' => $result->nid,
	    'title' => $result->title,
	    'type' => $result->type,
	    'status' => $result->reservations_default_availability,
	    );
  }
  dsm($reservable_content_type_items, 'reservable content type items');

  //////////////////////////////////////////////////////////////////////////
  //FILL THE $reserved_timeslots ARRAY
  $project_field = variable_get('cma_reservation_cache_project_field', '');
    
  $query =
    "SELECT d.entity_id as res_id, 
     rd.reservations_placeholder_nid as placeholder_nid,
     n.type as placeholder_type,  field_reservations_date_value as res_start,
     field_reservations_date_value2 as res_end,
     reservations_item_nid as item_nid ";

  if ($project_field) {
    $query .=
      ', pn.title as project_title, og.gid as project_nid ';
  }
  
  $query .= 
    "FROM field_data_field_reservations_date d 
     INNER JOIN reservations_reservation_detail rd on rd.vid=d.revision_id
     INNER JOIN node n on n.nid=rd.reservations_placeholder_nid ";

  if ($project_field) {
    $query .=
      "LEFT JOIN {og_membership} og ON d.entity_id = og.etid ". 
      "LEFT JOIN node pn ON pn.nid=og.gid ";
  }

  $query .=
    "WHERE field_reservations_date_value2 >= :start
     AND field_reservations_date_value <= :end ";

  //FIXME ONLY HERE FOR TESTING
  //$query .= " and n.type = 'lowel_o110_p_' ";

  $query .= "ORDER BY field_reservations_date_value ";
  $args = array(':start' => $cache_start,":end" => $cache_end);;

  $results = db_query($query, $args);

  $reserved_timeslots = array();
  $cached_reservations = array();
  dsm(date('H:i:s'), 'start of reservation loop');

  while ($result = $results->fetchObject()) {
    //LOOK TO SEE IF WE HAVE FETCHED THIS RESERVATION BEFORE
    $reservation = isset($cached_reservations[$result->res_id]) ?
      $cached_reservations[$result->res_id] : NULL;
    if (!$reservation) {
      $reservation = node_load($result->res_id);
      $cached_reservations[$result->res_id] = $reservation;
    }

    //IF FOR SOME REASON OUR RESERVATION NODE WAS DELETED, IGNORE
    if (!$reservation) {
      continue;
    }

    $date_field = $reservation->field_reservations_date[LANGUAGE_NONE][0];
    $start_object =
      new DateTime($date_field['value'], 
		   new DateTimeZone($date_field['timezone_db']));
    
    $start_object->setTimeZone(new DateTimeZone($date_field['timezone']));
    $prev_object = clone $start_object;

    $minutes = $prev_object->format('i');
    $seconds = $prev_object->format('s');

    if ($minutes > 0) {
      $prev_object->modify('-'.$minutes.' minutes');
    }
    if ($seconds > 0) {
      $prev_object->modify('-'.$seconds.' seconds');
    }

    $end_object =
      new DateTime($date_field['value2'], 
		   new DateTimeZone($date_field['timezone_db']));
    
    $end_object->setTimeZone(new DateTimeZone($date_field['timezone']));

    while ($prev_object < $end_object) {
      $next_object = clone $prev_object;
      $next_object->modify('+'.$increment.' minutes');
      if ($start_object < $next_object) {
	//make sure array is initialized for our timeslot
	$reserved_timeslots[$prev_object->getTimestamp()] =
	  $reserved_timeslots[$prev_object->getTimestamp()] ?
	  $reserved_timeslots[$prev_object->getTimestamp()] : array();
	$type = $result->placeholder_type;
	$reserved_timeslots[$prev_object->getTimestamp()][$type] =
	  $reserved_timeslots[$prev_object->getTimestamp()][$type] ?
	  $reserved_timeslots[$prev_object->getTimestamp()][$type] : array();

	$reserved_timeslots[$prev_object->getTimestamp()][$type][] = $result;
      }

      $prev_object = clone $next_object;
    }
  }
  dsm($reserved_timeslots, 'reserved_timeslots');
  dsm($cached_reservations, 'reservations');

  //FIXME ONLY HERE FOR TESTING
  foreach($reserved_timeslots as $timestamp_tmp => $slot_tmp) {
    //dsm($slot_tmp, date('Y-m-d H:i:s',$timestamp_tmp).' *  '.$timestamp_tmp);
  }
  //////////////////////////////////////////////////////////////////////////
  //FILL THE $timeslots ARRAY WITH ALL TIMESLOTS
  $cache_start_object = new DateTime($cache_start);
  $cache_end_object = new DateTime($cache_end);

  dsm(date('H:i:s'), 'start of item loop');
  $row_counter = 0;
  $bucket_slot_id = 0;
  
  //loop over all of the items/slots (no times though)
  foreach($reservable_content_type_items as $item) {
    $bucket_slot_id ++;
    
    $prev_object = clone $cache_start_object;

    //this will store all the db rows for a time slot for all content types
    //it gets refreshed every new 
    $db_rows = array();

    //loop over each time block
    while ($prev_object < $cache_end_object) {
      $row_counter ++;
      
      $next_object = clone $prev_object;
      $next_object->modify('+'.$increment.' minutes');
      
      $prev_ts = $prev_object->getTimestamp();
      $next_ts = $next_object->getTimestamp();
      
      /**
      dsm($prev_object->format('Y-m-d H:i:s'), 'prev');
      dsm($next_object->format('Y-m-d H:i:s'), 'next');
      dsm($prev_ts, 'prev');
      dsm($next_ts, 'next');
      **/
      
      
      //GET CONTENT TYPE INFO
      $content_type = $content_types[$item['type']];
      //LOOK UP ANY RESERVATIONS FOR THIS TIMESLOT AND CONTENT TYPE
      $reservation_result = NULL;
      $reservation_node = NULL;
      $reservations =
	isset($reserved_timeslots[$prev_ts]) &&
	isset($reserved_timeslots[$prev_ts][$item['type']]) ?
	$reserved_timeslots[$prev_ts][$item['type']] :
	array();

      //dsm($reservations, 'find reservations?');
      if ($reservations) {	
	if ($content_type['reservations_type_setting'] == 'bucket') {
	  //POP AN ARRAY OFF THE STACK
	  $reservation_result =
	    array_shift($reserved_timeslots[$prev_ts][$item['type']]);
	  $reservation_node =
	    $cached_reservations[$reservation_result->res_id];
       	}
	else if($content_type['reservations_type_setting'] == 'resource') {
	  foreach($reservations as $reservation) {
	    if ($reservation->item_nid == $item['nid']) {
	      //this is a reservation against this resource, use as the
	      //result object that has values directly from db query
	      $reservation_result = $reservation;
	      //get cached reservation node object
	      $reservation_node =
		$cached_reservations[$reservation_result->res_id];
	    }
	  }
	}
	/**
	dsm($content_type, 'ct');
	dsm($item, 'item');
	dsm($reservation_result, 'result');
	dsm($reservation_node, 'reservation');
	**/
      }

      $db_row = array();
      $db_row['content_type'] = $item['type'];
      $db_row['cache_time'] = date("Y-m-d H:i:s");
      $db_row['cache_slot_start_time'] = $prev_ts;
      $db_row['cache_slot_end_time'] = $next_ts;
      $db_row['cache_slot_start_time_formatted'] =
	date('Y-m-d H:i:s',$prev_ts);
      $db_row['cache_slot_end_time_formatted'] =
	date('Y-m-d H:i:s',$next_ts);
      
        
      $db_row['inventory'] = isset($content_type['inventory_tids']) &&
	isset($content_type['inventory_tids'][0]) ?
	$content_type['inventory_tids'][0] : NULL;

      $db_row['bucket_category'] = $content_type['reservations_grouping'];

      if ($content_type['reservations_type_setting'] == 'bucket') {
	$db_row['bucket_slot_id'] = $bucket_slot_id;
		
	if ($reservation_result && $reservation_result->item_nid) {
	  $db_row['item_nid'] = $reservation_result->item_nid;
	}
	else {
	  $db_row['item_nid'] = NULL;
	}	
      }
      else if($content_type['reservations_type_setting'] == 'resource') {
	$db_row['item_nid'] = $item['nid'];
	$db_row['item_title'] = $item['title'];
	$db_row['item_status'] = $item['status'];
      }
      //dsm($reservation_node, 'reservation node');
      //  dsm($reservation_result, 'reservation db result');

      if ($reservation_node) {
	$db_row['reservation_nid'] = $reservation_node->nid;
	//FIXME SET RESERVATION GROUP ID FOR REAL
	$db_row['reservation_group_id'] = 0;
	$db_row['reservation_status'] =
	  $reservation_node->reservations_reservation_status;
	
	$skip_types = array('viewfield',);
	
	$skip_names = array('field_reservations_inventory');
	foreach ($reservation_fields as $field_name => $value) {
	  $field_info = field_info_field($field_name);
	  if (in_array($field_info['type'], $skip_types)) {
	    continue;
	  }
	  if (in_array($field_name, $skip_names)) {
	    continue;
	  }
	  
	  switch ($field_info['type']) {
	  case 'entityreference':
	    $index = 'target_id';
	    break;
	  case 'taxonomy_term_reference':
	    $index = 'tid';
	    break;
	  case 'computed':
	  case 'datetime':
	  case 'number_integer':
	  case 'text':
	  case 'text_long':
	  default:
	    $index = 'value';
	    break;
	  }
	  
	  if ($field_info['type'] == 'datetime' &&
	      isset($field_info['columns']['value']) &&
	      isset($field_info['columns']['value2'])) {
	    $db_row[$field_name."_start"] =
	      cma_reservations_cache_get_single_field_value($reservation_node,
							    $field_name,
							    $index);
	    $db_row[$field_name."_end"] = 
	      cma_reservations_cache_get_single_field_value($reservation_node,
							    $field_name,
							    'value2');
	  }
	  else {
	    $db_row[$field_name] = 
	      cma_reservations_cache_get_single_field_value($reservation_node,
							    $field_name,
							    $index);
	    
	  }
	}
      }
      
      //IF BAD ITEM STATUS ITEM IS UNAVAIALABLE
      if ($item['status'] != RESERVATIONS_AVA_F) {
	$db_row['cache_slot_status'] = 0;
      }
      //WE HAVE A RESERVATION IN THIS TIME SLOT
      else if ($reservation_result) {
	if ($reservation_result->reservations_reservation_status ==
	    RESERVATIONS_STATUS_UNCONFIRMED) {
	  if (variable_get('reservations_ignore_unconfirmed_reservations')) {
	    $db_row['cache_slot_status'] = 1;
	  }
	  else {
	    $db_row['cache_slot_status'] = 0;
	  }
	}
	else if ($reservation_result->reservations_reservation_status ==
		 RESERVATIONS_STATUS_PENDING ||
		 $reservation_result->reservations_reservation_status ==
		 RESERVATIONS_STATUS_CHECKED_OUT) {
	  $db_row['cache_slot_status'] = 0;
	}
	else if ($reservation_result->reservations_reservation_status ==
		 RESERVATIONS_STATUS_CHECKED_IN ||
		 $reservation_result->reservations_reservation_status ==
		 RESERVATIONS_STATUS_CANCELLED ||
		 $reservation_result->reservations_reservation_status ==
		 RESERVATIONS_STATUS_DENIED ||
		 $reservation_result->reservations_reservation_status ==
		 RESERVATIONS_STATUS_NO_SHOW) {
	  $db_row['cache_slot_status'] = 1;
	}
	//UNKNOWN RESERVATION STATUS
	else {
	  $db_row['cache_slot_status'] = 1;
	}
      }
      //WE HAVE A GOOD ITEM STATUS AND NO RESERVATION SO ITS AVAILABLE
      else {
	$db_row['cache_slot_status'] = 1;
      }
      
      //set project_nid and project_title using title field set in settings
      $project_field_name =variable_get('cma_reservation_cache_project_field');
      if ($project_field_name) {
	$db_row['project_nid'] = $reservation_result->project_nid;
	$db_row['project_title'] = $reservation_result->project_title;
      }
      $db_rows[] = $db_row;
      $prev_object = clone $next_object;
    } //done looping through the item for all time blocks
    
    if ($content_type['reservations_type_setting'] == 'bucket') {
      $table = 'cma_reservation_bucket_cache';
      $insert_fields = array_diff($bucket_cache_fields, array('cache_id'));
    }
    else if($content_type['reservations_type_setting'] == 'resource') {
      $table = 'cma_reservation_resource_cache';
      $insert_fields = array_diff($resource_cache_fields, array('cache_id'));
    }
    $sql ="INSERT INTO " . $table . " ";

    $sql .= " ( " . implode(',', $insert_fields) . " ) VALUES ";

    $is_first_row = TRUE;
    $args = array();
    $insert_counter = 0;

    foreach($db_rows as $row) {
      if ($is_first_row) {
	$is_first_row = FALSE;
      }
      else {
	$sql .= ", ";
      }
      
      $sql .= " ( " ;
      $is_first_field = TRUE;
      foreach($insert_fields as $key=>$value) {
	if ($is_first_field) {
	  $is_first_field = FALSE;
	}
	else {
	  $sql .= ", ";
	}
	$arg_name =  ':' . $value . '_' . $insert_counter;
	$sql .= $arg_name;
	$args[$arg_name] = $row[$value];
      }
      $sql .= " ) ";
      $insert_counter ++;
    }

    //dsm($sql, 'sql');
    //dsm($args, 'args');
    $delete_sql =
      "DELETE FROM $table " .
      "WHERE cache_slot_start_time >= :start " .
      "AND cache_slot_start_time <= :end " .
      "AND ";

    if ($table == 'cma_reservation_bucket_cache') {
      $delete_sql .= " bucket_slot_id = :bucket_slot_id";
      $delete_args = array(':bucket_slot_id' => $db_row['bucket_slot_id']);
    }
    else {
      $delete_sql .= " item_nid = :item_nid";
      $delete_args = array(':item_nid' => $db_row['item_nid']);
    }
    $delete_args[':start'] = $cache_start_object->getTimestamp();
    $delete_args[':end'] = $cache_end_object->getTimestamp();

    //delete all timeblocks within time range for this item/bucket slot
    db_query($delete_sql, $delete_args);

    //add all timeblocks within time range for this item/bucket slot
    db_query($sql, $args);
    dsm(date('H:i:s'), 'after insert');
  }  
  dsm(date('H:i:s'), 'end of item loop');
  dsm($row_counter, 'number of rows');

  //FIXME ONLY HERE FOR TESTING
  //db_query("select dfjd from dfjdlk");
  
}

/**
 * Function will build the form and the chart of reservable items and their
 * resesrvations
 */
function cma_reservation_cache_chart() {
  dsm(date('h:i:s'), 'form start');
  $form = array();
  $filters = cma_reservation_cache_chart_filters();
  $values = cma_reservation_cache_chart_filter_values($filters);
  dsm($values, 'values');

  $item_time_slots = cma_reservation_cache_get_item_time_slots($values);


  $vid = variable_get('reservations_grouping_vid', 0);
  $terms = taxonomy_get_tree($vid);
  $bucket_categories = array();
  $default_index = 1000000;
  foreach ($terms as $term) {
    $weight = variable_get($term->tid.'_rank_weight', $default_index++);
    $bucket_categories[$weight] = $term->name; 
  }
  ksort($bucket_categories);
  dsm($bucket_categories, 'bc');

  
  dsm(date('h:i:s'), 'form end');
  return $form;
}

/**
 * Function will return an array of retults form the cache table, each result
 * is a unique combination of item nid/slot id, content type, start, and end
 * time.
 *
 */
function cma_reservation_cache_get_item_time_slots($filter_values) {
  module_load_install('cma_reservation_cache');
  
  $types = array('bucket', 'resource');
  foreach($types as $type) {
    $args = array();
    
    $fields = cma_reservation_cache_main_cache_fields('resource');
    $fields = cma_reservation_cache_get_db_fields($fields);
    $field_list = implode(', ', array_keys($fields));
    $sql = "SELECT " . $field_list . " FROM cma_reservation_".$type."_cache ";
    
    $where_and = " WHERE ";
    foreach($filter_values as $filter => $value) {
      if ($filter == 'first_day') {
	if (!$value) {
	  $cache_start_object = new DateTime();
	  $hours = $cache_start_object->format('H');
	  $minutes = $cache_start_object->format('i');
	  $seconds = $cache_start_object->format('s');
	  $cache_start_object->modify('-'.$hours.' hours');
	  $cache_start_object->modify('-'.$minutes.' minutes');
	  $cache_start_object->modify('-'.$seconds.' seconds');
	}
	else {
	  $cache_start_object = new DateTime($value);
	}
	$cache_start_object->setTimeZone(new DateTimeZone('UTC'));
	$sql .= $where_and . " cache_slot_start_time >= :start";
	$args[':start'] = $cache_start_object->getTimestamp();
      }
      else if ($filter == 'last_day') {
	if (!$value && $cache_start_object) {
	  $cache_end_object = clone $cache_start_object;
	}
	else if (!$value) {
	  $cache_end_object = new DateTime();
	  $hours = $cache_end_object->format('H');
	  $minutes = $cache_end_object->format('i');
	  $seconds = $cache_end_object->format('s');
	  $cache_end_object->modify('-'.$hours.' hours');
	  $cache_end_object->modify('-'.$minutes.' minutes');
	  $cache_end_object->modify('-'.$seconds.' seconds');
	  $cache_end_object->setTimeZone(new DateTimeZone('UTC'));
	}
	else {
	  $cache_end_object = new DateTime($value);
	  $cache_end_object->setTimeZone(new DateTimeZone('UTC'));
	}
	$cache_end_object->modify('+'.'1 day');

	$sql .= $where_and . " cache_slot_start_time < :end ";
	$args[':end'] = $cache_end_object->getTimestamp();
      }
      
      $where_and = " AND ";
    }

    if ($type == 'resource') {
      $sql .= " ORDER BY content_type, item_nid, cache_slot_start_time ";
    }
    else {
      $sql .= " ORDER BY content_type, bucket_slot_id, cache_slot_start_time ";
    }
    
    $results = db_query($sql, $args);
    $chart_html = '';
    foreach ($results as $result) {
      $chart_html .= "<div>" . $result->field_reservation_cmptd_producer .
      	"</div>";
    }
  }  
}

/**
 * Function will return an array of filter values for the chart
 */
function cma_reservation_cache_chart_filter_values($filters) {
  $values = array();
  foreach ($filters as $filter) {
    $values[$filter] = filter_input(INPUT_GET, $filter);
  }
  return $values;
}
/**
 * Function will return an array of possible filters for the chart
 */
function cma_reservation_cache_chart_filters() {
  return array(
	       CMA_RESERVATION_CACHE_FIRST_DAY,
	       CMA_RESERVATION_CACHE_LAST_DAY,
	       CMA_RESERVATION_CACHE_DAY_BEGIN,
	       CMA_RESERVATION_CACHE_DAY_END,
	       CMA_RESERVATION_CACHE_INVENTORY,
	       CMA_RESERVATION_CACHE_ITEM_CATEGORY,
	       CMA_RESERVATION_CACHE_ITEM_TYPE,
	       CMA_RESERVATION_CACHE_ITEM_NID,
	       CMA_RESERVATION_CACHE_DOW,
	       CMA_RESERVATION_CACHE_COL_SPAN,
	       );
}


/**                                                                            
 * Helper function to get a single value off of a entity  
*/
function cma_reservations_cache_get_single_field_value($entity, $field_name,
						       $index = 'value') {
  if (isset($entity->{$field_name})) {
    $field = $entity->{$field_name};
    if (isset($field[LANGUAGE_NONE]) &&
        isset($field[LANGUAGE_NONE][0]) &&
        isset($field[LANGUAGE_NONE][0][$index])) {
      return $field[LANGUAGE_NONE][0][$index];
    }
  }
  return NULL;
}
