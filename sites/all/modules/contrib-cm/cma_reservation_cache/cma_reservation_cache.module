<?php

/**
 * @file
 * cma_reservation_cache functions
 */

/**
 * Implements hook_permission().
 */
function cma_reservation_cache_permission() {
}


/**
 * Implements hook_menu().
 */
function cma_reservation_cache_menu() {
  // Standard Administration settings.
    $items['admin/config/cma_reservation_cache'] =
    array(
	  'title' => 'CMA Reservation Cache',
	  'description' => 'Configure settings for CMA Reservation Cache.',
	  'page callback' => 'cma_reservation_cache_settings_home',
	  'access arguments' => array('administer reservations'),
	  'type' => MENU_NORMAL_ITEM,
	  );
  $items['admin/config/cma_reservation_cache/default'] =
    array(
	  'title' => 'Default Settings',
	  'description' => 'Configure settings for CMA Reservation Cache.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('cma_reservation_cache_settings_form'),
	  'access arguments' => array('administer reservations'),
	  );
  $items['admin/config/cma_reservation_cache/default'] =
    array(
	  'title' => 'Default Settings',
	  'description' => 'Configure settings for CMA Reservation Cache.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('cma_reservation_cache_settings_form'),
	  'access arguments' => array('administer reservations'),
	  );    
  // report and log views
  $items['admin/reports/cma_reservation_cache'] =
    array(
	  'title' => 'Reservation Cache Report and Tools',
	  'description' => t('View Cache Report and reload caches.'),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('cma_reservation_cache_report'),
	  'access arguments' => array('administer reservations'),
	  'type' => MENU_NORMAL_ITEM,
	  );
  
  return $items;
}

/**
 * Loads the general settings form.
 *
 * @see cma_reservation_cache_admin_form()
 */
function cma_reservation_cache_settings_home() {
  return drupal_get_form('cma_reservation_cache_settings_form');
}

/**
 * @param type $form
 * @return $form
 */
function cma_reservation_cache_settings_form($form) {
  $form = array();

  $form['project_fieldset'] =
    array(
	  '#type' => 'fieldset',
	  '#title' => t("Project Settings"),
	  );

  $fields_info = field_info_instances('node', 'reservations_reservation');
  $project_fields = array(0=>'<Select>');
  foreach ($fields_info as $field_name => $value) {
    $project_fields[$field_name] = $field_name;
  }
  asort($project_fields);

  $default_value = variable_get('cma_reservation_cache_project_field', '');
  $form['project_fieldset']['cma_reservation_cache_project_field']
    = array(
	    '#type' => 'select',
	    '#title' =>t('Which field on reservations is the project?'),
	    '#required' => FALSE,
	    '#options' => $project_fields,
	    '#default_value' => $default_value,
	    );

  
  return system_settings_form($form);
}

/**
 * Form gives information on cache and tools to reload it
 * @param type $form
 * @return $form
 */
function cma_reservation_cache_report($form) {
  $form = array();

  //number of content types
  //number of bucket slots
  //number of resource items
  //earliest date
  //latest date
  $form['cache']['start_date'] =
    array(
	  '#title' => 'Start of Cache Refresh',
	  '#type' => 'date_popup',
	  '#date_format' => "Y-m-d",
	  '#date_label_position' => 'within',
	  '#size' => 15,
	  '#default_value' => date("Y-m-d"),
	  '#description' => '',
	  );
  $form['cache']['end_date'] =
    array(
	  '#title' => 'End of Cache Refresh',
	  '#type' => 'date_popup',
	  '#date_format' => "Y-m-d",
	  '#date_label_position' => 'within',
	  '#size' => 15,
	  '#default_value' => date("Y-m-d"),
	  '#description' => '',
	  );

  $form['submit'] =
    array('#type' => 'submit',
	  '#value' => t('Clear and Reload Cache'),
	  );
  return $form;
}

/**
 *
 */
function cma_reservation_cache_report_submit($form, $form_state) {
  dsm('submit woo!');
  dsm($form_state, 'form state');
  $content_types = reservations_content_types();

  dsm($content_types, 'ct');

  //GRAB ALL NODES WHOSE CONTENT TYPES ARE RESERVABLE AND IS AN ACTUAL ITEM
  //NOT A PLACEHOLDER FOR A RESERVATION
  $query =
    "SELECT n.nid, n.title, n.type 
     FROM {node} n
     INNER JOIN {reservations_reservation_item_node} m ON n.vid = m.vid
     WHERE m.reservations_sub_type = :reservations_sub_type
     ORDER BY n.type ASC
    ";

  $args = array(':reservations_sub_type' => RESERVATIONS_SUB_TYPE_ITEM);
  $results = db_query($query, $args);

  $items = array();
  while ($result = $results->fetchObject()) {
    $items[$result->nid] = array('nid' => $result->nid,
				 'title' => $result->title,
				 'type' => $result->type,
				 );
  }
  dsm($items, 'items');

  $start = $form_state['values']['start_date'] . " 00:00:00";
  $end = $form_state['values']['end_date'] . " 23:59:59";
  
  $query =
    "SELECT d.entity_id as res_id, 
     rd.reservations_placeholder_nid as placeholder_nid,
     n.type as placeholder_type,  field_reservations_date_value as res_start,
     field_reservations_date_value2 as res_end
     FROM field_data_field_reservations_date d 
     INNER JOIN reservations_reservation_detail rd on rd.vid=d.revision_id
     INNER JOIN node n on n.nid=rd.reservations_placeholder_nid
     WHERE field_reservations_date_value2 >= :start
     AND field_reservations_date_value <= :end";

  $args = array(':start' => $start,":end" => $end);;
  $results = db_query($query, $args);

  $reserved_items = array();
  while ($result = $results->fetchObject()) {
    //is item a bucket or resource

    //get start time, if not at an even increment, roll back to one

    dsm($result, 'result');
    break;
  }
  
  //inventory
  //bucket_category
  //item_nid   
  //item_title    
  //bucket_slot_id
    
}