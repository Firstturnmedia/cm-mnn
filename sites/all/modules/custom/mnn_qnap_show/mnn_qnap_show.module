<?php

define('MNN_QNAP_SHOW_QUEUED','queued');
define('MNN_QNAP_SHOW_COMPLETED','completed'); 
define('MNN_QNAP_SHOW_MISSING_SHOW','missing_show');
define('MNN_QNAP_SHOW_MISSING_PROJECT','missing_project'); 
define('MNN_QNAP_SHOW_BAD_XML','bad_xml');
define('MNN_QNAP_SHOW_MULTIPLE_SHOWS','multiple_shows_on_airdate');
define('MNN_QNAP_SHOW_IGNORE','ignore');

/**
 * Implements hook_menu().
 */
function mnn_qnap_show_menu() {
  $items['admin/reports/qnap/xml_report'] = array(
    'title' => 'XML Metadata files on  QNAP',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mnn_qnap_show_form'),
    'access arguments' => array('administer internet_archive'),
    'weight' => 15,
  );
  $items['show/xml'] =
    array(
	  'title' => 'Potential Show/XML File Matches',
	  'access callback' => TRUE,
	  'page callback' => 'mnn_qnap_show_file_match_json',
	  'type' => MENU_CALLBACK,
	  );

  return $items;
}

/**
 * FORM PAGE FOR MANUALLY UPDATING SHOWS FROM QNAP
 */
function mnn_qnap_show_form($form, &$form_state) {
  $file_search = filter_input(INPUT_GET, 'filename');
  $status = filter_input(INPUT_GET, 'status');
  $project_nid = filter_input(INPUT_GET, 'project_nid');
    
  $form['mnn_qnap_show_filters'] =
    array(
	  '#type' => 'fieldset',
	  '#title' => 'Filters',
	  '#collapsible' => TRUE,
	  '#collapsed' => FALSE,
	  '#weight' => -10,
  );
      
  $form['mnn_qnap_show_filters']['mnn_qnap_show_filename'] =
    array(
	  '#type' => 'textfield',
	  '#title' => t('File Name'),
	  '#default_value' => $file_search,
	  );

  $form['mnn_qnap_show_filters']['mnn_qnap_show_status'] =
    array(
	  '#type' => 'select',
	  '#title' => t('Status'),
	  '#options' => mnn_qnap_show_get_statuses(),
	  '#default_value' => $status,
	  );

  $form['mnn_qnap_show_filters']['mnn_qnap_show_project_nid'] =
    array(
	  '#type' => 'textfield',
	  '#title' => t('Project ID'),
	  '#default_value' => $project_nid,
	  );

  $form['mnn_qnap_show_filters']['mnn_qnap_show_submit'] =
    array(
	  '#type' => 'submit',
	  '#value' => t('Filter Report'),
	  );

  $form['mnn_qnap_show_filters']['mnn_qnap_show_reload'] =
    array(
	  '#type' => 'submit',
	  '#value' => t('Load New Files'),
	  );


  $rows = $header = array();

  mnn_qnap_show_view_table_element($rows, $header);
  if ($rows) {
    $form['mnn_qnap_show_view'] =
      array(
	    '#type' => 'fieldset',
	    '#title' => 'Review Files and Process Queued Files',
	    '#collapsible' => TRUE,
	    '#collapsed' => FALSE,
	    
	    '#weight' => 10,
	    );
    $form['mnn_qnap_show_view']['mnn_qnap_show_submit'] =
    array(
	  '#prefix' => '<br/>',
	  '#suffix' => '<br/><br/>',
	  '#type' => 'submit',
	  '#value' => t('Update Selected Queued Shows'),
	  );
    
    $form['mnn_qnap_show_view']['mnn_qnap_show_table'] =
      array(
	    '#type' => 'tableselect',
	    '#header' => $header,
	    '#options' => $rows,
	    '#multiple' => TRUE,
	    '#suffix' => theme('pager'),
	    );
    $element = mnn_qnap_show_edit_table_element($form, $rows);
    
  }    
  dsm($rows, 'rows');
  
  return $form;
}

/**
 * FORM VALIDATE FOR MANUALLY UPDATING SHOWS FROM QNAP
 */
function mnn_qnap_show_form_validate($form, &$form_state) {
  global $submitted_values;
  global $existing_values;
  $submitted_values = $existing_values = array();
  $clicked_button = $form_state['clicked_button']['#value'];
  $xids = array();
  if ($clicked_button == 'Update Show Data') {
    foreach($form_state['input'] as $name=>$value) {
      $parts = explode('|', $name);
      if (count($parts) == 3 && $parts[0] == 'mnn_qnap_show') {
	$xid = $parts[1];
	$xids[] = $xid;
	$submitted_values[$xid] = isset($submitted_values[$xid]) ?
	  $submitted_values[$xid] : array();
	
	$field = $parts[2];
	$submitted_values[$xid][$field] =
	  isset($submitted_values[$xid][$field]) ?
	  $submitted_values[$xid][$field] : array();

	$submitted_values[$xid][$field] = $value;
      }
    }
  }

  $fields = mnn_qnap_show_get_fields();
  $xids = array_unique($xids);
  if ($xids) {
    $sql =
      "SELECT * from mnn_qnap_show where xid in (". implode(',',$xids).")";
    $results = db_query($sql);
    while ($result = $results->fetchObject()) {
      $xid = $result->xid;
      $existing_values[$xid] = isset($existing_values[$xid]) ?
	$existing_values[$xid] : array();

      foreach($fields as $field) {
	$existing_values[$xid][$field] =
	  isset($existing_values[$xid][$field]) ?
	  $existing_values[$xid][$field] : array();

	$existing_values[$xid][$field] = $result->{$field};
      }
    }
  }

  foreach($submitted_values as $xid => $values) {
    $pid = (isset($values['project_nid']) && $values['project_nid']) ?
      $values['project_nid'] : NULL;

    $use_ep_num =
      (isset($values['show_nid_epnum']) && $values['show_nid_epnum']) ?
      $values['show_nid_epnum'] : NULL;

    $show_value = (isset($values['show_nid']) && $values['show_nid']) ?
	$values['show_nid'] : NULL; 
    
    if ($pid && $use_ep_num) {
      if ($show_value) {
	$sid =
	  mnn_show_get_existing_show_for_episode_number($pid,NULL,$show_value);
	if ($sid) {
	  $submitted_values[$xid]['show_nid'] = $sid;
	}
      }
    }
    else {
      $sid = $show_value;
    }
    if ($pid) {
      $project = node_load($pid);
      if (!$project) {
	form_set_error('mnn_qnap_show|'.$xid.'|project_nid',
		       $pid . " is not a valid project ID");
      }
      else if ($show_value && !$sid && $use_ep_num) {
	form_set_error('mnn_qnap_show|'.$xid.'|show_nid',
		       $show_value .
		       " is not a valid episode number for project id $pid");
	
      }
    }
    else if (!$pid && $sid) {
      form_set_error('mnn_qnap_show|'.$xid.'|show_nid',
		     "Can't set show without a valid project."); 
    }    
  }
}

/**
 * FORM SUBMIT FOR MANUALLY UPDATING SHOWS FROM QNAP
 */
function mnn_qnap_show_form_submit($form, &$form_state) {
  $clicked_button = $form_state['clicked_button']['#value'];
  $xids = array();
  if ($clicked_button == 'Update Show Data') {
    mnn_qnap_show_form_submit_update_show_data($form, $form_state);
  }
  else if ($clicked_button == 'Update Selected Queued Shows') {
    mnn_qnap_show_form_submit_update_queued($form, $form_state);
  }
  else if ($clicked_button == 'Load New Files') {
    mnn_qnap_load_data();
  }

  $file_search = $form_state['values']['mnn_qnap_show_filename'];
  $status = $form_state['values']['mnn_qnap_show_status'];
  $project_nid = $form_state['values']['mnn_qnap_show_project_nid'];
  
  drupal_goto("admin/reports/qnap/xml_report",
	      array('query'=>array('filename' => $file_search,
				   'status' => $status,
				   'project_nid' => $project_nid)));

}

function mnn_qnap_show_form_submit_update_queued($form, &$form_state) {
  dsm($form_state, 'fs yo');
}
function mnn_qnap_show_form_submit_update_show_data($form, &$form_state) {
  
  global $submitted_values;
  global $existing_values;

  $changed_rows = array();  
  $fields = mnn_qnap_show_get_fields();
  $skips = array('airing_id', 'uid', 'airdate', 'multiple_shows',
		 'neighborhood', 'theme','xid', 'filename', 'status',
		 'file_contents');
    
  //loop through submitted values
  foreach ($submitted_values as $xid => $row) {
    $changed = FALSE;
    //check to see if submitted is different than existing
    foreach ($fields as $field) {
      if (in_array($field, $skips)) {
	continue;
      }
      $field_value = isset($row[$field]) && $row[$field] ?
	trim($row[$field]) : NULL;

      $existing_value = $existing_values[$xid][$field] ?
	trim($existing_values[$xid][$field]) : NULL;
      
      if ($field_value != $existing_value) {
	$changed = TRUE;
	$existing_values[$xid][$field] = $submitted_values[$xid][$field];
      }
    }
    if ($changed) {
      $changed_rows[$xid] = $existing_values[$xid];
      if ($existing_values[$xid]['project_nid']) {
	$existing_values[$xid]['show_nid'] = NULL;
	$changed_rows[$xid]['status'] = MNN_QNAP_SHOW_MISSING_PROJECT;
      }
      else if ($existing_values[$xid]['show_nid']) {
	$changed_rows[$xid]['status'] = MNN_QNAP_SHOW_MISSING_SHOW;
      }
      else {
	$changed_rows[$xid]['status'] = MNN_QNAP_SHOW_QUEUED;
      }
    }
  }
  mnn_qnap_write_records($changed_rows, TRUE);
  dsm($changed_rows, 'cr');
}

/**
 *Function fills $rows and $header for the table when in "edit" mode
 */
function mnn_qnap_show_edit_table_element(&$form, $rows) {
  $form['mnn_qnap_show_edit'] =
    array(
	  '#type' => 'fieldset',
	  '#title' => 'Modify Data from the XML file name and contents.',
	  '#collapsible' => TRUE,
	  '#collapsed' => TRUE,
	  //FIXME, RECOLLAPSE
	  //'#collapsed' => FALSE,
	  '#weight' => 0,
	  );

  $form['mnn_qnap_show_edit']['mnn_qnap_edit_submit1'] =
    array(
	  '#prefix' => '<br/>',
	  '#suffix' => '<br/><br/>',
	  '#type' => 'submit',
	  '#value' => t('Update Show Data'),
	  );
  
  $fields = mnn_qnap_show_get_fields();
  $skips = array('airing_id', 'uid', 'airdate', 'multiple_shows',
		 'neighborhood', 'theme');
  $statics = array('xid', 'filename', 'status', 'file_contents');
  $fields = array(-1 => 'Ignore') + $fields;
  $header_count = count($fields) - count($skips);
  $header_counter = 0;

  foreach ($fields as $field) {
    if (in_array($field, $skips)) {
      continue;
    }
    $field = str_replace('_tid', '', $field);
    $field = str_replace('_nid', '', $field);
    $header_counter ++;
    $var_name = "_".$field."_header";
    if ($header_counter == 1) {
      $prefix = '<table><thead><th>';
    }
    else {
      $prefix = "<th>";
    }
    if ($header_count == $header_counter) {
	$suffix = "</th></thead>";
    }
    else {
      $suffix = "</th>";
    }
    
    $form['mnn_qnap_show_edit'][$var_name] =
      array('#markup' => $field, '#prefix' => $prefix, '#suffix' => $suffix);
    
  }
  $even_odd = 'odd';
  $row_count = count($rows);
  $row_counter = 0;  
  foreach($rows as $filename => $row) {
    $row_counter ++;
    $ignore_value = $row['ignore'] ? "Ignored" : "";
    $row = array('ignore' => $ignore_value) + $row;
    $cell_count = count($row) - count($skips);
    $cell_counter = 0;
    foreach($row as $field => $value) {
      if (in_array($field, $skips)) {
	continue;
      }
      $cell_counter ++;
      $element_name = 'mnn_qnap_show|' . $row['xid'] . '|' . $field;
      if ($cell_counter == 1) {
	$even_odd = ($even_odd == 'odd') ? 'even' : 'odd';
	$prefix = "<tr class=$even_odd><td>";
      }
      else {
	$prefix = "<td>";
      }
      if ($row_count == $row_counter &&
	  $cell_count == $cell_counter) {
	$suffix = "</td></tr></table>";
      }
      else if ($cell_count == $cell_counter) {
	$suffix = "</td></tr>";
      }
      else {
	$suffix = "</td>";
      }
      $current_node = NULL;
      if ($value && strpos($field, '_nid') > 0) {
	$current_node = node_load($value);
	if ($current_node) {
	  if ($current_node->type == 'cm_show') {
	    $episode_number = 
	      mnn_qnap_show_get_single_field_value($current_node,
						   'field_episode_number',
						   'value');
	    $link = l("Current Show Ep# $episode_number", 'node/' . $value); 

	  }
	  else if ($current_node->type == 'cm_project') {
	    $link = l("Current Project: $value", 'node/' . $value); 

	  }
	  $current_node->field_description = $link;
	}
      }
      if (in_array($field, $statics)) {
	$form['mnn_qnap_show_edit'][$element_name] =
	  array('#markup' => htmlspecialchars($value));
      }
      else {
	if ($field == 'ignore') {
	  $default_value = $row['status'] == MNN_QNAP_SHOW_IGNORE ?
	    1 : 0;
	  $form['mnn_qnap_show_edit'][$element_name] =
	    array(
		  '#type' => 'radio',
		  '#title' => 'Ignore?',
		  '#default_value' => $default_value,
		  );

	}
	else if ($row['project_nid'] && $field =='show_nid'){
	  $default_value = $row['show_nid'];
	  if ($row['multiple_shows']) {
	    $options = unserialize($row['multiple_shows']);
	    $options[0] = '- Select a value -';
	    asort($options);
	  }
	  else {
	    $options =
	      mnn_airing_get_shows_for_project_airing($row['project_nid'],
						      TRUE);
	  }
	  $form['mnn_qnap_show_edit'][$element_name] =
	    array(
		  '#type' => 'select',
		  '#title' => 'Select Show:',
		  '#options' => $options,
		  '#default_value' => $default_value,
		  );
	  if ($value && $current_node) {
	    $form['mnn_qnap_show_edit'][$element_name]['#description'] =
	      $current_node->field_description;
	  }
	}
	else if ($field == 'neighborhood_tid' ||
		 $field == 'theme_tid') {
	  $alt = str_replace('_tid', '', $field);
	  $vid = ($field == 'neighborhood_tid') ? 31 : 32;
	  $label = ($field == 'neighborhood_tid') ? "Select Neighborhood:" :
	    "Select Theme:";
	  $options =
	    db_query("SELECT tid, name ".
		     "FROM {taxonomy_term_data} ".
		     "WHERE vid = $vid")->fetchAllKeyed();
	  $options = array('0' => '- Select a value -') + $options;
	  $description = $row[$alt] ? 'Current Value: '.
	    $row[$alt] : '';
	  $form['mnn_qnap_show_edit'][$element_name] =
	    array(
		  '#type' => 'select',
		  '#title' => $label,
		  '#options' => $options, 
		  '#description' => $description,
		  '#default_value' => $row[$field],
		  );
	    

	}
	//SHOW FORM ELEMENT
	else {
	  $form['mnn_qnap_show_edit'][$element_name] =
	    array(
		  '#type' => 'textfield',
		  '#default_value' => $value,
		  '#size' => 15,
		  );
	  if ($field == 'project_nid') {
	    $form['mnn_qnap_show_edit'][$element_name]['#title'] =
	      'Project ID (numbers only)';
	    if ($value && $current_node) {
	      $form['mnn_qnap_show_edit'][$element_name]['#description'] =
		$current_node->field_description;
	    }
	  }
	  else if ($field == 'show_nid') {
	    $form['mnn_qnap_show_edit'][$element_name]['#title'] =
	      'Enter Episode # (numbers only)';
	    if ($row['show_nid']) {
	      $show = node_load($row['show_nid']);
	      $episode_number = 
		mnn_qnap_show_get_single_field_value($show,
						     'field_episode_number',
						     'value');

	      $form['mnn_qnap_show_edit'][$element_name]['#default_value'] =
		$episode_number;
	      if ($value && $current_node) {
		$form['mnn_qnap_show_edit'][$element_name]['#description'] =
		  $current_node->field_description;
	      }
	    }
	    $form['mnn_qnap_show_edit'][$element_name."_epnum"] =
	      array(
		    '#type' => 'hidden',
		    '#value' => 1,
		    );
	  }
	  else if ($field == 'title') {
	    $form['mnn_qnap_show_edit'][$element_name]['#title'] =
	      'Show Title:';
	  }
	  else if ($field == 'short_description') {
	    $form['mnn_qnap_show_edit'][$element_name]['#title'] =
	      'Short Description:';
	    $form['mnn_qnap_show_edit'][$element_name]['#size'] = 40;
	      
	    $form['mnn_qnap_show_edit'][$element_name]['#maxlength'] = 1000;
	  }	  
	}
      }
      $form['mnn_qnap_show_edit'][$element_name]['#prefix'] = $prefix;
      $form['mnn_qnap_show_edit'][$element_name]['#suffix'] = $suffix;
    }
  }

  $form['mnn_qnap_show_edit']['mnn_qnap_edit_submit2'] =
    array(
	  '#prefix' => '<br/>',
	  '#suffix' => '<br/><br/>',
	  '#type' => 'submit',
	  '#value' => t('Update Show Data'),
	  );

}
/**
 * Function fills $rows and $header for the table when in "view" mode
 */
function mnn_qnap_show_view_table_element(&$rows, &$header) {
  $file_search = filter_input(INPUT_GET, 'filename');
  $status = filter_input(INPUT_GET, 'status');
  $project_nid = filter_input(INPUT_GET, 'project_nid');
  
  $select = db_select('mnn_qnap_show', 's')
    ->extend('PagerDefault')
    ->extend('TableSort');
  
  $fields = mnn_qnap_show_get_fields();
  $header = array();
  foreach ($fields as $field) {
    $header[$field] =
      array('data' => $field, 'field' => $field, 'sort' => 'ASC');
  }

  $select->fields('s', $fields)->limit(30)->orderByHeader($header);

  if ($file_search) {
    $select->condition('filename', '%' . db_like($file_search) . '%', 'LIKE'); 
  }
  if ($status) {
    $select->condition('status', $status); 
  }
  if ($project_nid) {
    $select->condition('project_nid', $project_nid); 
  }

  $results = $select->execute();

  foreach($results as $result) {
    $row = array();
    
    foreach ($fields as $field) {
      $value = $result->{$field};
      $row[$field] = $value;
    }
    $rows[$result->filename] = $row;
  }
}
/**
 * Function called by show/xml menu hook. This menu item will be called from
 * JQUERY WHEN WE SHOW A DROPDOWN (OR SINGLE MATCH) OF XML FILES TO MATCH
 * WITH NEWLY CREATED SHOWS
 */
function mnn_qnap_show_file_match_json() {
  $exact_matches = $project_matches = $bad_file_matches = array();
  
  $airing_id = filter_input(INPUT_GET, 'airing_id');
  $airings = entity_load('airing', array($airing_id));
  $airing = array_pop($airings);
  if ($airing) {
    $date =
      mnn_qnap_show_get_single_field_value($airing,
					   'field_airing_date',
					   'value');

    $pid = mnn_qnap_show_get_single_field_value($airing,
						'field_airing_project_ref',
						'target_id');

    $airdate = date('Y-m-d', strtotime($date)) . ' 00:00:00';
    
    $args = array(":pid" => $pid,
		  ":airdate" => $airdate);
    $sql =
      "SELECT xid, filename, project_nid, airdate ".
      "FROM mnn_qnap_show " .
      "WHERE show_nid IS NULL ".
      "AND (".
      "  (airdate = :airdate AND project_nid=:pid ) OR ".
      "  (project_nid=:pid ) OR ".
      "  (project_nid is NULL)".
      ") ".
      "ORDER BY project_nid = :pid desc, airdate desc, xid desc";

    $orphans = $project_matches = $exact_matches = array();
    $results = db_query($sql, $args);
    while ($result = $results->fetchObject()) {
      if ($result->airdate == $airdate) {
	$exact_matches[$result->xid] = $result->filename;
      }
      else if ($result->project_nid == $pid){ 
	$project_matches[$result->xid] = $result->filename;
      }
      else {
	$orphans[$result->xid] = $result->filename;
      }
    }
  }
  if ($exact_matches) {
    $data =
      array(0=>'- Select -') +
      array('exact' => '----EXACT MATCH----') +
      $exact_matches + array('project' => '----PROJECT MATCHES----') +
      $project_matches + array('orphan' => '----UNMATCHED FILES----') +
      $orphans;
  }
  else if ($project_matches) {
    $data =
      array(0=>'- Select -') +
      array('project' => '----Project Matches----') +
      $project_matches +
      array('orphan' => '----Unmatched Files----') + $orphans;
  }
  else {
    $data = array(0=>'- Select -') + $orphans;
  }
  $ret = array();
  foreach ($data as $k=>$v) {
    $ret[] = array('id'=>$k, 'label'=>$v);
  }
  
  drupal_json_output($ret);
  drupal_exit();

}
function mnn_qnap_show_cron() {
  //FIXME REMOVE WHEN CRON IS READY
  return;
  mnn_qnap_load_data();
  mnn_qnap_process_queued();
}

function mnn_qnap_process_queued() {
  $records = array();
  $fields = mnn_qnap_show_get_fields();
  $sql = "SELECT * FROM  {mnn_qnap_show} WHERE status=".MNN_QNAP_SHOW_QUEUED;
  $results = db_query($sql);
  while($result = $results->fetchObject()) {
    $record = array();
    foreach ($fields as $field) {
      $record[$field] = $result->{$field};
    }
    $records[$result->xid] = $record;
  }
  mnn_qnap_write_records($records, TRUE);
}
function mnn_qnap_show_get_statuses() {
  return array(
	       0 => "- Select a value -",
	       MNN_QNAP_SHOW_QUEUED => MNN_QNAP_SHOW_QUEUED, 
	       MNN_QNAP_SHOW_COMPLETED	=> MNN_QNAP_SHOW_COMPLETED,
	       MNN_QNAP_SHOW_MISSING_SHOW => MNN_QNAP_SHOW_MISSING_SHOW,
	       MNN_QNAP_SHOW_MISSING_PROJECT => MNN_QNAP_SHOW_MISSING_PROJECT,
	       MNN_QNAP_SHOW_BAD_XML => MNN_QNAP_SHOW_BAD_XML,
	       MNN_QNAP_SHOW_MULTIPLE_SHOWS => MNN_QNAP_SHOW_MULTIPLE_SHOWS,
	       MNN_QNAP_SHOW_IGNORE	=> MNN_QNAP_SHOW_IGNORE,
	       );

}
function mnn_qnap_show_get_fields() {
  return array(
	       'xid',
	       'filename',
	       'status',
	       'project_nid',
	       'show_nid',
	       'airing_id',
	       'uid',
	       'airdate',
	       'multiple_shows',
	       'title',
	       'short_description',
	       'neighborhood',
	       'neighborhood_tid',
	       'theme',
	       'theme_tid',
	       'file_contents', 
	       );
}

/**
 * FUNCTION WRITES A ROW TO THE mnn_qnap_show TABLE
 */
function mnn_qnap_show_write_to_db($file_data) {
  $fields = mnn_qnap_show_get_fields();
  $last_index = count($fields);
  $count = 0;
  $sql = "INSERT INTO {mnn_qnap_show} (";
  foreach($fields as $field) {
    $count ++;
    $sql .= $field;
    if ($last_index != $count) {
      $sql .= ",";
    }
  }
  $sql .= ") VALUES (";

  $count = 0;
  foreach($fields as $field) {
    $count ++;
    $sql .= ':' . $field;
    if ($last_index != $count) {
      $sql .= ",";
    }
  }
  $sql .= ")";
  
  $args = array();
  foreach($fields as $field) {
    $index = ':' . $field;
    $args[$index] = $file_data[$field];
  }
  db_query($sql, $args);
}
/**
 * function gets a row in the mnn_qnap_show table by its xid
 */
function mnn_qnap_show_get_record($xid) {
  $ret = array();
  $sql = "SELECT * from mnn_qnap_show where xid = :xid";
  $result = db_query($sql, array(':xid' => $xid))->fetchObject();
  if ($result) {
    $fields = mnn_qnap_show_get_fields();
    foreach ($fields as $field) {
      $ret[$field] = $result->{$field};
    }
  }
  return $ret;
}

/**
 * FUNCTION IS PASSED AN ARRY OF RECORDS, WILL UPDATE mnn_qnap_show TABLE
 * AND UPDATE THE SHOW IF THE $update_show PARAMETER IS SET
 */
function mnn_qnap_write_records($records, $update_show = FALSE) {

  dsm($records, 'yo!');


  foreach ($records as $xid => $record) {
    if ($update_show && $record['status'] == MNN_QNAP_SHOW_QUEUED) {
      $show = node_load($record['show_nid']);
      if ($record['title']) {
	$show->field_show_public_title[LANGUAGE_NONE][0]['value'] =
	  $record['title'];
      }
      if ($record['neighborhood_tid']) {
	$show->field_show_neighborhood[LANGUAGE_NONE][0]['tid'] =
	  $record['neighborhood_tid'];
      }
      if ($record['theme_tid']) {
	$show->field_show_theme[LANGUAGE_NONE][0]['tid'] =
	  $record['theme_tid'];
      }
      if ($record['short_description']) {
	$show->field_qnap_original_description[LANGUAGE_NONE][0]['value'] =
	  $show->field_short_description[LANGUAGE_NONE][0]['value'];
	$show->field_short_description[LANGUAGE_NONE][0]['value'] =
	  $record['short_description'];
      }
      $show->field_qnap_updated_[LANGUAGE_NONE][0]['value'] = 1;
      $show->field_qnap_file_contents[LANGUAGE_NONE][0]['value'] =
	$record['file_contents'];

      field_attach_update('node', $show);
      $record['status'] = MNN_QNAP_SHOW_COMPLETED;
    }

    $sql = "UPDATE {mnn_qnap_show} SET ";
    $fields = mnn_qnap_show_get_fields();
    $field_counter = 0;
    $args = array(':xid' => $xid);
    foreach ($fields as $field) {
      if  ($field == 'xid') {
	continue;
      }
      $field_counter++;
      if ($field_counter != 1) {
	$sql .= ", ";
      }
      $sql .= " " . $field . " = :" . $field;
      $index = ':' . $field;
      $args[$index] = $record[$field] ? $record[$field] : 'NULL';
    }
    $sql .= " WHERE xid = :xid ";
    mnn_data_massage_log_query($sql, $args);
  }

}
/**
 * FUNCTION LOOKS AT QNAP FOR SHOW METADATA FILES, FILLS UP ARRAYS FOR
 * REPORTS AND UPDATING
 */
function mnn_qnap_load_data() {
  $extensions = array(//'.txt',
		      '.xml'
		      );

  //build url to the files directory
  $prefix = "metadata";
  $remote_url = variable_get('internet_archive_server_url', FALSE);
  if (!$remote_url) {
    return;
  }
  
  $url_parts = parse_url($remote_url);
  $remote_file_directory_url = "http://" . $url_parts['host'] . '/' . $prefix;
  
  //grab all file names from directory
  $html = file_get_contents($remote_file_directory_url);
  //parse the html
  $count = preg_match_all('/<a href=\"([^\"]*)\">(.*)<\/a>/iU',
			  $html, $files);


  for ($i = 0; $i < $count; $i++) {
    $valid = $upos = $dpos = $pid = $date = $project = $airdate = FALSE;
    
    $file = urldecode($files[1][$i]);
    
    $correct_extension = FALSE;
    foreach ($extensions as $extension) {
      $ext_length = strlen($extension);
      $file_length = strlen($file);
      $ext_pos =
	strpos($file, $extension, ($file_length - $ext_length - 1));

      if ($ext_pos) {
	$correct_extension = TRUE;
      }
    }
    if (!$correct_extension) {
      continue;
    }

    $sql = "SELECT count(1) from mnn_qnap_show where filename = :file";
    $in_db = db_query($sql, array(':file' => $file))->fetchField();
    if ($in_db) {
      continue;
    }

    //WE'VE GOTTEN THIS FAR, FROM NOW ON WRITE TO DB
    $file_data = array(
		       'filename' => $file,
		       'project_nid' => NULL,
		       'show_nid' => NULL,
		       'airing_id' => NULL,
		       'uid' => NULL,
		       'airdate' => NULL,
		       'status' => MNN_QNAP_SHOW_QUEUED,
		       'title' => NULL,
		       'short_description' => NULL,
		       'neighborhood' => NULL,
		       'theme' => NULL,
		       'theme_tid' => NULL,
		       'neighborhood_tid' => NULL,
		       'file_contents' => NULL,
		       'mulitple_airings' => NULL,
		  );
    preg_match("~^(\d+)~", $file, $match);
    $pid = $match[1];

    $first_digit = substr($pid, 0, 1);
    if (!$first_digit) {
      $pid = NULL;
      $file_data['status'] = MNN_QNAP_SHOW_MISSING_PROJECT;
    }
    
    if ($pid) {
      $delim_pos = strlen($pid);
      $delim = substr($file, $delim_pos, 1);

      if ($delim != '.' && $delim != '-' && $delim != '_') {
	$pid = NULL;
	$file_data['status'] = MNN_QNAP_SHOW_MISSING_PROJECT;
      }
    }

    if ($pid) {
      $file_data['project_nid'] = $pid;
      $bad_date = FALSE;
      
      $date_pos = strlen($pid) + 1;
      $file_part = substr($file, $date_pos);

      preg_match("~^(\d+)~", $file_part, $match);
      $date = $match[1];
      if (!$date) {
	$date = NULL;
	$file_data['status'] = MNN_QNAP_SHOW_MISSING_SHOW;
      }
    }
    if ($date) {
      $date_length = strlen($date);
     
      if ($date_length == 1) {
	$pos = $date_pos + 2;
	$file_part = substr($file, $pos);
	preg_match("~^(\d+)~", $file_part, $match);
	$date .= $match[1];
	$date_length = strlen($date);
      }
      if ($date_length == 2) {
	$pos = $date_pos + 3;
	$file_part = substr($file, $pos);
	preg_match("~^(\d+)~", $file_part, $match);
	$date .= $match[1];
	$date_length = strlen($date);
      }

      $month = $day = $year = 0;
      switch ($date_length) {
      case 3:
	$month = substr($date, 0, 1);
	$day = substr($date, 1, 2);
	break;
      case 4:
	$month = substr($date, 0, 2);
	$day = substr($date, 2, 2);
	break;
      case 6:
	$month = substr($date, 0, 2);
	$day = substr($date, 2, 2);
	$year = '20' . substr($date, 4, 2);
	break;
      case 8:
	$month = substr($date, 0, 2);
	$day = substr($date, 2, 2);
	$year = substr($date, 4, 4);
	break;
      default:
	$bad_date = TRUE;
	break;
      }

      if (!$month || $month < 1 || $month > 12) {
	$bad_date = TRUE;
      }
      else if (!$day || $day < 1 || $day > 31) {
	$bad_date = TRUE;
      }
      else if ($year) {
	$cur_year = date('Y');
	if ($year < ($cur_year -1) || $year > ($cur_year + 1)) {
	  $bad_date = TRUE;
	}
      }
      else {
	$cur_year = date('Y');
	$prev_year = $cur_year - 1;
	$next_year = $cur_year + 1;
	
	$date_string_suffix = '-' . $month . '-' . $day;
	
	$cur = strtotime($cur_year . $date_string_suffix);
	$prev = strtotime($prev_year . $date_string_suffix);
	$next = strtotime($next_year . $date_string_suffix);
	
	$dates = array($prev, $cur, $next);
	$now = strtotime('now');
	$low_diff = 365*24*60*60; //no valid diff will be less than a year
	
	foreach($dates as $date_ts) {
	  //find the nearest date
	  if (abs($date_ts - $now) < $low_diff) {
	    $low_diff = abs($date_ts - $now);
	    //last $airdate found will be our match
	    $year = date('Y', $date_ts);
	  }
	}	  
      }
    
      if ($bad_date) {
	$date = NULL;
	$file_data['status'] = MNN_QNAP_SHOW_MISSING_SHOW;
      }
      else {
	$airdate = $year . '-' . $month . '-' . $day;
	
	$file_data['airdate'] = $airdate;
	//find airing for project for airdate
	$range_end = mnn_qnap_show_add_to_date(strtotime($airdate), 'day',1);
	$fill_tid = 970;
	
	$sql =
	  "SELECT ad.entity_id as airing_id, " .
	  "s.field_airing_show_ref_target_id as show_nid " .
	  "FROM field_data_field_airing_date ad " .
	  "INNER JOIN field_data_field_airing_project_ref ap " .
	  "ON ap.entity_id=ad.entity_id " .
	    "INNER JOIN field_data_field_airing_show_ref s " .
	  "ON s.entity_id=ad.entity_id " .
	  "LEFT JOIN field_data_field_airing_type at " .
	  "ON at.entity_id=ad.entity_id " .
	  "WHERE ap.field_airing_project_ref_target_id = " . $pid . " " .
	  "AND ad.field_airing_date_value >= '" . $airdate . "' " .
	  "AND ad.field_airing_date_value < '" .
	  date('Y-m-d 00:00:00', $range_end). "' " .
	  "AND at.field_airing_type_tid != " . $fill_tid;

	
	//execute query
	$results = db_query($sql);
	$has_airing = FALSE;
	$result_shows = array();
	while($result = $results->fetchObject()) {
	  $airings = entity_load('airing', array($result->airing_id));
	  $airing = array_pop($airings);
	  if ($airing) {
	    $airing_id = $result->airing_id;
	    $show_nid = $result->show_nid;
	    $has_airing = TRUE;
	    $title =
	      mnn_qnap_show_get_single_field_value($airing,
						   'field_airing_title',
						   'value');
	    $result_shows[$result->show_nid] = $title;
	  }

	}

	if (!$has_airing) {
	  $file_data['status'] = MNN_QNAP_SHOW_MISSING_SHOW;
	}
	else if (count($result_shows) > 1) {
	  $file_data['multiple_shows'] = serialize($result_shows);
	  $file_data['status'] = MNN_QNAP_SHOW_MULTIPLE_SHOWS;
	}
	else if ($airing_id) {
	  $file_data['airing_id'] = $airing_id;
	  $file_data['show_nid'] = $show_nid;
	}
      }
    }

    $path = $remote_file_directory_url .'/'. urlencode($file);
    $path = str_replace('+','%20',$path);
    
    $text = file_get_contents($path);

    $file_data['file_contents'] = $text;
    if ($text) {
      $text = str_replace('Phone#', 'Phone', $text);
      $text = str_replace('<UserAcct></UserAcct>',
			  '<UserAcct>anonymous</UserAcct>', $text);
      $text = trim($text);
      libxml_use_internal_errors(true);
      $xml = simplexml_load_string($text);
      if ($xml === false) {
	//dsm('**********************************');
	//dsm($xml, 'xml');
	//dsm($text, 'text');
	//dsm("Failed loading XML");
	foreach(libxml_get_errors() as $error) {
	  //dsm($error->message, 'msg:');
	}
	$file_data['status'] = MNN_QNAP_SHOW_BAD_XML;
      }
      else {
	foreach($xml->children() as $child) {
	  switch($child->getName()) {
	  case 'EpisodeTitle':
	    $file_data['title'] = $child;
	    break;
	  case 'Description':
	    $file_data['short_description'] = $child;
	    break;
	  case 'ThemeProgramming':
	    $file_data['theme'] = $child;
	    if ($child) {
	      $query = new EntityFieldQuery;
	      $term = NULL;
	      $terms =
		$query->entityCondition('entity_type', 'taxonomy_term')
		->propertyCondition('name', $child)
		->propertyCondition('vid', 32)
		->execute();
	      if ($terms) {
		$term = array_shift($terms['taxonomy_term']);
	      }
	      if ($term) {
		$file_data['theme_tid'] = $term->tid;
	      }
	    }	    
	    break;
	  case 'Neighborhood':
	    $file_data['neighborhood'] = $child;
	    if ($child) {
	      $query = new EntityFieldQuery;
	      $term = NULL;
	      $terms =
		$query->entityCondition('entity_type', 'taxonomy_term')
		->propertyCondition('name', $child)
		->propertyCondition('vid', 31)
		->execute();
	      if ($terms) {
		$term = array_shift($terms['taxonomy_term']);
	      }
	      if ($term) {
		$file_data['neighborhood_tid'] = $term->tid;
	      }
	    }

	    break;
	  }
	}
      }
    }
   
    mnn_qnap_show_write_to_db($file_data);
  }
}
/*
 * This is a util funtion that allows you to add x amount of units to
 * a date. I.e. i want to add 4 weeks or 3 days to a date.
 * 
 * The important thing in this function is it takes into affect
 * DST so that if i add 1 week to Monday at 4pm, i get the next week at 
 * 4pm regardless of if there was DST change within the week.
 * 
 * @param $time the time to which to add 
 * @param $type will be either hour, day or week
 * @param $multiplier the amount of hours, days, or weeks
 */
function mnn_qnap_show_add_to_date($time, $type, $multiplier) {
   if (!$multiplier) {
     $multiplier = 1;
   }

   if ($type == "week") {
     $new_time = $time + $multiplier*7*24*60*60;
   }
   else if ($type == "hour") {
     $new_time = $time + $multiplier*60*60;
   }
   else if ($type == "day") {
     $new_time = $time + $multiplier*24*60*60;
   }
   if (date('I', $time) != date('I', $new_time)) {
      if (date('I', $new_time)) {
        $new_time = $new_time - 60*60;
      }
      else if (date('I', $time)) {
        $new_time = $new_time + 60*60;
      }
   }
   return $new_time;
}

/**                                                                            
 * Helper function to get a single value off of a entity  
*/
function mnn_qnap_show_get_single_field_value($entity, $field_name,
						$index = 'value') {
  if (isset($entity->{$field_name})) {
    $field = $entity->{$field_name};
    if (isset($field[LANGUAGE_NONE]) &&
        isset($field[LANGUAGE_NONE][0]) &&
        isset($field[LANGUAGE_NONE][0][$index])) {
      return $field[LANGUAGE_NONE][0][$index];
    }
  }
  return NULL;
}

