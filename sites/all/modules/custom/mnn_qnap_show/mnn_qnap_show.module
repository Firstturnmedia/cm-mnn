<?php

/**
 * Implements hook_menu().
 */
function mnn_qnap_show_menu() {
  $items['admin/config/internet_archive/update_shows_from_qnap'] = array(
    'title' => 'Update Shows from data on QNAP',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mnn_qnap_show_update_page'),
    'access arguments' => array('administer internet_archive'),
    'weight' => 15,
  );

  return $items;
}

/**
 * FORM PAGE FOR MANUALLY UPDATING SHOWS FROM QNAP
 */
function mnn_qnap_show_update_page($form, &$form_state) {

  $harvested_files = $bad_file_names = $bad_projects = $found_shows =
    $missing_shows = $multiples = $already_updated = $empty = array();

  mnn_qnap_load_data($harvested_files, $bad_file_names, $bad_projects,
		     $found_shows, $missing_shows, $multiples,
		     $already_updated, $empty);

  $_SESSION['mnn_qnap_found_shows'] = $found_shows;
  $_SESSION['mnn_qnap_multiples'] = $multiples;
  $_SESSION['mnn_qnap_already_updated'] = $already_updated;
  
  $report = array('found_shows' => $found_shows,
		  'multiples' => $multiples,
		  'empty' => $empty, 
		  'already_updated' => $already_updated,
		  'missing_shows' => $missing_shows,
		  'bad_file_names' => $bad_file_names,
		  'harvested_file_names' => $harvested_files,
		  'bad_projects' => $bad_projects );

  dsm($report, 'report');

  
  $form['mnn_qnap_show_submit'] =
    array(
	  '#type' => 'submit',
	  '#value' => t('Update Shows'),
	  );

    $form['mnn_qnap_show_header'] =
    array('#markup' =>
	  "</br><a href='/admin/reports/qnap/show_report'>See Report</a>");

  return $form;
}
/**
 * FORM SUBMIT FOR MANUALLY UPDATING SHOWS FROM QNAP
 */
function mnn_qnap_show_update_page_submit($form, &$form_state) {
  $found_shows = $_SESSION['mnn_qnap_found_shows'];
  $multiples = $_SESSION['mnn_qnap_multiples'];

  mnn_qnap_update_shows($found_shows, $multiples);
}

function mnn_qnap_show_cron() {
  //FIXME REMOVE WHEN CRON IS READY
  return;
  $harvested_files = $bad_file_names = $bad_projects = $found_shows =
    $missing_shows = $multiples = $already_updated = $empty = array();

  mnn_qnap_load_data($harvested_files, $bad_file_names, $bad_projects,
		     $found_shows, $missing_shows, $multiples,
		     $already_updated, $empty);
  mnn_qnap_update_shows($found_shows, $multiples);

  
}

function mnn_qnap_update_shows($found_shows, $multiples) {
  if ($found_shows) {
    foreach($found_shows as $file=>$info) {
      $show = node_load($info['show_id']);
      $show->field_short_description[LANGUAGE_NONE][0]['value'] =
	$info['new'];
      $show->field_qnap_updated_[LANGUAGE_NONE][0]['value'] = 1;
      $show->field_qnap_needs_review[LANGUAGE_NONE][0]['value'] = 0;
      $show->field_qnap_file_contents[LANGUAGE_NONE][0]['value'] =
	$info['raw'];
      $show->field_qnap_original_description[LANGUAGE_NONE][0]['value'] =
	$info['current'];
      node_save($show);	      
    }
  }
  if ($multiples) {
    foreach($multiples as $file => $airdates) {
      foreach($airdates as $airdate => $airings) {
	foreach ($airings as $show_id => $info) {
	  $show = node_load($show_id);
	  if ($show) {
	    $raw =
	      mnn_qnap_show_get_single_field_value($show,
						   'field_qnap_file_contents',
						   'value');
	    if (!$raw) {
	      $show->field_qnap_updated_[LANGUAGE_NONE][0]['value'] = 0;
	      $show->field_qnap_needs_review[LANGUAGE_NONE][0]['value'] = 1;
	      $show->field_qnap_file_contents[LANGUAGE_NONE][0]['value'] =
		$info['raw'];
	      node_save($show);
	    }
	  }
	}
      }
    }
  }
}
/**
 * FUNCTION LOOKS AT QNAP FOR SHOW METADATA FILES, FILLS UP ARRAYS FOR
 * REPORTS AND UPDATING
 */
function mnn_qnap_load_data(&$harvested_files, &$bad_file_names,&$bad_projects,
			    &$found_shows, &$missing_shows, &$multiples,
			    &$already_updated, &$empty) {

  //build url to the files directory
  $prefix = "files/show_descriptions";
  $remote_url = variable_get('internet_archive_server_url', FALSE);
  if (!$remote_url) {
    return;
  }
  
  $url_parts = parse_url($remote_url);
  $remote_file_directory_url = "http://" . $url_parts['host'] . '/' . $prefix;

  //grab all file names from directory
  $html = file_get_contents($remote_file_directory_url);
  //parse the html
  $count = preg_match_all('/<a href=\"([^\"]*)\">(.*)<\/a>/iU',
			  $html, $files);

  

  
  for ($i = 0; $i < $count; $i++) {
    $valid = $upos = $dpos = $pid = $date = $project = FALSE;
    
    $file = urldecode($files[1][$i]);

    $upos = strpos($file, '_');
    if ($upos) {
      $dpos = strpos($file, '.', $upos);
      if ($dpos) {
	$pid = substr($file, 0, $upos);
	if (is_numeric($pid)) {
	  $project = node_load($pid);
	}
	if (!$project || $project->type != 'cm_project') {
	  if (is_numeric($pid)) {
	    $bad_projects[] = $file;
	  }
	  $bad_file_names[] = $file;
	  continue;
	}
	
	$month_day = substr($file, ($upos + 1), ($dpos-($upos+1)));

	$date_length = strlen($month_day);
	if ($date_length == 4 && is_numeric($month_day)) {
	  //check for valid month
	  if ((substr($month_day, 0, 2) == '00') ||
	      (((int)substr($month_day, 0, 2)) > 12)) {
	    $bad_file_names[] = $file;
	    continue;
	  }
	  //check for valid day
	  if ((substr($month_day, 2, 2) == '00') ||
	      (((int)substr($month_day, 2, 2)) > 31)) {
	    $bad_file_names[] = $file;
	    continue;
	  }
		  
	  $cur_year = date('Y');
	  $prev_year = $cur_year - 1;
	  $next_year = $cur_year + 1;
	  
	  $date_string_suffix = '-' . substr($month_day, 0, 2) . '-' .
	    substr($month_day, 2, 2);

	  $cur = strtotime($cur_year . $date_string_suffix);
	  $prev = strtotime($prev_year . $date_string_suffix);
	  $next = strtotime($next_year . $date_string_suffix);

	  $dates = array($prev, $cur, $next);
	  $now = strtotime('now');
	  $low_diff = 365*24*60*60; //no valid diff will be less than a year

	  foreach($dates as $date_ts) {
	    //find the nearest date
	    if (abs($date_ts - $now) < $low_diff) {
	      $low_diff = abs($date_ts - $now);
	      //last $airdate found will be our match
	      $airdate = date('Y-m-d', $date_ts);
	    }
	  }
	  
	  //find airing for project for airdate
	  $range_end = mnn_qnap_show_add_to_date(strtotime($airdate), 'day',1);
	  $fill_tid = 970;

	  $sql_prefix =
	    "FROM field_data_field_airing_date ad " .
	    "INNER JOIN field_data_field_airing_project_ref ap " .
	    "ON ap.entity_id=ad.entity_id " .
	    "INNER JOIN field_data_field_airing_show_ref s " .
	    "ON s.entity_id=ad.entity_id " .
	    "LEFT JOIN field_data_field_airing_type at " .
	    "ON at.entity_id=ad.entity_id " .
	    "WHERE ap.field_airing_project_ref_target_id = " . $pid . " " .
	    "AND ad.field_airing_date_value >= '" . $airdate . "' " .
	    "AND ad.field_airing_date_value < '" .
	    date('Y-m-d 00:00:00', $range_end). "' " .
	    "AND at.field_airing_type_tid != " . $fill_tid;

	  $count_sql = "SELECT count(1) " . $sql_prefix;

	  //execute query
	  $count_shows = db_query($count_sql)->fetchField();

	  if ($count_shows == 0) {
	    $missing_shows[] = $file;
	  }
	  else {
	    $text = file_get_contents($remote_file_directory_url .'/'. $file);

	    $lines =  explode(PHP_EOL,$text);
	    $description = '';
	    $prev_line = '';
	    foreach($lines as $line) {
	      if (!trim($line) ||
		  strpos($file, trim($line)) === 0 ||
		  strpos($file, trim($line)) > 0) {
		continue;
	      }
	      else if ($prev_line && trim($prev_line) == trim($line)) {
		continue;
	      }
	      if ($description) {
		$description .= ' ';
	      }
	      $description .= trim($line);
	      $prev_line = $line;
	    }
	    $description = substr(trim($description), 0, 200);
	    if (!$description) {
	      $valid = FALSE;
	      $empty[$file] = $text;
	    }
	    else if ($description) { //we have found a description
	      $result_sql =
		"SELECT ad.entity_id as airing_id, " .
		"s.field_airing_show_ref_target_id as show_id, " .
		"ad.field_airing_date_value as airdate " . $sql_prefix;
	      
	      $results = db_query($result_sql);

	      $result_shows = $filtered_results = array();
	      while ($result = $results->fetchObject()) {
		if (isset($result_shows[$result->show_id])) {
		  continue;
		}
		$filtered_results[] = $result;
		$result_shows[$result->show_id] = $result;

	      }
	      $count_shows = count($filtered_results);

	      if ($count_shows > 1) {
		$multiples[$file] = array();

		foreach ($filtered_results as $result) {
		  $show = node_load($result->show_id);
		  if (!$show) {
		    $missing_shows[] = $file;
		    continue;
		  }

		  $multiples[$file][$result->airdate] =
		    isset($multiples[$file][$result->airdate]) ?
		    $multiples[$file][$result->airdate] : array();
		  
		  $current = $show->field_short_description[LANGUAGE_NONE]
		    [0]['value'];
		
		  $original = $show->field_qnap_original_description
		    [LANGUAGE_NONE][0]['value'];
		  $info = array(
				'title' => $show->title,
				'airdate' => $result->airdate,
				'airing_id' => $result->airing_id,
				'show_id' => $result->show_id,
				'new' => $description,
				'raw' => $text,
				'current' => $current,
				'original' => $original);
		  $multiples[$file][$result->airdate][$show->nid] = $info;
		}
	      }
	      else {
		$result = $filtered_results[0];
		$show = node_load($result->show_id);
		if (!$show) {
		  $missing_shows[] = $file;
		  continue;
		}
		
		$current = $show->field_short_description[LANGUAGE_NONE]
		  [0]['value'];
		
		$original = $show->field_qnap_original_description
		  [LANGUAGE_NONE][0]['value'];
		
		$info = array(
			      'title' => $show->title,
			      'airdate' => $result->airdate,
			      'airing_id' => $result->airing_id,
			      'show_id' => $result->show_id,
			      'new' => $description,
			      'raw' => $text,
			      'current' => $current,
			      'original' => $original);
		if ($description == $current) {
		  $already_updated[$file] = $info;
		}
		else {
		  $found_shows[$file] = $info;
		}
	      }
	    
	      $harvested_files[$file] = array('pid' => $pid,
					      'date' => $airdate);
	      $valid = TRUE;
	    }
	  }
	}
      }
    }

    if (!$valid) {
      $bad_file_names[] = $file;
    }

  }
}
/*
 * This is a util funtion that allows you to add x amount of units to
 * a date. I.e. i want to add 4 weeks or 3 days to a date.
 * 
 * The important thing in this function is it takes into affect
 * DST so that if i add 1 week to Monday at 4pm, i get the next week at 
 * 4pm regardless of if there was DST change within the week.
 * 
 * @param $time the time to which to add 
 * @param $type will be either hour, day or week
 * @param $multiplier the amount of hours, days, or weeks
 */
function mnn_qnap_show_add_to_date($time, $type, $multiplier) {
   if (!$multiplier) {
     $multiplier = 1;
   }

   if ($type == "week") {
     $new_time = $time + $multiplier*7*24*60*60;
   }
   else if ($type == "hour") {
     $new_time = $time + $multiplier*60*60;
   }
   else if ($type == "day") {
     $new_time = $time + $multiplier*24*60*60;
   }
   if (date('I', $time) != date('I', $new_time)) {
      if (date('I', $new_time)) {
        $new_time = $new_time - 60*60;
      }
      else if (date('I', $time)) {
        $new_time = $new_time + 60*60;
      }
   }
   return $new_time;
}

/**                                                                            
 * Helper function to get a single value off of a entity  
*/
function mnn_qnap_show_get_single_field_value($entity, $field_name,
						$index = 'value') {
  if (isset($entity->{$field_name})) {
    $field = $entity->{$field_name};
    if (isset($field[LANGUAGE_NONE]) &&
        isset($field[LANGUAGE_NONE][0]) &&
        isset($field[LANGUAGE_NONE][0][$index])) {
      return $field[LANGUAGE_NONE][0][$index];
    }
  }
  return NULL;
}
