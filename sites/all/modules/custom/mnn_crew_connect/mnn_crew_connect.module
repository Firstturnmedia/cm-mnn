<?php
/**
 * @file implements hooks from cm_crew_connect
 */
////////////////////////////////////////////////////////////////////////
//HOOKS

/**
 * implements hook_connect_request_form_alter()
 *
 * @param $form - the Crew Connect Request Form
 * @param $request - the Crew Connect Request
 * @param $project - the Project associated with the Crew Request
 * @param $author_id - the uid of the user creating the Crew Request
 */
function mnn_crew_connect_crew_connect_request_form_alter(&$form,
							  $request,
							  $project,
							  $author_uid) {
  
  $msg = t("Please make sure you have a Confirmed Reservation for the " .
	   "relevant facility and time prior to asking for a Crew.")

  drupal_set_message($msg, 'warning');

  //THESE FIELDS COME FROM THE PROJECT AND ARE NOT EDITABLE FOR MNN
  $form['field_crew_producer_name'][LANGUAGE_NONE]['#disabled'] = TRUE;
  $form['field_crew_public_description'][LANGUAGE_NONE]['#disabled'] = TRUE;
  $form['field_crew_public_url'][LANGUAGE_NONE]['#disabled'] = TRUE;
  $form['field_crew_language'][LANGUAGE_NONE]['#disabled'] = TRUE;   
  
  if ($project) {
    $form['title'] = array('#type'=>'hidden',
         '#value'=>$project->title);
  }

  //UNSETTING THESE FIELDS AS THE CONDITIONAL TMP VALUES WILL COLLECT 
  //THEM AND THEN IN PRESAVE WE WILL SET THESE FIELDS BASED ON THE TMP 
  //FIELDS. 
  $form['field_crew_location'] = array();
  $form['field_crew_positions'] = array();
  $form['field_which_studio_is_this_in_'] = array();
  
  //IF WE ARE CREATING A NEW REQUEST, PREPOPULATE FIELDS
  if (!$request) {
    $public_email = cm_crew_connect_get_email_for_location_type($author_id, 6);
          
    $form['field_crew_requesters_pub_email'][LANGUAGE_NONE][0]
      ['value']['#default_value'] = $public_email;

    $form['field_crew_public_description'][LANGUAGE_NONE][0]
      ['value']['#default_value'] = 
      cm_crew_connect_get_single_field_value($project, 'field_description');
    
    $form['field_crew_public_url'][LANGUAGE_NONE][0]
      ['value']['#default_value'] = 
      cm_crew_connect_get_single_field_value($project,
					     'field_project_public_url');
    
    $language_tid = 
      cm_crew_connect_get_single_field_value($project, 
					     'field_pbcore_languages',
					     'tid');
    
    $term = $language_tid ? taxonomy_term_load($language_tid) : NULL;
    $form['field_crew_language'][LANGUAGE_NONE][0]['value']['#default_value'] =
      $term ? $term->name : "";
    
  }
}

/**
 * implements hook_crew_connect_application_form_alter()
 *
 * @param $form - the Crew Connect Application Form
 * @param $application - the Crew Connect Application
 * @param $project - the Project associated with the Crew Application
 * @param $author_id - the uid of the user creating the Crew Application

 */
function mnn_crew_connect_crew_connect_application_form_alter(&$form,
							      $application,
							      $author_uid) {
  if (!$applicaiton) {
    $public_email =
      cm_crew_connect_get_email_for_location_type($author_uid, 6);
    
    $form['field_app_apps_public_email'][LANGUAGE_NONE][0]
      ['value']['#default_value'] = $public_email;      
    
  }
}

/**
 * implements hook_crew_connect_search_form_alter()
 * @param $form the exposed filter form that appears on search pages
 */
function mnn_crew_connect_crew_connect_search_form_alter(&$form) {
    
  if (isset($form['field_crew_location_value'])) {

    $field_id = 'field_crew_location';
    
    // Build a query to get all node ids having the specified field
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'crew_connect_request')
      ->fieldCondition($field_id, 'value', 'NULL', '!=')            
      ->fieldOrderBy($field_id, 'value', 'ASC');                   
    
    $results = $query->execute();
    
    
    // Attach the field values to the nodes
    $nodes = $results['node'];
    field_attach_load(
		      'node', 
		      $nodes, 
		      FIELD_LOAD_CURRENT, 
		      array(
			    'field_id' => $field_id
			    )
		      );
    
    // Add a default so the filter is optional
    $options = array('' => '');
    
    // Build the options array based on the query results, overwriting 
    // duplicate entries
    foreach($nodes as $nid => $node) {
      
      $value = $node->{$field_id}['und'][0]['value'];
      $options[$value] = $value;      
    }
    
    // Alter the field
    $form[$field_id .'_value']['#type'] = 'select';
    $form[$field_id .'_value']['#options'] = $options;
    $form[$field_id .'_value']['#size'] = 1;
    
  }
}


/**
 * implements hook_crew_connect_available_positions()
 */
function mnn_crew_connect_crew_connect_available_positions(&$users,
							   &$positions) {
  $mapping = mnn_crew_connect_role_position_mapping();
  $positions = mnn_crew_connect_role_positions($mapping);

}


/**
 * implements hook_crew_request_presave()
 */
function mnn_crew_connect_crew_request_presave(&$node, $project, &$position) {

  ////////////////////////////////////////////////////////////////////
  //LOCATION
  //FETCH CURRENT LOCATION
  $location = 
    cm_crew_connect_get_single_field_value($node,
					   'field_crew_location',
					   'value');

  $location_field = field_info_field('field_tmp_crew_location');   
  $allowed_values = list_allowed_values($location_field);
  
  //CHECK FOR TMP LOCATION FIELDS
  $tmp_location = 
    cm_crew_connect_get_single_field_value($node,
					   'field_tmp_crew_location',
					   'value');
  $location = $tmp_location ? $allowed_values[$tmp_location] : $location;
  
  $node->field_crew_location[LANGUAGE_NONE][0]['value'] = $location;

  ///////////////////////////////////////////////////////////////////////
  //POSITION

  //FETCH CURRENT POSITION
  $position = 
    cm_crew_connect_get_single_field_value($node,
					   'field_crew_positions',
					   'value');
  
  //CHECK FOR TMP POSITION FIELD
  $index = count($allowed_values);
  $new_position = '';

  //THIS A HACK, I BUILD FIELD NAMES BY GOING OFF THE REVERSE ORDER OF 
  //LOCATION FIELD
  foreach ($allowed_values as $k=>$v) {
    if ($k == $tmp_location) {
      $field_name = 'field_tmp'.$index.'_crew_position';
      $new_position = 
	cm_crew_connect_get_single_field_value($node,$field_name,'value');
      break;
    }
    $index --;
    
  }
  
  $position = $new_position ? $new_position : $position;

  $node->field_crew_positions[LANGUAGE_NONE][0]['value'] = $position;

  ///////////////////////////////////////////////////////////////////////
  //STUDIO

  //GET CURRENT WHICH STUDIO 
  $studio = 
    cm_crew_connect_get_single_field_value($node,
					   'field_which_studio_is_this_in',
					   'value');
  //CHECK FOR TMP STUDIO FIELDS
  $field_name = 'field_tmp'.$index.'_which_studio';
  
  $new_studio = 
    cm_crew_connect_get_single_field_value($node,$field_name,'value');

  $studio = $new_studio ? $new_studio : $studio;
    
  $node->field_which_studio_is_this_in_[LANGUAGE_NONE][0]['value'] = $studio; 
}

/**
 * implements hook_event_creation_args()
 */
function mnn_crew_connect_event_creation_args(&$params, $node) {
  //get teh civi template id from the field_tmp_crew_location field
  $tmp_crew_location = 
    cm_crew_connect_get_single_field_value($node,
					   'field_tmp_crew_location',
					   'value');

  //The location field that is presented to the user has template ID's as its
  //values
  $params['template_id'] = $tmp_crew_location;

}




/////////////////////////////////////////////////////////////////////////
//HELPER FUNCTIONS

/**
  * Helper function to get a single value off of a entity 
 */
function mnn_crew_connect_get_single_field_value($entity, 
						 $field_name,
						 $index = 'value') {
  if (isset($entity->{$field_name})) {
    $field = $entity->{$field_name};
    if (isset($field[LANGUAGE_NONE]) &&
        isset($field[LANGUAGE_NONE][0]) &&
        isset($field[LANGUAGE_NONE][0][$index])) {
      return $field[LANGUAGE_NONE][0][$index];
    }
  }
  return NULL;
}

/**
 * Returns a array map of roles to the positions they are qualified for
 */
function mnn_crew_connect_role_position_mapping() {

  $ret = array(
	  'admin' => array(
				"express_studios_general",
				"editor_premiere",
				"editor_xpression_cg",
				"studios_camera_manual",
				"studios_camera_robotic",
				"studios_floor_manager",
				"studios_audio",
				"studios_switcher",
				"studios_teleprompter",
				"studios_cg_operator",
				"studios_director",
        "studios_general_prod_asst",
		),
	  'Staff - All' => array(
				"express_studios_general",
				"editor_premiere",
				"editor_xpression_cg",
				"studios_camera_manual",
				"studios_camera_robotic",
				"studios_floor_manager",
				"studios_audio",
				"studios_switcher",
				"studios_teleprompter",
				"studios_cg_operator",
				"studios_director",
        "studios_general_prod_asst",
		),

    'DSTE' => array(
        "express_studios_general",
    ),
    'FH - Express' => array(
        "express_studios_general",
    ),    
	  'PREM' => array(
			  "editor_premiere",
		),	       
	  'FH - Premiere' => array(
			  "editor_premiere",
		),
    'DSTW' => array(
				"editor_xpression_cg",
				"studios_camera_manual",
				"studios_camera_robotic",
				"studios_floor_manager",
				"studios_audio",
				"studios_switcher",
				"studios_teleprompter",
				"studios_cg_operator",
				"studios_director",
        "studios_general_prod_asst",
    ),
    'FH - Studio' => array(
				"editor_xpression_cg",
				"studios_camera_manual",
				"studios_camera_robotic",
				"studios_floor_manager",
				"studios_audio",
				"studios_switcher",
				"studios_teleprompter",
				"studios_cg_operator",
				"studios_director",
        "studios_general_prod_asst",
    ),            
	       );
  return $ret;
}
/**
 * Returns a "+" deliminated string of crew connect positions
 */
function mnn_crew_connect_role_positions($mapping) {
  $positions = NULL;
  $is_first = TRUE;
  $sql = "SELECT name from {role}";
  $roles_result = db_query($sql);
  
  while($role = $roles_result->fetchObject()) {
    if (!cm_crew_connect_user_has_role(array($role->name))) {
      continue;
    }

    if (isset($mapping[$role->name])) {
      foreach($mapping[$role->name] as $position) {
	if (!$is_first) {
	  $positions .= "+";
	}
	else {
	  $is_first = FALSE;
	}
  
	$positions .= $position;
      }
    }
  }
  return $positions;
}
