<?php

/**
 * @file
 * Module that exports schedule info as json data.
 */

ctools_include('cleanstring', 'ctools', 'includes');

/**
 * Implements hook_menu().
 */
function mnn_schedule_export_menu() {
  return array(
		'schedule/get.json' => array(
      'title' => 'Schedule Export',
			'page callback' => 'mnn_schedule_export_schedule_page',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
			'menu_name' => 'schedule_export',
		),
  );
}

/**
 * Page callback to return schedule in JSON format.
 */
function mnn_schedule_export_schedule_page() {
	$requested = NULL;
	if (isset($_REQUEST['date'])) {
		try {
			$requested_date = new DateTime($_REQUEST['date'], new DateTimeZone('America/New_York'));
		} catch (Exception $e) {
			// If there was a problem parsing the date
			// then we'll use the default date.
		}
	}
	$schedule_data = mnn_schedule_export_get_schedule_data($requested_date);
  drupal_json_output($schedule_data);
	drupal_add_http_header('Access-Control-Allow-Origin', '*');
	drupal_add_http_header('Access-Control-Max-Age',  '3600');
  drupal_exit();
}

/**
 * Get the compiled schedule data for the given date.
 *
 * @param object $requested_date
 *  (optional) A date object representing the date on which to query.
 *
 * @return array
 *  An array containing the compiled schedule data.
 */
function mnn_schedule_export_get_schedule_data($requested_date = NULL) {
	if (empty($requested_date)) {
		// Default to today.
		$requested_date = new DateTime(NULL, new DateTimeZone('America/New_York'));
	}
	$formatted_date = $requested_date->format('Y-m-d');
	$cache_id = 'mnn_schedule_export:schedule:' . $formatted_date;
	$cache = cache_get($cache_id, 'cache');

	if (!empty($cache->data) && $cache->expire < REQUEST_TIME) {
		return $cache->data;
	}

	$channels = array(
		'Channel 1' => array(),
		'Channel 2' => array(),
		'Channel 3' => array(),
		'Channel 4' => array(),
		'Channel 5' => array(),
	);
	// Prime time is 7pm to midnight
	$primetime_start = new DateTime($requested_date->format('m/d/Y 19:0:0'), new DateTimeZone('America/New_York'));
	$primetime_end = new DateTime($requested_date->format('m/d/Y 23:59:59'), new DateTimeZone('America/New_York'));
	$now = new DateTime(NULL, new DateTimeZone('America/New_York'));
	$midnight = new DateTime($requested_date->format('m/d/Y 0:0:0'), new DateTimeZone('America/New_York'));

	$results = mnn_schedule_export_get_schedule_raw_data($formatted_date);
	foreach ($results as $result) {
		// Round the duration to the nearest 30 minutes.
		$duration = $result->duration / 60;
		$duration = round($duration / 30) * 30;
		$start = new DateTime($result->field_airing_date_value, new DateTimeZone('America/New_York'));
		$end = new DateTime($result->field_airing_date_value, new DateTimeZone('America/New_York'));
		$end->add(new DateInterval('PT' . $duration . 'M'));
		if ($start < $midnight){
			$interval = $start->diff($midnight);
			$duration -= intval($interval->format('%i'));
		}

		$primetime = 'false';
		if (mnn_schedule_export_is_date_in_range($primetime_start, $primetime_end, $start) || mnn_schedule_export_is_date_in_range($primetime_start, $primetime_end, $end->sub(new DateInterval('PT1M')))) {
			$primetime = 'true';
		}

		$row = array(
			'link' => '/show-info/' . $result->nid . '/' . mnn_schedule_export_url_friendly_title($result->title),
			'title' => $result->title,
			'category' => isset($result->topic_name) ? $result->topic_name : 'Other',
			'start' => $start->format("H-i"),
			'isCurrent' => ($now >= $start && $now <= $end) ? 'true' : 'false',
			'isPrimetime' => $primetime,
			'duration' => $duration,
			'description' => $result->field_description_value,
			'projectId' => $result->nid,
			'listed' => !empty($result->field_internet_archive_tos_value) ? TRUE : FALSE,
		);

		if (isset($channels[$result->name])) {
			$channels[$result->name][] = $row;
		}
	}

	// Build the time column
	$time_col = array();
	$hour = $now->format('H');
	$minute = $now->format('i') >= 30 ? '30' : '00';
	// Round to th nearest half hour.
	$now->setTime($hour, $minute, 0);
	$time_increment = clone $requested_date;
	$time_increment->setTime(0, 0, 0);
	$duration = 30;
	for ($i = 0; $i < 48; $i++){
		$primetime = 'false';
		if (mnn_schedule_export_is_date_in_range($primetime_start, $primetime_end, $time_increment) || mnn_schedule_export_is_date_in_range($primetime_start, $primetime_end, $time_increment)) {
			$primetime = 'true';
		}
		$time_col[] = array(
			'display' => $time_increment->format('g:i A'),
			'start' => $time_increment->format("H-i"),
			'isCurrent' => $time_increment == $now ? 'true' : 'false',
			'isPrimetime' => $primetime,
			'duration' => $duration,
		);
		$time_increment->add(new DateInterval('PT30M'));
	}

	$prevDate = clone $requested_date;
	$nextDate = clone $requested_date;
	$prevDate->sub(new DateInterval('P1D'));
	$nextDate->add(new DateInterval('P1D'));

	$schedule_data = array(
		'schedDate' => $requested_date->format('m/d/Y'),
		'prevDate' => $prevDate->format('m/d/Y'),
		'nextDate' => $nextDate->format('m/d/Y'),
		'displayDate' => $requested_date->format('l, F j'),
		'utc_timezone_offset' => mnn_schedule_export_get_utc_timezone_offset(),
		'time' => $time_col,
		'ch1' => $channels['Channel 1'],
		'ch2' => $channels['Channel 2'],
		'ch3' => $channels['Channel 3'],
		'ch4' => $channels['Channel 4'],
		'ch5' => $channels['Channel 5'],
	);

	cache_set($cache_id, $schedule_data, 'cache', 3600);
	return $schedule_data;
}

/**
 * Get the raw schedule data from the database.
 *
 * @param string $formatted_date
 *  A date formatted as Y-m-d do limit the results to a single day.
 *
 * @return object
 *  A db query object with results already calculated or an array of results.
 */
function mnn_schedule_export_get_schedule_raw_data($formatted_date) {
	// Get all of the airing information joined up with its related project.
	$query = db_select('cm_airing', 'airing');

	// Join fields on airing entities.
	foreach (array(
		'field_airing_title',
		'field_airing_channel',
		'field_airing_date',
		'field_airing_show_ref',
		'field_airing_project_ref',
	) as $field_name) {
		$select_name = 'airing_' . $field_name;
		$query->leftJoin('field_data_' . $field_name, $select_name, $select_name . '.entity_id = airing.airing_id');
	}
	$query->leftJoin('node', 'project', 'project.nid = airing_field_airing_project_ref.field_airing_project_ref_target_id');

	// Join fields on project nodes.
	foreach (array(
		'field_description',
		'field_pbcore_genres',
		'field_internet_archive_tos',
	) as $field_name) {
		$select_name = 'project_' . $field_name;
		$query->leftJoin('field_data_' . $field_name, $select_name, $select_name . '.revision_id = project.vid');
	}

	// Grab actual term names.
	$query->leftJoin('taxonomy_term_data', 'channel', 'airing_field_airing_channel.field_airing_channel_tid = channel.tid');
	$query->leftJoin('taxonomy_term_data', 'topic', 'project_field_pbcore_genres.field_pbcore_genres_tid = topic.tid');

	// Add date conditionals
	// field_airing_date_value = start date
  // field_airing_date_value2 = end date
	$or = db_or();
	foreach (array('field_airing_date_value', 'field_airing_date_value2') as $date_field) {
		$or->condition(db_and()
			->condition('airing_field_airing_date.' . $date_field, $formatted_date . ' 0:00:00', '>=')
			->condition('airing_field_airing_date.' . $date_field, $formatted_date . ' 23:59:59', '<=')
		);
	}
	$query->addExpression('(UNIX_TIMESTAMP(airing_field_airing_date.field_airing_date_value2) - UNIX_TIMESTAMP(airing_field_airing_date.field_airing_date_value))', 'duration');
	return $query->condition($or)
		->fields('project', array('nid', 'title'))
		->fields('airing_field_airing_date', array('field_airing_date_value'))
		->fields('project_field_description', array('field_description_value'))
		->fields('project_field_internet_archive_tos', array('field_internet_archive_tos_value'))
		->fields('channel', array('name'))
		->fields('topic', array('name'))
		->orderBy('airing_field_airing_channel.field_airing_channel_tid', 'ASC')
		->orderBy('airing_field_airing_date.field_airing_date_value', 'ASC')
		->execute();
}

/**
 * Check if a date is within a range.
 */
function mnn_schedule_export_is_date_in_range($start_date, $end_date, $date) {
  // assume DateTime object
  return (($date >= $start_date) && ($date <= $end_date));
}

/**
 * Generate a url friendly title.
 */
function mnn_schedule_export_url_friendly_title($title){
  return ctools_cleanstring($title, array('lower case' => true));
}

/**
 * Returns actual timezone offset for server's
 * timezone. Takes in account daylight saving shifts.
 *
 * @return float
 */
function mnn_schedule_export_get_utc_timezone_offset() {
  $dtz = new DateTimeZone(date_default_timezone_get());
  $time_in_server_zone = new DateTime('now', $dtz);
  return ($dtz->getOffset( $time_in_server_zone ) / 3600);
}

